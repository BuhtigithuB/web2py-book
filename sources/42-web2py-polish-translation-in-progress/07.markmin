## Formularze i walidatory

W web2py istnieją cztery różne sposoby budowania formularzy:
- ``FORM`` zapewnia implementację niskiego poziomu w zakresie helperów HTML.
  Obiekt ``FORM`` może być serializowany do kodu HTML i jest mu znana zawartość
  pól. Wie, jak sprawdzać zgłoszone formularze.
- ``SQLFORM`` dostarcza API wysokiego poziomu do budowania funkcjonalności tworzenia,
  aktualizowania i usuwania formularzy powiązanych z istniejącymi tabelami bazy danych.
- ``SQLFORM.factory`` jest abstrakcyjną warstwą na szczycie ``SQLFORM`` w celu
  wykorzystania funkcjonalności generowania formularzy, nawet jeśli nie jest dostępna
  baza danych. Generuje to formularze bardzo podobnie do ``SQLFORM``, z opisem tabeli,
  ale bez potrzeby tworzenia tabeli bazy danych.
- Metody obiektu ``CRUD``. Są one funkcjonalnym równoważnikiem SQLFORM i są oparte
  na SQLFORM, ale dostarczają bardziej zwartą notację.

Wszystkie te formularze są samoinformujące się i jeśli dane wejściowe nie przechodzą
walidacji, mogą zostać dodane komunikaty błędów. Formularze można wypytywać o zmienne
walidacyjne i o komunikaty błędów generowanych podczas walidacji.

Dowolny kod HTML może być wstawiany do lub ekstrahowany z formularza przy użyciu helperów.

``FORM`` i ``SQLFORM`` są helperami, którymi można manipulować w podobny sposób
jak z ``DIV``. Na przykład można ustawić styl formularza:

``
form = SQLFORM(..)
form['_style']='border:1px solid black'
``:code

### ``FORM``
``formularz``:inxx ``akceptacje``:inxx ``nazwa formularza``:inxx

Rozważmy dla przykładu aplikację **test** z nastęþującym kontrolerem "default.py":
``
def display_form():
    return dict()
``:code

i związananym widokiem "default/display_form.html":
``
{{extend 'layout.html'}}
<h2>Input form</h2>
<form enctype="multipart/form-data"
      action="{{=URL()}}" method="post">
Your name:
<input name="name" />
<input type="submit" />
</form>
<h2>Submitted variables</h2>
{{=BEAUTIFY(request.vars)}}
``:code

Jest to zwykły formularz HTML, który pyta o nazwę użytkownika. Gdy wypełni się ten
formularz i kliknie przycisk zatwierdzający, nastąpi samozgłoszenie formularza
i zmienna ``request.vars.name`` wraz z wartoscią zostanie wyświetlona na przycisku.

Można wygenerować taki sam formularz używając helperów. Można to zrobić w widoku
lub w akcji. Ponieważ web2py przetwarza formularz w akcji, lepiej jest też
zdefiniować formularza w akcji.

Oto nowy kontroler:
``
def display_form():
   form=FORM('Your name:', INPUT(_name='name'), INPUT(_type='submit'))
   return dict(form=form)
``:code

i związany z nim widok "default/display_form.html":
``
{{extend 'layout.html'}}
<h2>Input form</h2>
{{=form}}
<h2>Submitted variables</h2>
{{=BEAUTIFY(request.vars)}}
``:code

Kod ten, jak do tej pory, jest równoważny poprzedniemu kodowi, ale formularz jest
generowany przez wyrażenie ``{{=form}}``, które serializuje obiekt ``FORM``.

Teraz dodamy jeden poziom złożoności, dodając walidację formularza i przetwarzanie.

Zmieńmy kontroler następujaco:
``
def display_form():
    form=FORM('Your name:',
              INPUT(_name='name', requires=IS_NOT_EMPTY()),
              INPUT(_type='submit'))
    if form.accepts(request,session):
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill the form'
    return dict(form=form)
``:code

oraz związany widok "default/display_form.html":
``
{{extend 'layout.html'}}
<h2>Input form</h2>
{{=form}}
<h2>Submitted variables</h2>
{{=BEAUTIFY(request.vars)}}
<h2>Accepted variables</h2>
{{=BEAUTIFY(form.vars)}}
<h2>Errors in form</h2>
{{=BEAUTIFY(form.errors)}}
``:code

Proszę zauważyć, że:
- W akcji dodaliśmy walidator ``requires=IS_NOT_EMPTY()`` dla pola input "name".
- W akcji dodaliśmy wywołanie ``form.accepts(..)``
- W widoku drukujemy ``form.vars`` i ``form.errors`` jak również formularz i ``request.vars``.

Cała praca wykonywana jest przez metodę ``accepts`` obiektu ``form``. Filtruje ona
``request.vars`` zgodnie z deklarowanymi wymaganiami (wyrażonymi przez walidatory).
Metoda ``accepts`` przechowuje zmienne, które przechodzą walidację, w ``form.vars``.
Jeśli wartość pola nie spełnia wymagań, wykorzystywany walidator zwraca błąd, który
zostaje przechowany w ``form.errors``. Zarówno ``form.vars`` jak i ``form.errors``
są obiektami ``gluon.storage.Storage`` podobnymi do ``request.vars``. Pierwszy z
nich zawiera wartości, które przeszły walidację, na przykład:
``
form.vars.name = "Max"
``:code

Ten drugi obiekt zawiera błędy, na przykład:
``
form.errors.name = "Cannot be empty!"
``:code

Pełna sygnatura metody ``accepts`` jest następująca:
``onvalidation``:inxx
``
form.accepts(vars, session=None, formname='default',
             keepvalues=False, onvalidation=None,
             dbio=True, hideerror=False):
``:code

Znaczenie parametrów opcjonalnych jest wyjaśnione w następnych podrozdziałach.

Pierwszym argumentem może być ``request.vars`` lub ``request.get_vars``
lub ``request.post_vars`` lub po prostu ``request``. Ten ostatni parametr
jest równoznaczny z zaakceptowaniem jako wejścia zmiennej ``request.post_vars``.

Funkcja ``accepts`` zwraca ``True`` jeśli formularz został zaakceptowany a w przeciwnym
razie ``False``. Formularz nie zostanie zaakceptowany, jeśli ma błędy lub gdy nie
został zgłoszony (na przykład, za pierwszym razem jest pokazywany).

Oto jak wygląda ta strona, gdy formularz jest wyświetlany za pierwszym razem:

[[image @///image/pl5800.png center 300px]]

To jest jego wygląd, po nieprawidłowym zgłoszeniu:

[[image @///image/pl5900.png center 300px]]

Po prawidłowym zgłoszeniu nasz formularz będzie wyglądać tak:

[[image @///image/pl6000.png center 300px]]

#### Metody ``process`` i ``validate``

Skrótem dla
``
form.accepts(request.post_vars,session,...)
``:code
jest
``
form.process(...).accepted
``:code
Skrót nie potrzebuje argumentów ``request`` i ``session`` (choć ewentualnie można
je określić). Różni się on również tym od ``accepts``, ponieważ sam zwraca formularz.
Wewnętrznie ``process`` akceptuje i przekazuje do niego swoje argumenty. Wartości
zwracane przez ``accepts`` są zapisywane w zmiennej ``form.accepted``.

Funkcja process pobiera kilka dodatkowych argumentów, który nie pobiera ``accepts``:

- ``message_onsuccess``;
- ``onsuccess``: jeśli równe 'flash' (domyślnie) i formularz został zaakceptowany,
  to pojawi się o tym komunikat ``message_onsuccess`` ;
- ``message_onfailure`` ;
- ``onfailure``: jeśli równe 'flash' (domyślnie) i walidacja formularza nie powiodła
  się, to pojawi się o tym komunikat ``message_onfailure`` ;
- ``next`` wskazuje gdzie przekierować użytkownika po zaakceptowaniu formularza.

Argumenty ``onsuccess`` i ``onfailure`` mogą być funkcjami takimi jak
``lambda form: do_something(form)``.

Skrót
``
form.validate(...)
``:code

równoważny jest wyrażeniu
``
form.process(...,dbio=False).accepted
``:code

#### Pola warunkowe

Czasem zachodzi potrzeba pokazania pola, jeśli spełniony jest jakiś warunek.
Rozważmy następujący model:

``
db.define_table('purchase', Field('have_coupon','boolean'),Field('coupon_code'))
``

Przyjmijmy, że chcemy wyświetlić pole ``coupon_code``, wtedy i tylko wtedy, gdy
sprawdzane jest pole ``have_coupon``.
Można to wykonać w JavaScript. W web2py, odpowiedni kod JavaScript może zostać
wygenerowany automatycznie. Wystarczy zadeklarować, że to pole jest zależne od
wyrażenia. Wykorzystując atrybut ``show_if`` pola:

``
def index():
    db.purchase.coupon_code.show_if = (db.purchase.have_coupon==True)
    form = SQLFORM(db.purchase).process()
    return dict(form = form)
``

Wartość ``show_if`` jest zapytaniem i wykorzystuje tą samą składnię DAL, którą
używa się w zapytaniach do bazy danych. Różnica polega na tym, że to zapytanie
nie jest wysyłane do bazy danych, ale jest konwertowane do kodu JavaScript
i wysyłane do przeglądarki, gdzie kod ten jest wykonywany, gdy użytkownik edytuje
formularz.

#### Pola ukryte

Po zserializowaniu powyższego obiektu formularza przez ``{{=form}}``i ponieważ
wywołana została metodę ``accepts``, kod HTML formularza będzie wyglądać tak:
``
<form enctype="multipart/form-data" action="" method="post">
your name:
<input name="name" />
<input type="submit" />
<input value="783531473471" type="hidden" name="_formkey" />
<input value="default" type="hidden" name="_formname" />
</form>
``:code

Proszę zwrócić uwagę na obecność dwóch ukrytych pól: "_formkey" i "_formname".
Ich obecność jest wyzwalana przez wywołanie ``accepts``. Odgrywają one dwie ważne
role:
- Ukryte pole o nazwie "_formkey" jest jednorazowym tokenem, który jest używany
  do zabezpieczenia przed podwójnym złożeniem formularza. Wartość tego klucza jest
  generowana podczas serializowania formularza i przechowywana w ``session``.
  Gdy formularz zostaje złożony, wartość ta musi pasować, w przeciwnym przypadku
  metoda ``accepts`` zwraca ``False`` bez błędów, tak jakby formularz w ogóle nie
  został złożony. Dzieje się tak dlatego, że web2py nie może ustalić, czy formularz
  został złożony poprawnie.
- Ukryte pole o nazwie "_formname" jest generowane przez web2py jako jako nazwa
  dla formularza, ale nazwa ta może zostać nadpisana. Pole to jest niezbędne,
  aby umożliwić strony, które zawierają i przetwarzają wiele formularzy. web2py
  rozróżnia różne złożone formularze po ich nazwach.
- Opcjonalnie, ukryte pola określić można przez ``FORM(..,hidden=dict(...))``.

Rola tych ukrytych pól i ich wykorzystanie w niestandardowych formularzach i stronach
z wieloma formularzami jest omówione szczegółowo w dalszej części rozdziału.

Jeśli rozpatrywany formularz został złożony z pustym polem "name", nie przejdzie
walidacji. Gdy formularz jest ponownie serializowany, to pojawi się jako:
``
<form enctype="multipart/form-data" action="" method="post">
your name:
<input value="" name="name" />
<div class="error">cannot be empty!</div>
<input type="submit" />
<input value="783531473471" type="hidden" name="_formkey" />
<input value="default" type="hidden" name="_formname" />
</form>
``:code

Proszę zwrócić uwagę na występowanie DIV klasy "error" w serializowanym formularzu.
web2py wstawia ten komunikat błędu w formularzu, aby powiadomić odwiedzającego
o polu, które nie przeszło walidacji. Po złożeniu formularza, metoda ``accepts``
określa, ze formularz został złożony, sprawdza czy pole "name" jest puste i czy
wartość tego pola jest obowiązkowa i ewentualnie umieszcza w formularzu komunikat
błędu z walidatora.

Bazowy widok "layout.html" przewiduje obsługę bloków DIV z klasa "error". Domyślny
szablon układu wykorzystuje efekty jQuery do pokazywania komunikatów błędów z efektem
zsuwania na czerwonym tle. Proszę zapoznać się ze szczegółami w rozdziale 11.

#### ``keepvalues``

``keepvalues``:inxx

Opcjonalny argument ``keepvalues`` powiadamia web2py, co zrobić gdy formularz został
zaakceptowany i nie ma przekierowania, tak więc ten sam formularz będzie wyświetlony
ponownie. Domyślnie w takim przypadku formularz jest czyszczony. Jeśli ``keepvalues``
jest ustawione na ``True``, formularz jest wstępnie wypełniany poprzednio wprowadzonymi
danymi. Jest to pomocne, gdy ten sam formularz ma być używany wielokrotnie do wstawiania
podobnych rekordów. Jeśli argument ``dbio`` jest ustawiony na ``False``, web2py nie
będzie wykonywał jakichkolwiek operacji wstawiania lub aktualizowania rekordów w bazie
danych po zaakceptowaniu formularza. Jeśli ``hideerror`` zostanie ustawiony na ``True``
a formularz zawiera błędy, nie będą one wyświetlane podczas renderowania formularza
(będzie rolą programisty wyświetlenie jakoś tych błędów ze zmiennej ``form.errors``).
Argument ``onvalidation`` jest omówiony poniżej.

#### ``onvalidation``

Wartością argumentu ``onvalidation`` może być ``None`` lub funkcja, która pobiera
formularz i zwraca nothing. Taka funkcja może być wywołana i przekazana do formularza,
niezwłocznie po pozytywnej walidacji i przed czymkolwiek co się stanie po tej walidacji.
Funkcja ta ma wiele zastosowań. Na przykład, wykonanie dodatkowego sprawdzenia formularza
i ewentualnie dodanie do formularza błędów lub obliczenie wartości jakichś pol na
podstawie wartości innych pól lub wyzwolenie jakiejś akcji (jak na przykład wysłanie
wiadomości email) przed utworzeniem lub zaktualizowaniem rekordu.

Oto przykład:
``
db.define_table('numbers',
    Field('a', 'integer'),
    Field('b', 'integer'),
    Field('c', 'integer', readable=False, writable=False))

def my_form_processing(form):
    c = form.vars.a * form.vars.b
    if c < 0:
       form.errors.b = 'a*b cannot be negative'
    else:
       form.vars.c = c

def insert_numbers():
   form = SQLFORM(db.numbers)
   if form.process(onvalidation=my_form_processing).accepted:
       session.flash = 'record inserted'
       redirect(URL())
   return dict(form=form)
``:code

#### Wykrywanie zmian rekordu

Podczas wypełniania formularza podczas edycji istnieje pewne prawdopodobieństwo,
że inny użytkownik może jednocześnie edytować ten sam rekord. Więc w czasie zapisywania
rekordu dobrze jest sprawdzić, czy nie uległ on w międzyczasie zmianie, w celu uniknięcia
konfliktów. Można to zrobić tak:

``
db.define_table('dog',Field('name'))

def edit_dog():
    dog = db.dog(request.args(0)) or redirect(URL('error'))
    form=SQLFORM(db.dog,dog)
    form.process(detect_record_change=True)
    if form.record_changed:
        # do something
    elif form.accepted:
        # do something else
    else:
        # do nothing
    return dict(form=form)
``:code

#### Formularze a przekierowanie

Najczęstszym sposobem wykorzystania formularzy jest tzw. samozgłoszenie, co oznacza,
że zgłoszone zmienne pól są przetwarzane w tej samej akcji, w której wygenerowano
formularz. Po zaakceptowaniu formularza, niezwykła rzeczą jest jego ponowne
wyświetlenie na bieżącej stronie. Bardziej rozpowszechnione jest przekierowanie
odwiedzającego do "następnej" strony.

Oto nowy przykład kontrolera:
``
def display_form():
    form = FORM('Your name:',
              INPUT(_name='name', requires=IS_NOT_EMPTY()),
              INPUT(_type='submit'))
    if form.process().accepted:
        session.flash = 'form accepted'
        redirect(URL('next'))
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill the form'
    return dict(form=form)

def next():
    return dict()
``:code

W celu ustawienia komunikatu fleszowego na następnej stronie a nie na bieżącej,
trzeba zastosować ``session.flash`` zamiast ``response.flash``. web2py przeniesie
to pierwsze wyrażenie na następną stronę po przekierowaniu. Trzeba mieć na uwadze,
że używanie ``session.flash`` wymaga nie stosowania ``session.forget()``.

#### Wiele formularzy na jednej stronie

Treść tego rozdziału dotyczy zarówno klasy ``FORM`` jak i ``SQLFORM``.
Jest możliwe posiadanie wielu formularzy na stronie, ale trzeba umożliwić ich
rozróżnianie przez web2py. Jeśli formularze są uzyskiwane z ``SQLFORM`` z różnych
tabel, to web2py automatycznie przydziela im różne nazwy. W przeciwnym razie zachodzi
potrzeba jawnego określenia nazw dla poszczególnych formularzy. Oto przykład:
``
def two_forms():
    form1 = FORM(INPUT(_name='name', requires=IS_NOT_EMPTY()),
               INPUT(_type='submit'))
    form2 = FORM(INPUT(_name='name', requires=IS_NOT_EMPTY()),
               INPUT(_type='submit'))
    if form1.process(formname='form_one').accepted:
        response.flash = 'form one accepted'
    if form2.process(formname='form_two').accepted:
        response.flash = 'form two accepted'
    return dict(form1=form1, form2=form2)
``:code

a to jest wyprodukowane wyjście:

[[image @///image/pl6100.png center 300px]]

Gdy użytkownik zgłasza pusty form1, to tylko w form1 wyświetlany jest błąd, jeśli
odwiedzający zgłosi pusty form2, to błąd będzie wyświetlony tylko w form2.

#### Udostępnianie formularzy

Treść tego rozdziału dotyczy klasy ``FORM`` oraz ``SQLFORM``. To co tu omówimy
jest możliwe, ale nie zalecane, ponieważ zawsze jest dobrą praktyką, aby tworzyć
formularz samozgłaszający się. Czasami jednak nie ma się wyboru, gdy akcja wysyłająca
formularz i akcja odbierająca należą do różnych aplikacji.

Jest możliwe wygenerowanie formularza, który zgłaszany jest do różnych akcji.
Realizuje się to przez określenie adresu URL akcji przetwarzającej w atrybucie
obiektów ``FORM`` lub ``SQLFORM``. Na przykład:
``
form = FORM(INPUT(_name='name', requires=IS_NOT_EMPTY()),
        INPUT(_type='submit'), _action=URL('page_two'))

def page_one():
    return dict(form=form)

def page_two():
    if form.process(session=None, formname=None).accepted:
         response.flash = 'form accepted'
    else:
         response.flash = 'there was an error in the form'
    return dict()
``:code

Proszę zauważyć, że ponieważ "page_one" oraz "page_two" używają ten sam obiekt
``form``, zdefiniowaliśmy go tylko raz, umieszczając na zewnątrz wszystkich akcji,
aby się nie powtarzać. Wspólna część kodu na początku kontrolera zostaje wykonana
za każdym razem przed przekazaniem sterowania do wywoływanej akcji.

Ponieważ "page_one" nie wywołuje ``process`` (ani ``accepts``), formularz nie ma
nazwy ani klucza, więc trzeba przekazać ``session=None`` i ustawić ``formname=None``
w ``process`` lub formularz nie będzie walidowany, gdy otrzyma go "page_two".

#### Dodawanie przycisków do obiektów FORM

Zazwyczaj formularz zawiera jeden przycisk zgłaszający „Prześlij”. Często chce
się dodać przycisk "Wstecz" zamiast przycisku „Prześlij”, przekierowujący odwiedzającego
do innej strony.

``add_button``:inxx

Można to zrobić przy wykorzystując metodę ``add_button``:

``
form.add_button('Wstecz', URL('other_page'))
``:code

Do formularza można dodawać więcej niż jeden przycisk. Argumentami metody
``add_button`` są wartość przycisku (jego tekst) i adres url przekierowania.
Proszę zapoznać się też z argumentem buttons dla SQLFORM, który dostarcza bardziej
zaawansowane rozwiązanie.

#### Więcej o manipulowaniu obiektami FORM
Tak jak opisano to w rozdziale poświęconemu widokom, klasa FORM jest helperem HTML.
Helpery mogą być manipulowane jak listy Pythona i jak słowniki, które można tworzyć
i manipulować nimi w czasie wykonania.

### ``SQLFORM``

Przejdźmy teraz do następnego poziomu i stwórzmy aplikacje z plikiem takiego modelu:
``
db = DAL('sqlite://storage.sqlite')
db.define_table('person', Field('name', requires=IS_NOT_EMPTY()))
``:code

Zmodyfikujmy kontroler następująco:
``
def display_form():
   form = SQLFORM(db.person)
   if form.process().accepted:
       response.flash = 'form accepted'
   elif form.errors:
       response.flash = 'form has errors'
   else:
       response.flash = 'please fill out the form'
   return dict(form=form)
``:code

Widoku nie potrzebujemy zmieniać.

W nowym kontrolerze nie potrzebujemy budowania ``FORM``, ponieważ konstruktor
``SQLFORM`` zbudował jeden formularz z danymi z tabeli ``db.person``, zdefiniowany
w modelu. Jest to nowy formularz, który po zserializowaniu do kodu HTML będzie wyglądał
następująco:
``
<form enctype="multipart/form-data" action="" method="post">
  <table>
    <tr id="person_name__row">
       <td><label id="person_name__label"
                  for="person_name">Your name: </label></td>
       <td><input type="text" class="string"
                  name="name" value="" id="person_name" /></td>
       <td></td>
    </tr>
    <tr id="submit_record__row">
       <td></td>
       <td><input value="Submit" type="submit" /></td>
       <td></td>
    </tr>
  </table>
  <input value="9038845529" type="hidden" name="_formkey" />
  <input value="person" type="hidden" name="_formname" />
</form>
``:code

Ten automatycznie wygenerowany formularz jest bardziej złożony niż poprzedni
formularz niskiego poziomu. Przede wszystkim zawiera wiersze tabeli i każdy wiersza
posiada trzy kolumny. Pierwsza kolumna zawiera etykiety pól (tak jak określono to
w ``db.person``), druga kolumna zawiera pola wejściowe (input) i ewentualnie
komunikaty błedów, a trzecia kolumna jest opcjonalna i dlatego pusta (może zostać
wypełniona z pól w konstruktorze ``SQLFORM``).

Wszystkie znaczniki w formularzu mają nazwy pochodzące z tabeli i nazwy pól. Pozwala
to na łatwe dostosowanie formularza przy użyciu CSS i JavaScript. Możliwości te są
szczegółowiej opisane w rozdziale 11.

Bardziej istotne jest to, że teraz nowa metoda ``accepts`` ma dużo więcej pracy.
Podobnie jak w poprzednim przypadku wykonuje walidację danych wejściowych, ale
dodatkowo, jeśli dane wejściowe przechodzą walidację, to również wykonuję wstawienie
nowych rekordów i zapisanie w ``form.vars.id`` unikalnego "id" nowego rekordu.

Obiekt ``SQLFORM`` również automatycznie zajmuje się polami "upload" dokonując zapisu
przesyłanych plików w folderze "uploads" (po zmianie nazwy pliku w celach uniknięcia
konfliktów i zabezpieczenia przed atakami „directory traversal”) i przechowując ich
nazwy (nowe nazwy) w odpowiednim polu w bazie danych. Nowa nazwa pliku zostaje
udostępniona, po przetworzeniu formularza, w ``form.vars.fieldname`` (czyli zastępuje
obiekt ``cgi.FieldStorage`` w ``request.vars.fieldname``), więc można łatwo odwoływać
się do nowej nazwy.

``SQLFORM`` wyświetla wartości "logiczne" w polach wyboru (checkbox), wartości
"tekstowe" w obszarach tekstowych (textarea), natomiast wartości, które muszą się
znajdować w określonym zestawie lub bazie danych w listach rozwijanych (drop-downs)
a pola "przesyłanych danych" w odnośnikach umożliwiających użytkownikom pobieranie
plików. Ukrywa on pola "blob", ponieważ muszą być obsługiwane inaczej, co omówione
jest dalej.

Na przykład, przeanalizujmy następujący model:
``
db.define_table('person',
    Field('name', requires=IS_NOT_EMPTY()),
    Field('married', 'boolean'),
    Field('gender', requires=IS_IN_SET(['Male', 'Female', 'Other'])),
    Field('profile', 'text'),
    Field('image', 'upload'))
``:code

W tym przypadku, ``SQLFORM(db.person)`` wygeneruje następujący formularz:

[[image @///image/pl6200.png center 300px]]

Konstruktor ``SQLFORM`` umożliwia różnorakie przystosowywania formularza, takie
jak wyświetlanie tylko podzestawu pól, zmianę etykiet, dodawanie wartości do
opcjonalnej trzeciej kolumny lub tworzenie formularzy UPDATE i DELETE, a nie
standardowych formularzy INSERT. ``SQLFORM`` jest obiektem, który na tle innych
obiektów web2py, potrafi najbardziej oszczędzić czas programisty.

Klasa ``SQLFORM`` została zdefiniowana w "gluon/sqlhtml.py". Można ją łatwo
rozszerzyć nadpisując jej metodę ``xml`` serializującą obiekty, tak aby zmienić
jej wyjście.

``pola``:inxx ``etykiety``:inxx
Sygnatura konstruktora ``SQLFORM`` jest następująca:

``
SQLFORM(table, record = None,
        deletable = False, linkto = None,
        upload = None, fields = None, labels = None,
        col3 = {}, submit_button = 'Submit',
        delete_label = 'Check to delete:',
        showid = True, readonly = False,
        comments = True, keepopts = [],
        ignore_rw = False, record_id = None,
        formstyle = 'table3cols',
        buttons = ['submit'], separator = ': ',
        **attributes)

``:code

- Opcjonalny drugi argument zamienia formularz INSERT na formularz UPDATE dla
  określonego rekordu (patrz nastęþny podrozdział). ``showid``:inxx ``delete_label``:inxx
  ``id_label``:inxx ``submit_button``:inxx
- Jeśli ``deletable`` jest ustawiony na ``True``, formularz UPDATE wyświetla pole
  wyboru "Zaznacz aby skasować". Wartość etykiety tego pola jest ustawiana w argumencie
  ``delete_label``.
- ``submit_button`` wartość przycisku zatwierdzania.
- ``id_label`` ustawia etykietę "id" rekordu.
- "Id" rekordu nie jest pokazywany, jeśli argument ``showid`` jest ustawiony na ``False``.
- ``fields`` jest opcjonalną listą nazw pól, które chce się wyświetlić.
  Jeśli lista zostaje dostarczona, to wyświetlane będą tylko pola z tej listy.
  Na przykład:
``
fields = ['name']
``:code
- ``labels`` jest słownikiem etykiet pól. Kluczami słownika są nazwy pól a wartościami,
  to co ma być wyświetlone jako etykieta pola. Jeśli etykieta nie jest określona,
  web2py wywodzi etykietę z nazwy pola (nazwa pola jest kapitalizowana a znaki
  podkreślenia są zamieniane na spacje). Na przykład:
``
labels = {'name':'Your Full Name:'}
``:code
- ``col3`` jest słownikiem wartości dla trzeciej kolumny. Na przykład:
``
col3 = {'name':A('what is this?',
      _href='http://www.google.com/search?q=define:name')}
``:code
- ``linkto`` i ``upload`` są opcjonalnymi ścieżkami URL do kontrolerów zdefiniowanych
  przez użytkownika, które umożliwiają, aby formularz radził sobie z polami referencyjnymi.
  Jest to omówione w dalszej części rozdziału.
- ``readonly``. Jeśli ustawiony na True, formularz jest wyświetlany jako tylko do odczytu.
- ``comments``. Jeśli ustawiony na False, nie będą wyświetlane komentarze w col3.
- ``ignore_rw``. Zwykle, w formularzu tworzącym i aktualizującym wyświetlane są
  tylko pola oznaczone jako ``writable=True`` a w formularzu tylko do odczytu pola
  oznaczone jako ``readable=True``. Ustawienie ``ignore_rw=True`` spowoduje, że
  ograniczenia te będą ignorowane i wyświetlone zostaną wszystkie pola. Jest to
  stosowane głównie w interfejsie appadmin do wyświetlenia wszystkich pól każdego
  tabeli, przesłaniając to co wskazuje model.
- ``formstyle``:inxx ``formstyle`` określa styl jaki będzie użyty podczas serializowania
  formularza do kodu HTML. Może to być "table3cols" (domyślnie), "table2cols"
  (jeden wiersz dla etykiety i komentarza i jeden wiersz dla pola wejściowego),
  "ul" (wytwarza nieuporządkowana listę pól wejsciowych), "divs" (reprezentuje formularz
  wykorzystujący przyjazne bloki div CSS, dla dowolnego dostosowania), "bootstrap"
  wykorzystujący klasę bootstrap formularza o wartości "form-horizontal". Argument
  ``formstyle`` może również być funkcją generującą wszystko wewnątrz znacznika FORM.
  Można przekazać do konstruktora funkcję z dwoma argumentami, form i fields. Wskazówki
  można znaleźć w pliku kodu źródłowego sqlhtml.py (proszę zobaczyć do funkcji
  o nazwie formstyle_). 
- ``buttons``:inxx ``buttons`` jest listą helperów ``INPUT`` lub ``TAG.button``
  (choć teoretycznie może być dowolna kombinacją helperów), które mają być dodane
  do DIV w którym znajduje się przycisk zatwierdzający. 
  Na przykład, dodanie przycisku powrotnego opartego na URL (dla formularza
  wielostronicowego) i zmiana nazwy przycisku zatwierdzającego:
-----------------  
``
buttons = [TAG.button('Back',_type="button",_onClick = "parent.location='%s' " % URL(...),
             TAG.button('Next',_type="submit")]
``:code
  lub przycisku, który łączy do innej strony:
``
buttons = [..., A("Go to another page",_class='btn',_href=URL("default","anotherpage"))]
``:code
-----------------
- ``separator``:inxx ``separator`` ustawia ciąg znakowy, który oddziela etykiety
  formularza od pól wejściowych.
- Opcjonalnie ``attributes`` są argumentami rozpoczynającymi się od znaku podkreślenia,
  które przekazuje się do znacznika ``FORM`` w celu odpowiedniego renderowania obiektu
  ``SQLFORM``. Oto przykład:
``
_action = '.'
_method = 'POST'
``:code

Istnieje specjalny atrybut ``hidden``. Gdy słownik jest przekazywany jako ``hidden``,
jego elementy są tłumaczone na ukryte pole INPUT (zobacz przykład helpera ``FORM``
w rozdziale 5):

``
form = SQLFORM(...,hidden=...)
``:code
co powoduje, że ukryte pola są przekazywane w zgłoszeniu, nic więcej, nic mniej.
Argumenty ``form.accepts(...)`` nie są przeznaczone do odczytywania odebranych
ukrytych pól i trzeba przenieść je do form.vars. Powodem tego jest bezpieczeństwo.
Ukryte pola mogą być naruszane, więc trzeba jawnie przenieść ukryte pola z żądania
do formularza:

``
form.vars.a = request.vars.a
form = SQLFORM(..., hidden=dict(a='b'))
``:code

#### Metoda ``process``
SQLFORM używa metodę process (podobnie jak forms).

Jeśli w SQLFORM  chce się wykorzystać argument keepvalues, trzeba przekazać go
w metodzie process:

``if form.process(keepvalues=True).accepted:``:code

#### ``SQLFORM`` a ``insert``/``update``/``delete``

Gdy formularz jest akceptowany, ``SQLFORM`` tworzy nowy rekord. Zakładając, że
``form=SQLFORM(db.test)``, to identyfikator ostatnio utworzonegi rekordu będzie
dostępny w ``myform.vars.id``.

``delete record``:inxx
Jeśli przekaże się rekord jako drugi argument konstruktora ``SQLFORM``, formularz
stanie się formularzem UPDATE dla tego rekordu. Oznacza to, że podczas składania
formularza aktualizowany jest istniejący rekord a nowy rekord jest wstawiany.
Jeśli ustawi się ``deletable=True``, formularz UPDATE wyświetla pole wyboru
"zaznacz aby usunąć". jeśli zaznaczysz, rekord zostanie usuniety.

------
Przy składaniu formularza, jeśli zaznaczone jest pole wyboru usuwania, atrybut
``form.deleted`` zostaje ustawiany na ``True``.
------

Zmodyfikujmy kontroler z poprzedniego przykładu, tak aby przekazywał
dodatkowy argumentu całkowitoliczbowy w ścieżce URL, na przykład:
``
/test/default/display_form/2
``:code

i jeśli istnieje rekord z odpowiednim identyfikatorem, to ``SQLFORM`` generuje
dla tego rekordu formularz UPDATE/DELETE:
``
def display_form():
   record = db.person(request.args(0)) or redirect(URL('index'))
   form = SQLFORM(db.person, record)
   if form.process().accepted:
       response.flash = 'form accepted'
   elif form.errors:
       response.flash = 'form has errors'
   return dict(form=form)
``:code

Linia w odnajduje rekord a linia 3 wykonuje formularz UPDATE/DELETE form. Linia
4 realizuje całe przetwarzanie odpowiedniego formularza.

------
Formularz aktualizujący jest bardzo podobny do utworzonego formularza z tym, że
jest on wstępnie wypełniony danymi bieżącego rekordu oraz do podgladu obrazów.
Mamy domyślnie ustawione ``deletable = True`` co oznacza, że formularz aktualizujący
będzie  wyświetlał opcję "delete record".
------

Formularze edycyjne zawierają również ukryte pole INPUT z ``name="id"``, które
jest używane do identyfikacji rekordu. Identyfikator ten jest również przechowywany
po stronie serwera dla dodatkowego bezpieczeństwa i jeśli odwiedzajacy będzie coś
"majstrował" z wartością tego pola, UPDATE nie zostanie wykonane a web2py zgłosi
SyntaxError, "user is tampering with form".

Gdy pole jest oznaczone z ``writable=False``, nie będzie pokazywane
w tworzonym formularzu a w formularzach aktualizujących będzie wyświetlane jako pole
tylko do odczytu. Jeśli pole jest oznaczone jako ``writable=False`` i ``readable=False``,
to nie będzie wyświetlane w ogóle, nawet w formularzach aktualizujących.

Formularze tworzone przez 
``
form = SQLFORM(...,ignore_rw=True)
``:code

ignorują atrybuty ``readable`` i ``writable`` oraz zawsze pokazują wszystkie pola.
Formularze w ``appadmin`` ignoruja domślnie ta zachowanie.

Formularze tworzone przez
``
form = SQLFORM(table,record_id,readonly=True)
``:code

wyświetlają wszystkie pola w trybie tylko do odczytu i nie moga być akceptowane.

Oznakowanie pola przez ``writable=False`` zapobiega włączeniu tego pola w strukturę
formularza i powoduje przetwarzanie formularza z pominięciem wartości ``request.vars.field``.
Jednakże, jeśli przypisze się wartość ``form.vars.field``, to ta wartość ''stanie ''
się częścią polecenia wstawiającego lub aktualizującego podczas przetwarzania formularza. 
Umożliwia to zmianę wartości pól, które z jakichś powodów nie chcemy umieszczać
w formularzu.


#### ``SQLFORM`` w HTML

Czasem chce się użyć ``SQLFORM``, aby wykorzystać jego generator formularzy
i prztwarzanie, ale potrzebny jest wielkszy poziom dostosowania kodu HTML formularza,
który nie można osiągnąć z parametrami obiektu ``SQLFORM``, wieć trzeba zaprojektować
formularz używając HTML.

Edytujmy teraz poprzedni kontroler i dodajmy nową akcję:
``
def display_manual_form():
    form = SQLFORM(db.person)
    if form.process(session=None, formname='test').accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill the form'
    # Note: no form instance is passed to the view
    return dict()
``:code

oraz wstawmy formularz w związany widok "default/display_manual_form.html":
``
{{extend 'layout.html'}}
<form action="#" enctype="multipart/form-data" method="post">
<ul>
  <li>Your name is <input name="name" /></li>
</ul>
  <input type="submit" />
  <input type="hidden" name="_formname" value="test" />
</form>
``:code

Proszę zauważyć, że ta akcja nie zwraca formularza, ponieważ nie trzeba przekazywać
go do widoku. Widok zawiera formularz utworzony ręcznie w HTML. Formularz zawiera
ukryte pole "_formname", którego wartość musi być taka sama jak ``formname`` określonego
jako argument ``accepts`` w akcji. web2py uzywa tej nazwy formularza w przypadku,
gdy istnieje wiele formularzy na tej samej stronie, do określenia, który z nich
został zgłoszony. Jeśli strona zawiera tylko pojedynczy formularz, można ustawić
``formname=None`` i pominąc w widoku ukryte pole.

Metoda ``form.accepts`` będzie wyszukiwać wewnątrz ``response.vars`` danych
odpowiadających polom w tabeli ``db.person``.  Pola te są deklarowane w formacie
HTML
``<input name="field_name_goes_here" />
``:code

Proszę zauważyć, że w podanym przykładzie, zmienne formularza bedą przekazywane
jako argumenty w adresie URL. Jeśli nie jest to pożądane, musi się określić
protokół ``POST``. Proszę ponadto mieć na uwadze, że jeśli określi się pola ''upload'',
formularz będzie musiał być ustawiony na zezwolenie tych pól. Tutaj są pokazane
obie opcje:
``
<form enctype="multipart/form-data" method="post">
``:code

#### ``SQLFORM`` a pola ''upload''

Pola typu ''upload'' są specjalne. Są renderowane jako pola INPUT ``type="file"``.
Jeśli nie określi sie tego inaczej, przesyłany na serwer plik jest strumieniowany
do używanej pamięci podręcznej i przechowywany w folderze "uploads" aplikacji
z użyciem nowej bezpiecznej nazwy, przypisywanej automatycznie. Nazwa tego pliku
jest następnie zapisywana do pól typu ''upload''.

Dla przykładu rozważmy następujący model:
``
db.define_table('person',
    Field('name', requires=IS_NOT_EMPTY()),
    Field('image', 'upload'))
``:code

Użyjemy tej samej akcji kontrolera, "display_form", pokazanej powyżej.

Po wstawieniu nowego rekrdu, formularz pozwoli na przegladanie pliku.
Wybierz, na przykład, obraz jpg. Plik ten zostanie pobrany i zapisany jako:
``
applications/test/uploads/person.image.XXXXX.jpg
``:code

"XXXXXX" jest losowym identyfikatorem przypisywanym plikowi przez web2py.

``content-disposition``:inxx

-------
Proszę zauważyć, że domyślnie, oryginalna nazwa przesłanego pliku, to ``b16encoded``
i jest ona użyta do budowania nowej nazwy pliku. Nazwa ta jest pobierana przez
domyślną akcję "download" i używana jest do ustawienia zawartości nagłówka
``disposition`` na oryginalną nazwę pliku.
-------

Tylko rozszerzenie pliku jest zachowywane. Jest to wymóg bezpieczeństwa, ponieważ
nazwa pliku może zawierać znaki specjalne, które mogą posłużyć odwiedzającym do
przeprowdzenie ataków z przeglądaniem katalogów lub do wykonania innych szkodliwych
operacje.

Nowa nazwa pliku zostaje zapisana w ``form.vars.image``.

Podczas edytowania rekordu przy użyciu formulara UPDATE, pożądane jest udostępnienie
odnośnika do przesłanego pliku i web2py oferuje na to sposób.

Jeśli przekaże się adres URL do konstruktora ``SQLFORM`` poprzez argument ``upload``,
web2py użyje akcji określonej w tym adresie URL do pobrania pliku. Przyjrzyjmi się
następujacej akcji:
``
def display_form():
   record = db.person(request.args(0))
   form = SQLFORM(db.person, record, deletable=True,
                  upload=URL('download'))
   if form.process().accepted:
       response.flash = 'form accepted'
   elif form.errors:
       response.flash = 'form has errors'
   return dict(form=form)

def download():
    return response.download(request, db)
``:code

Wstaw teraz nowy rekord do adresu URL:
``
http://127.0.0.1:8000/test/default/display_form
``:code

Prześlij zdjęcie, zatwierdź formularz i następnie edytuj nowo utworzony rekord,
odwiedzając:
``
http://127.0.0.1:8000/test/default/display_form/3
``:code

(zakładamy tu, że ostatani rekord ma id=3). Formularz wyświetli podgląd obrazu,
tak jak pokazano niżej:

[[image @///image/pl6300.png center 300px]]

Formularz ten, po serializacji, wygeneruje następujący kod HTML:
``
<td><label id="person_image__label" for="person_image">Image: </label></td>
<td><div><input type="file" id="person_image" class="upload" name="image"
/>[<a href="/test/default/download/person.image.0246683463831.jpg">file</a>|
<input type="checkbox" name="image__delete" />delete]</div></td><td></td></tr>
<tr id="delete_record__row"><td><label id="delete_record__label" for="delete_record"
>Check to delete:</label></td><td><input type="checkbox" id="delete_record"
class="delete" name="delete_this_record" /></td>
``:code

Zawiera on odnośnik umożliwiający pobieranie załadowanego pliku z serwera oraz
pole wyboru do usuwania pliku z rekordu bazy danych (i tym samym przechowywaniu
NULL w polu "image").

Dlaczego ten mechanizm jest udostępniany? Dlaczego trzeba napisać samemu funkcję
pobierania? Bo można wymusić jakiś machanizm autoryzacji w funkcji pobierającej.
Rozdział 9 zawiera przykład.

Normalnie przesyłane pliki są przechowywane a katalogu "app/uploads", ale można
określić inną lokalizację:
``
Field('image', 'upload', uploadfolder='...')
``
W większości systemów operacyjnych, dostęp do systemu plików może być wolny, gdy
w fplderze znajduje się wiele plików. Gdy planuje się przesyłanie więcej niż
1000 plików, można poprosić web2py o przesyłanie plików do podfolderów:
``
Field('image', 'upload', uploadseparate=True)
``


#### Przechowywanie oryginalnych nazw plików

Web2py automatycznie zapsisuje oryginalna nazwę pliku wewnątrz nowej nazwy UUID
pliku i pobiera ją, gdy plik jest pobierany z serwera. Po pobraniu pliku z serwera,
oryginalna nazwa pliku jest zapisywana w nagłówku ''content-disposition''
odpowiedzi HTTP. Dzieje się to w sposób przejrzysty, bez konieczności programowania.

Czasami zachodzi konieczność zapisania oryginalnej nazwy pliku w bazie danych.
W takim przypadku trzeba zmodyfikować model i dodać pole do przechowywania tej nazwy:
``
db.define_table('person',
    Field('name', requires=IS_NOT_EMPTY()),
    Field('image_filename'),
    Field('image', 'upload'))
``:code

Potem trzeba zmodyfikować kontroler, tak aby to obsługiwał:

``
def display_form():
    record = db.person(request.args(0)) or redirect(URL('index'))
    url = URL('download')
    form = SQLFORM(db.person, record, deletable=True,
                   upload=url, fields=['name', 'image'])
    if request.vars.image!=None:
        form.vars.image_filename = request.vars.image.filename
    if form.process().accepted:
        response.flash = 'form accepted'
    elif form.errors:
        response.flash = 'form has errors'
    return dict(form=form)
``:code

Proszę zauważyć, że ``SQLFORM`` nie wyświetla pola "image_filename".
Akcja "display_form" przenosi nazwę pliku ``request.vars.image`` do
``form.vars.image_filename``, aby można ją było przetworzyć przez ``accepts``
i zapisać w bazie danych. Zanim funkcja pobierajaca prześle plik, sprawdzi w
bazie danych oryginalną nazwę pliku i użyje ją w nagłówku ''content-disposition''.

#### Atrybut ``autodelete``
``autodelete``:inxx

``SQLFORM``, przy usuwaniu rekordu, nie usuwa fizycznie przesłanych na serwer
plików do których odnosi się ten rekord. Jest to spowodowane tym, że web2py nie
wie czy ten sam plik nie jest używany (zlinkowany) z innym tabelami lub używany
w innych celach. Jeśli wie się, że dany plik mozna bezpiecznie usunąć podczas
usuwania związanego z nim rekordu, można wykonać co następuje:
``
db.define_table('image',
    Field('name', requires=IS_NOT_EMPTY()),
    Field('source','upload',autodelete=True))
``:code

Atrybut ``autodelete`` jest ustawiany domyślnie na ``False``. Gdy ustawi się go
na ``True``, plik zostanie usunięty przy usuwaniu rekordu.

#### Odnośniki do rekordów

Rozważmy teraz przypadek dwóch tabel połączonych przez odnoszące się pole.
Na przykład:
``
db.define_table('person',
    Field('name', requires=IS_NOT_EMPTY()))
db.define_table('dog',
    Field('owner', 'reference person'),
    Field('name', requires=IS_NOT_EMPTY()))
db.dog.owner.requires = IS_IN_DB(db,db.person.id,'%(name)s')
``:code

Osoba ma psy a każdy pies należy do jakiegoś właściciela, który jest osobą.
Właściciel psa jest zobowiazany do odniesienia prawidłowego pola ``db.person.id``
przez nazwę ``'%(name)s'``.

Wykorzystajmy interfejs **appadmin** naszej aplikacji do dodania kilku osób i ich
psów.

Podczas edytowania istniejącej osoby, formularz UPDATE **appadmin** pokazuje
odnośnik do strony z wykazem psów należących do tej osoby. Zachowanie takie może
być replikowane przy pomocy argumentu ``linkto``.
Argument ``linkto`` musi wskazywać na lokalizator URL nowej akcji, która otrzymuje
ciąg zapytania z ``SQLFORM`` oraz listy odpowiednich rekordów.
Oto przykład:
``
def display_form():
   record = db.person(request.args(0)) or redirect(URL('index'))
   url = URL('download')
   link = URL('list_records', args='db')
   form = SQLFORM(db.person, record, deletable=True,
                  upload=url, linkto=link)
   if form.process().accepted:
       response.flash = 'form accepted'
   elif form.errors:
       response.flash = 'form has errors'
   return dict(form=form)
``:code

a to strona:

[[image @///image/pl6400.png center 300px]]

Jest tu odnośnik "dog.owner". Nazwa tego odnośnika może być zmieniona poprzez
argument ``labels``, na przykład:
``
labels = {'dog.owner':"This person's dogs"}
``:code

Kliknięcie na ten odnośnik spowoduje przekierowanie na:
``
/test/default/list_records/dog?query=db.dog.owner%3D%3D5
``:code

"list_records" jest określoną akcją, gdzie ``request.args(0)`` ustawia nazwę
przywoływanej tabeli a ``request.vars.query`` ustawia ciąg zapytania SQL.
Ciag zapytania zawiera w lokalizatorze URL odpowiednio zakodowaną wartość
"dog.owner=5" (web2py rozkodowuje to automatycznie podczas parsowania URL).

Można łatwo zaimplementować bardzo ogólną akcję "list_records" w następujacy
sposób:
``
def list_records():
    import re
    REGEX = re.compile('^(\w+)\.(\w+)\.(\w+)\=\=(\d+)$')
    match = REGEX.match(request.vars.query)
    if not match:
        redirect(URL('error'))
    table, field, id = match.group(2), match.group(3), match.group(4)
    records = db(db[table][field]==id).select()
    return dict(records=records)
``:code

ze związanym widokiem "default/list_records.html":
``
{{extend 'layout.html'}}
{{=records}}
``:code

Gdy zwracany jest przez *select* zestaw rekordów i serializowany w widoku,
to najpierw jest on konwertowany do obiektu SQLTABLE (nie tego samego co Table)
i następnie jest serializowany do tabeli HTML, gdzie każde pole odpowiada kolumnie
tabeli.

#### Wstępne wypełnianie formularzy
Można zawsze wstępnie wypełnić formularz posługujac sie składnią:
``
form.vars.name = 'fieldvalue'
``:code

Wyrażenia podobne do powyższego muszą być wstawiane po deklaracji formularza ale
przed zakceptowaniem tego formularza, niezaleznie od tego, czy pole ("name"
w naszym przykładzie) jest jawnie wizualizowane w formularzu, czy nie.

#### Dodawanie dodatkowych elementów formularza do ``SQLFORM``
Czasem po utworzeniu formularza zachodzi potrzeba dodania do formularza dodatkowego
elementu. Na przykład, mozna chcieć dodać pole wyboru z potwierdzeniem, ze użytkownik
akceptuje regulamin strony internetowej:
``
form = SQLFORM(db.yourtable)
my_extra_element = TR(LABEL('I agree to the terms and conditions'), \
                      INPUT(_name='agree',value=True,_type='checkbox'))
form[0].insert(-1,my_extra_element)
``:code

Zmienna ``my_extra_element`` powinna być dostosowana do *formstyle*. W naszym
przykładzie domyślnie przyjęto ``formstyle='table3cols'``.

Po złożeniu formularza ``form.vars.agree`` bedzie zawierał stan pola wyboru, co
może być wykorzystane, na przykład, w funkcji ``onvalidation``.

#### ``SQLFORM`` bez IO bazy danych

Czasem zachodzi potrzeba wygenerowania formularza z tabeli bazy danych przy użyciu
``SQLFORM`` i odpowiedniego sprawdzenia zgłoszonego formularza, ale bez jakichkolwiek
automatycznych działań INSERT/UPDATE/DELETE na bazie danych. Jest to przypadek
występujacy, na przykład, gdy trzeba przetworzyć pola z uwzglednieniem wartości
innych pól wejściowych. Przypadek ten występuje również, gdy potrzeba wykonać
dodatkową walidację wprowadzonych danych, czego nie można wykonać stosując standardowe
walidatory.

Można to łatwo zrobić poprzez rozbicie:
``
form = SQLFORM(db.person)
if form.process().accepted:
    response.flash = 'record inserted'
``:code

na:
``
form = SQLFORM(db.person)
if form.validate():
    ### transakcja z jawnym przesłaniem pliku
    form.vars.id = db.person.insert(**dict(form.vars))
    response.flash = 'record inserted'
``:code

To samo może być zrealizowane dla formularzy UPDATE/DELETE przez rozbicie:
``
form = SQLFORM(db.person,record)
if form.process().accepted:
    response.flash = 'record updated'
``:code

na:
``
form = SQLFORM(db.person,record)
if form.validate():
    if form.deleted:
        db(db.person.id==record.id).delete()
    else:
        record.update_record(**dict(form.vars))
    response.flash = 'record updated'
``:code

W przypadku tabeli zawierającej pole typu "upload" ("fieldname"), zarówno
``process(dbio=False)`` jak i ``validate()`` domyślnie dotyczą przechowywania
przesyłanego pliku, jak w przypadku ``process(dbio=True)``.

Nazwę przypisaną przez web2py do przesyłanego pliku można znaleźć w:
``
form.vars.fieldname
``:code

### Inne typy formularzy

#### ``SQLFORM.factory``

There are cases when you want to generate forms ''as if'' you had a database table but you do not want the database table. You simply want to take advantage of the ``SQLFORM`` capability to generate a nice looking CSS-friendly form and perhaps perform file upload and renaming.

This can be done via a ``form_factory``. Here is an example where you generate the form, perform validation, upload a file and store everything in the ``session`` :
``
def form_from_factory():
    form = SQLFORM.factory(
        Field('your_name', requires=IS_NOT_EMPTY()),
        Field('your_image', 'upload'))
    if form.process().accepted:
        response.flash = 'form accepted'
        session.your_name = form.vars.your_name
        session.your_image = form.vars.your_image
    elif form.errors:
        response.flash = 'form has errors'
    return dict(form=form)
``:code

The Field object in the SQLFORM.factory() constructor is fully documented in the [[DAL chapter ../06#field_constructor]].
A run-time construction technique for SQLFORM.factory() is
``
fields = []
fields.append(Field(...))
form=SQLFORM.factory(*fields)
``:code

Here is the "default/form_from_factory.html" view:
``
{{extend 'layout.html'}}
{{=form}}
``:code

You need to use an underscore instead of a space for field labels, or explicitly pass a dictionary of ``labels`` to ``form_factory``, as you would for a ``SQLFORM``. By default ``SQLFORM.factory`` generates the form using html "id" attributes generated as if the form was generated from a table called "no_table". To change this dummy table name, use the ``table_name`` attribute for the factory:
``
form = SQLFORM.factory(...,table_name='other_dummy_name')
``:code

Changing the ``table_name`` is necessary if you need to place two factory generated forms in the same table and want to avoid CSS conflicts.

##### Uploading files with SQLFORM.factory


#### One form for multiple tables

It often happens that you have two tables (for example 'client' and
'address' which are linked together by a reference and you want to
create a single form that allows to insert info about one client and
its default address. Here is how:

model:
``
db.define_table('client',
     Field('name'))
db.define_table('address',
    Field('client','reference client',
          writable=False,readable=False),
    Field('street'),Field('city'))
``:code

controller:
``
def register():
    form=SQLFORM.factory(db.client,db.address)
    if form.process().accepted:
        id = db.client.insert(**db.client._filter_fields(form.vars))
        form.vars.client=id
        id = db.address.insert(**db.address._filter_fields(form.vars))
        response.flash='Thanks for filling the form'
    return dict(form=form)
``:code

Notice the SQLFORM.factory (it makes ONE form using public fields from
both tables and inherits their validators too).
On form accepts this does two inserts, some data in one table and some
data in the other.

-------
This only works when the tables don't have field names in common.
-------


#### Confirmation Forms

``confirm``:inxx

Often you need a form with a confirmation choice. The form should be accepted if the choice is accepted and none otherwise. The form may have additional options that link other web pages. web2py provides a simple way to do this:

``
form = FORM.confirm('Are you sure?')
if form.accepted: do_what_needs_to_be_done()
``:code

Notice that the confirm form does not need and must not call ``.accepts`` or ``.process`` because this is done internally. You can add buttons with links to the confirmation form in the form of a dictionary of ``{'value':'link'}``:

``
form = FORM.confirm('Are you sure?',{'Back':URL('other_page')})
if form.accepted: do_what_needs_to_be_done()
``:code

#### Form to edit a dictionary

Imagine a system that stores configurations options in a dictionary,

``
config = dict(color='black', language='English')
``:code

and you need a form to allow the visitor to modify this dictionary.
This can be done with:

``
form = SQLFORM.dictform(config)
if form.process().accepted: config.update(form.vars)
``:code

The form will display one INPUT field for each item in the dictionary. It will use dictionary keys as INPUT names and labels and current values to infer types (string, int, double, date, datetime, boolean).

This works great but leave to you the logic of making the config dictionary persistent. For example you may want to store the ``config`` in a session.

``
session.config or dict(color='black', language='English')
form = SQLFORM.dictform(session.config)
if form.process().accepted:
    session.config.update(form.vars)
``:code


### CRUD
``CRUD``:inxx ``crud.create``:inxx ``crud.update``:inxx ``crud.select``:inxx ``crud.search``:inxx ``crud.tables``:inxx ``crud.delete``:inxx

One of the recent additions to web2py is the Create/Read/Update/Delete (CRUD) API on top of SQLFORM.
CRUD creates an SQLFORM, but it simplifies the coding because it incorporates the creation of the form, the processing of the form, the notification, and the redirection, all in one single function.

The first thing to notice is that CRUD differs from the other web2py APIs we have used so far because it is not already exposed. It must be imported. It also must be linked to a specific database. For example:
``
from gluon.tools import Crud
crud = Crud(db)
``:code

The ``crud`` object defined above provides the following API:

``crud.tables``:inxx ``crud.create``:inxx ``crud.read``:inxx ``crud.update``:inxx ``crud.delete``:inxx ``crud.select``:inxx .
- ``crud.tables()`` returns a list of tables defined in the database.
- ``crud.create(db.tablename)`` returns a create form for table tablename.
- ``crud.read(db.tablename, id)`` returns a readonly form for tablename and record id.
- ``crud.update(db.tablename, id)`` returns an update form for tablename and record id.
- ``crud.delete(db.tablename, id)`` deletes the record.
- ``crud.select(db.tablename, query)`` returns a list of records selected from the table.
- ``crud.search(db.tablename)`` returns a tuple (form, records) where form is a search form and records is a list of records based on the submitted search form.
- ``crud()`` returns one of the above based on the ``request.args()``.

For example, the following action:
``
def data(): return dict(form=crud())
``:code

would expose the following URLs:
``
http://.../[app]/[controller]/data/tables
http://.../[app]/[controller]/data/create/[tablename]
http://.../[app]/[controller]/data/read/[tablename]/[id]
http://.../[app]/[controller]/data/update/[tablename]/[id]
http://.../[app]/[controller]/data/delete/[tablename]/[id]
http://.../[app]/[controller]/data/select/[tablename]
http://.../[app]/[controller]/data/search/[tablename]
``:code

However, the following action:

``
def create_tablename():
    return dict(form=crud.create(db.tablename))
``:code

would only expose the create method

``
http://.../[app]/[controller]/create_tablename
``:code

While the following action:

``
def update_tablename():
    return dict(form=crud.update(db.tablename, request.args(0)))
``:code

would only expose the update method

``
http://.../[app]/[controller]/update_tablename/[id]
``:code

and so on.

The behavior of CRUD can be customized in two ways: by setting some attributes of the ``crud`` object or by passing extra parameters to each of its methods.

#### Settings

Here is a complete list of current CRUD attributes, their default values, and meaning:

To enforce authentication on all crud forms:

``
crud.settings.auth = auth
``:code
The use is explained in chapter 9.

To specify the controller that defines the ``data`` function which returns the ``crud`` object

``
crud.settings.controller = 'default'
``:code

To specify the URL to redirect to after a successful "create" record:

``
crud.settings.create_next = URL('index')
``:code

To specify the URL to redirect to after a successful "update" record:

``
crud.settings.update_next = URL('index')
``:code

To specify the URL to redirect to after a successful "delete" record:

``
crud.settings.delete_next = URL('index')
``:code

To specify the URL to be used for linking uploaded files:

``
crud.settings.download_url = URL('download')
``:code

To specify extra functions to be executed after standard validation procedures for ``crud.create`` forms:

``
crud.settings.create_onvalidation = StorageList()
``:code

``StorageList`` is the same as a ``Storage`` object, they are both defined in the file "gluon/storage.py", but it defaults to ``[]`` as opposed to ``None``. It allows the following syntax:

``
crud.settings.create_onvalidation.mytablename.append(lambda form:....)
``:code

To specify extra functions to be executed after        standard validation procedures for ``crud.update`` forms:

``
crud.settings.update_onvalidation = StorageList()
``:code

To specify extra functions to be executed after completion of ``crud.create`` forms:

``
crud.settings.create_onaccept = StorageList()
``:code

To specify extra functions to be executed after completion of ``crud.update`` forms:

``
crud.settings.update_onaccept = StorageList()
``:code

To specify extra functions to be executed after completion of ``crud.update`` if record is deleted:

``
crud.settings.update_ondelete = StorageList()
``:code

To specify extra functions to be executed after completion of ``crud.delete``:

``
crud.settings.delete_onaccept = StorageList()
``:code

To determine whether the "update" forms should have a "delete" button:

``
crud.settings.update_deletable = True
``:code

To determine whether the "update" forms should show the id of the edited record:

``
crud.settings.showid = False
``:code

To determine whether forms should keep the previously inserted values or reset to default after successful submission:

``
crud.settings.keepvalues = False
``:code

Crud always detects whether a record being edited has been modified by a third party in the time between the time when the form is displayed and the time when it is submitted. This behavior is equivalent to
``
form.process(detect_record_change=True)``

and it is set in:

``
crud.settings.detect_record_change = True
``:code
and it can be changed/disabled by setting the variable to ``False``.

You can change the form style by

``
crud.settings.formstyle = 'table3cols' or 'table2cols' or 'divs' or 'ul'
``:code

You can set the separator in all crud forms:

``
crud.settings.label_separator = ':'
``:code

#### captcha

You can add captcha to forms, using the same convention explained for auth, with:

``
crud.settings.create_captcha = None
crud.settings.update_captcha = None
crud.settings.captcha = None
``:code


#### Messages

Here is a list of customizable messages:
``
crud.messages.submit_button = 'Submit'
``:code

sets the text of the "submit" button for both create and update forms.
``
crud.messages.delete_label = 'Check to delete:'
``:code

sets the label of the "delete" button in "update" forms.
``
crud.messages.record_created = 'Record Created'
``:code

sets the flash message on successful record creation.
``
crud.messages.record_updated = 'Record Updated'
``:code

sets the flash message on successful record update.
``
crud.messages.record_deleted = 'Record Deleted'
``:code

sets the flash message on successful record deletion.
``
crud.messages.update_log = 'Record %(id)s updated'
``:code

sets the log message on successful record update.
``
crud.messages.create_log = 'Record %(id)s created'
``:code

sets the log message on successful record creation.
``
crud.messages.read_log = 'Record %(id)s read'
``:code

sets the log message on successful record read access.
``
crud.messages.delete_log = 'Record %(id)s deleted'
``:code

sets the log message on successful record deletion.

------
Notice that ``crud.messages`` belongs to the class ``gluon.storage.Message`` which is similar to ``gluon.storage.Storage`` but it automatically translates its values, without need for the ``T`` operator.
------

Log messages are used if and only if CRUD is connected to Auth as discussed in Chapter 9. The events are logged in the Auth table "auth_events".

#### Methods

The behavior of CRUD methods can also be customized on a per call basis. Here are their signatures:
``
crud.tables()
crud.create(table, next, onvalidation, onaccept, log, message)
crud.read(table, record)
crud.update(table, record, next, onvalidation, onaccept, ondelete, log, message, deletable)
crud.delete(table, record_id, next, message)
crud.select(table, query, fields, orderby, limitby, headers, **attr)
crud.search(table, query, queries, query_labels, fields, field_labels, zero, showall, chkall)
``:code
- ``table`` is a DAL table or a tablename the method should act on.
- ``record`` and ``record_id`` are the id of the record the method should act on.
- ``next`` is the URL to redirect to after success. If the URL contains the substring "[id]" this will be replaced by the id of the record currently created/updated.
- ``onvalidation`` has the same function as SQLFORM(..., onvalidation)
- ``onaccept`` is a function to be called after the form submission is accepted and acted upon, but before redirection.
- ``log`` is the log message. Log messages in CRUD see variables in the ``form.vars`` dictionary such as "%(id)s".
- ``message`` is the flash message upon form acceptance.
- ``ondelete`` is called in place of ``onaccept`` when a record is deleted via an "update" form.
- ``deletable`` determines whether the "update" form should have a delete option.
- ``query`` is the query to be used to select records.
- ``fields`` is a list of fields to be selected.
- ``orderby`` determines the order in which records should be selected (see [[DAL chapter ../06#orderby]]).
- ``limitby`` determines the range of selected records that should be displayed (see Chapter 6).
- ``headers`` is a dictionary with the table header names.
- ``queries`` a list like ``['equals', 'not equal', 'contains']`` containing the allowed methods in the search form.
- ``query_labels`` a dictionary like ``query_labels=dict(equals='Equals')`` giving names to search methods.
- ``fields`` a list of fields to be listed in the search widget.
- ``field_labels`` a dictionary mapping field names into labels.
- ``zero`` defaults to "choose one" is used as default option for the drop-down in the search widget.
- ``showall`` set it to True if you want rows returned as per the query in the first call (added after 1.98.2).
- ``chkall`` set it to True to turn on all the checkboxes in the search form (added after 1.98.2).

Here is an example of usage in a single controller function:
``
## assuming db.define_table('person', Field('name'))
def people():
    form = crud.create(db.person, next=URL('index'),
           message=T("record created"))
    persons = crud.select(db.person, fields=['name'],
           headers={'person.name': 'Name'})
    return dict(form=form, persons=persons)
``:code

Here is another very generic controller function that lets you search, create and edit any records from any table where the tablename is passed request.args(0):
``
def manage():
    table=db[request.args(0)]
    form = crud.update(table,request.args(1))
    table.id.represent = lambda id, row: \
       A('edit:',id,_href=URL(args=(request.args(0),id)))
    search, rows = crud.search(table)
    return dict(form=form,search=search,rows=rows)
``:code

Notice the line ``table.id.represent=...`` that tells web2py to change the representation of the id field and display a link instead to the page itself and passes the id as request.args(1) which turns the create page into an update page.

#### Record versioning

Both SQLFORM and CRUD provides a utility to version database records:

If you have a table (db.mytable) that needs full revision history you can just do:
``
form = SQLFORM(db.mytable, myrecord).process(onsuccess=auth.archive)
``:code

``
form = crud.update(db.mytable, myrecord, onaccept=auth.archive)
``:code

``auth.archive`` defines a new table called **db.mytable_archive** (the name is derived from the name of the table to which it refers) and on updating, it stores a copy of the record (as it was before the update) in the created archive table, including a reference to the current record.

Because the record is actually updated (only its previous state is archived), references are never broken.

This is all done under the hood.  Should you wish to access the archive table you should define it in a model:
``
db.define_table('mytable_archive',
   Field('current_record', 'reference mytable'),
   db.mytable)
``:code

Notice the table extends ``db.mytable`` (including all its fields), and adds  a reference to the ``current_record``.

``auth.archive`` does not timestamp the stored record unless your original table has timestamp fields, for example:

``
db.define_table('mytable',
    Field('created_on', 'datetime',
          default=request.now, update=request.now, writable=False),
    Field('created_by', 'reference auth_user',
          default=auth.user_id, update=auth.user_id, writable=False),
``:code

There is nothing special about these fields and you may give them any name you like. They are filled before the record is archived and are archived with each copy of the record.  The archive table name and/or reference field name can be changed like this:

``
db.define_table('myhistory',
    Field('parent_record', 'reference mytable'),
    db.mytable)
## ...
form = SQLFORM(db.mytable,myrecord)
form.process(onsuccess = lambda form:auth.archive(form,
             archive_table=db.myhistory,
             current_record='parent_record'))
``:code

### Custom forms

If a form is created with SQLFORM, SQLFORM.factory or CRUD, there are multiple ways it can be embedded in a view allowing multiple degrees of customization. Consider for example the following model:
``
db.define_table('image',
    Field('name', requires=IS_NOT_EMPTY()),
    Field('source', 'upload'))
``:code

and upload action
``
def upload_image():
    return dict(form=SQLFORM(db.image).process())
``:code

The simplest way to embed the form in the view for ``upload_image`` is
``
{{=form}}
``:code

This results in a standard table layout. If you wish to use a different layout, you can break the form into components
``
{{=form.custom.begin}}
Name: <div>{{=form.custom.widget.name}}</div>
File: <div>{{=form.custom.widget.source}}</div>
{{=form.custom.submit}}
{{=form.custom.end}}
``:code

where ``form.custom.widget[fieldname]`` gets serialized into the proper widget for the field. If the form is submitted and it contains errors, they are appended below the widgets, as usual.

The above sample form is show in the image below.

[[image @///image/en6500.png center 300px]]

A similar result could have been obtained without using a custom form:

``
SQLFORM(...,formstyle='table2cols')
``:code

or in case of CRUD forms with the following parameter:

``
crud.settings.formstyle='table2cols'
``:code

Other possible ``formstyle``s are "table3cols" (the default), "divs" and "ul".

If you do not wish to use the widgets serialized by web2py, you can replace them with HTML. There are some variables that will be useful for this:
- ``form.custom.label[fieldname]`` contains the label for the field.
- ``form.custom.comment[fieldname]`` contains the comment for the field.
- ``form.custom.dspval[fieldname]`` form-type and field-type dependent display representation of the field.
- ``form.custom.inpval[fieldname]`` form-type and field-type dependent values to be used in field code.

If you form has ``deletable=True`` you should also insert

``
{{=form.custom.delete}}
``:code

to display the delete checkbox.

It is important to follow the conventions described below.

#### CSS conventions

Tags in forms generated by SQLFORM, SQLFORM.factory and CRUD follow a strict CSS naming convention that can be used to further customize the forms.

Given a table "mytable", and a field "myfield" of type "string", it is rendered by default by a
``
SQLFORM.widgets.string.widget
``:code

that looks like this:
``
<input type="text" name="myfield" id="mytable_myfield"
       class="string" />
``:code

Notice that:
- the class of the INPUT tag is the same as the type of the field. This is very important for the jQuery code in "web2py_ajax.html" to work. It makes sure that you can only have numbers in "integer" and "double" fields, and that "time", "date" and "datetime" fields display the popup calendar/datepicker.
- the id is the name of the class plus the name of the field, joined by one underscore. This allows you to uniquely refer to the field via, for example, ``jQuery('#mytable_myfield')`` and manipulate the stylesheet of the field or bind actions associated to the field events (focus, blur, keyup, etc.).
- the name is, as you would expect, the field name.

#### Hide errors
``hideerror``:inxx

Occasionally, you may want to disable the automatic error placement and display form error messages in some place other than the default. That can be done easily.

- In the case of FORM or SQLFORM, pass ``hideerror=True`` to the ``accepts`` method.
- In the case of CRUD, set ``crud.settings.hideerror=True``

You may also want to modify the views to display the error (since they are no longer displayed automatically).

Here is an example where the errors are displayed above the form and not in the form.
``
{{if form.errors:}}
  Your submitted form contains the following errors:
  <ul>
  {{for fieldname in form.errors:}}
    <li>{{=fieldname}} error: {{=form.errors[fieldname]}}</li>
  {{pass}}
  </ul>
  {{form.errors.clear()}}
{{pass}}
{{=form}}
``:code

The errors will displayed as in the image shown below.

[[image @///image/en6600.png center 300px]]

This mechanism also works for custom forms.


### Validators
``validators``:inxx

Validators are classes used to validate input fields (including forms generated from database tables).
With the advanced forms derived from SQLFORM, validators create widgets such as drop-down menus and lookups from other tables.

Here is an example of using a validator with a ``FORM``:
``
INPUT(_name='a', requires=IS_INT_IN_RANGE(0, 10))
``:code

Here is an example of how to require a validator for a table field:
``
db.define_table('person', Field('name'))
db.person.name.requires = IS_NOT_EMPTY()
``:code

Validators are always assigned using the ``requires`` attribute of a field. A field can have a single validator or multiple validators. Multiple validators are made part of a list:
``
db.person.name.requires = [IS_NOT_EMPTY(),
                           IS_NOT_IN_DB(db, 'person.name')]
``:code

Normally validators are called automatically by the function ``accepts`` and ``process`` of a ``FORM`` or other HTML helper object that contains a form. They are called in the order in which they are listed.

One can also call validators explicitly for a field:

``
db.person.name.validate(value)
``

which returns a tuple ``(value,error)`` and ``error`` is ``None`` if no the value validates.

Built-in validators have constructors that take an optional argument:

``
IS_NOT_EMPTY(error_message='cannot be empty')
``:code

``error_message`` allows you to override the default error message for any validator.

Here is an example of a validator on a database table:
``
db.person.name.requires = IS_NOT_EMPTY(error_message='fill this!')
``:code

where we have used the translation operator ``T`` to allow for internationalization. Notice that default error messages are not translated.

Mind that the only validators that can be used with ``list:`` type fields are:

- ``IS_IN_DB(...,multiple=True)``
- ``IS_IN_SET(...,multiple=True)``
- ``IS_NOT_EMPTY()``
- ``IS_LIST_OF(...)``

The latter can be used to apply any validator to the individual items in the list. ``multiple=(1,1000)`` requires a selection of between 1 and 1000 items. This enforces selection of at least one choice. 

#### Text format validators

##### ``IS_ALPHANUMERIC``
``IS_ALPHANUMERIC``:inxx

This validator checks that a field value contains only characters in the ranges a-z, A-Z, or 0-9.
``
requires = IS_ALPHANUMERIC(error_message='must be alphanumeric!')
``:code

##### ``IS_LOWER``
``IS_LOWER``:inxx

This validator never returns an error. It just converts the value to lower case.
``
requires = IS_LOWER()
``:code

##### ``IS_UPPER``
``IS_UPPER``:inxx

This validator never returns an error. It converts the value to upper case.
``
requires = IS_UPPER()
``:code


##### ``IS_EMAIL``
``IS_EMAIL``:inxx

It checks that the field value looks like an email address. It does not try to send email to confirm.
``
requires = IS_EMAIL(error_message='invalid email!')
``:code

##### ``IS_MATCH``
``IS_MATCH``:inxx

This validator matches the value against a regular expression and returns an error if it does not match.
Here is an example of usage to validate a US zip code:
``
requires = IS_MATCH('^\d{5}(-\d{4})?$',
         error_message='not a zip code')
``:code

Here is an example of usage to validate an IPv4 address (note: the IS_IPV4 validator is more appropriate for this purpose):
``
requires = IS_MATCH('^\d{1,3}(\.\d{1,3}){3}$',
         error_message='not an IP address')
``:code

Here is an example of usage to validate a US phone number:
``
requires = IS_MATCH('^1?((-)\d{3}-?|\(\d{3}\))\d{3}-?\d{4}$',
         error_message='not a phone number')
``:code

For more information on Python regular expressions, refer to the official Python documentation.

``IS_MATCH`` takes an optional argument ``strict`` which defaults to ``False``. When set to ``True`` it only matches the beginning of the string:

``
>>> IS_MATCH('ab', strict=False)('abc')
('abc', None)
>>> IS_MATCH('ab', strict=True)('abc')
('abc', 'Invalid expression')

``

``IS_MATCH`` takes an other optional argument ``search`` which defaults to ``False``. When set to ``True``, it uses regex method ``search`` instead of method ``match`` to validate the string.

``IS_MATCH('...', extract=True)`` filters and extract only the first matching
substring rather than the original value.

##### ``IS_LENGTH``
``IS_LENGTH``:inxx

Checks if length of field's value fits between given boundaries. Works
for both text and file inputs.

Its arguments are:
- maxsize: the maximum allowed length / size (has default = 255)
- minsize: the minimum allowed length / size

Examples:
Check if text string is shorter than 33 characters:
``
INPUT(_type='text', _name='name', requires=IS_LENGTH(32))
``:code

Check if password string is longer than 5 characters:
``
INPUT(_type='password', _name='name', requires=IS_LENGTH(minsize=6))
``:code

Check if uploaded file has size between 1KB and 1MB:
``
INPUT(_type='file', _name='name', requires=IS_LENGTH(1048576, 1024))
``:code

For all field types except for files, it checks the length of the value. In the case of files, the value is a ``cookie.FieldStorage``, so it validates the length of the data in the file, which is the behavior one might intuitively expect.

##### ``IS_URL``
``IS_URL``:inxx

Rejects a URL string if any of the following is true:
- The string is empty or None
- The string uses characters that are not allowed in a URL
- The string breaks any of the HTTP syntactic rules
- The URL scheme specified (if one is specified) is not 'http' or 'https'
- The top-level domain (if a host name is specified) does not exist

(These rules are based on RFC 2616``RFC2616``:cite )

This function only checks the URL's syntax. It does not check that the URL points to a real document,
for example, or that it otherwise makes semantic sense. This function does automatically prepend
'http://' in front of a URL in the case of an abbreviated URL (e.g. 'google.ca').

If the parameter mode='generic' is used, then this function's behavior changes. It then rejects a URL string if any of the following is true:
- The string is empty or None
- The string uses characters that are not allowed in a URL
- The URL scheme specified (if one is specified) is not valid

(These rules are based on RFC 2396``RFC2396``:cite )

The list of allowed schemes is customizable with the allowed_schemes parameter. If you exclude None from
the list, then abbreviated URLs (lacking a scheme such as 'http') will be rejected.

The default prepended scheme is customizable with the prepend_scheme parameter. If you set prepend_scheme
to None, then prepending will be disabled. URLs that require prepending to parse will still be accepted,
but the return value will not be modified.

IS_URL is compatible with the Internationalized Domain Name (IDN) standard specified in RFC 3490``RFC3490``:cite ). As a result, URLs can be regular strings or unicode strings.
If the URL's domain component (e.g. google.ca) contains non-US-ASCII letters, then the domain will
be converted into Punycode (defined in RFC 3492``RFC3492``:cite ). IS_URL goes a
bit beyond the standards, and allows non-US-ASCII characters to be present in the path
and query components of the URL as well. These non-US-ASCII characters will be encoded.
For example, space will be encoded as'%20'. The unicode character with hex code 0x4e86
will become '%4e%86'.

Examples:
``
requires = IS_URL())
requires = IS_URL(mode='generic')
requires = IS_URL(allowed_schemes=['https'])
requires = IS_URL(prepend_scheme='https')
requires = IS_URL(mode='generic',
                  allowed_schemes=['ftps', 'https'],
                  prepend_scheme='https')
``:code

##### ``IS_SLUG``
``IS_SLUG``:inxx
``
requires = IS_SLUG(maxlen=80, check=False, error_message='must be slug')
``:code

If ``check`` is set to ``True`` it check whether the validated value is a slug (allowing only alphanumeric characters and non-repeated dashes).

If ``check`` is set to ``False`` (default) it converts the input value to a slug.

#### Date and time validators

##### ``IS_TIME``
``IS_TIME``:inxx

This validator checks that a field value contains a valid time in the specified format.
``
requires = IS_TIME(error_message='must be HH:MM:SS!')
``:code

##### ``IS_DATE``
``IS_DATE``:inxx

This validator checks that a field value contains a valid date in the specified format. It is good practice to specify the format using the translation operator, in order to support different formats in different locales.
``
requires = IS_DATE(format=T('%Y-%m-%d'),
                   error_message='must be YYYY-MM-DD!')
``:code

For the full description on % directives look under the IS_DATETIME validator.


For the full description on % directives look under the IS_DATETIME validator.

##### ``IS_DATETIME``
``IS_DATETIME``:inxx

This validator checks that a field value contains a valid datetime in the specified format. It is good practice to specify the format using the translation operator, in order to support different formats in different locales.
``
requires = IS_DATETIME(format=T('%Y-%m-%d %H:%M:%S'),
                       error_message='must be YYYY-MM-DD HH:MM:SS!')
``:code

The following symbols can be used for the format string (this shows the symbol and an example string):
``
%Y  '1963'
%y  '63'
%d  '28'
%m  '08'
%b  'Aug'
%b  'August'
%H  '14'
%I  '02'
%p  'PM'
%M  '30'
%S  '59'
``:code

##### ``IS_DATE_IN_RANGE``
``IS_DATE_IN_RANGE``:inxx

Works very much like the previous validator but allows to specify a range:
``
requires = IS_DATE_IN_RANGE(format=T('%Y-%m-%d'),
                   minimum=datetime.date(2008,1,1),
                   maximum=datetime.date(2009,12,31),
                   error_message='must be YYYY-MM-DD!')
``:code

##### ``IS_DATETIME_IN_RANGE``
``IS_DATETIME_IN_RANGE``:inxx

Works very much like the previous validator but allows to specify a range:
``
requires = IS_DATETIME_IN_RANGE(format=T('%Y-%m-%d %H:%M:%S'),
                       minimum=datetime.datetime(2008,1,1,10,30),
                       maximum=datetime.datetime(2009,12,31,11,45),
                       error_message='must be YYYY-MM-DD HH:MM::SS!')
``:code

For the full description on % directives look under the IS_DATETIME validator.

#### Range, set and equality validators

##### ``IS_EQUAL_TO``
``IS_EQUEL_TO``:inxx

Checks whether the validated value is equal to a given value (which can be a variable):
``
requires = IS_EQUAL_TO(request.vars.password,
                       error_message='passwords do not match')
``:code

##### ``IS_NOT_EMPTY``
``IS_NOT_EMPTY``:inxx

This validator checks that the content of the field value is not an empty string.
``
requires = IS_NOT_EMPTY(error_message='cannot be empty!')
``:code

##### ``IS_NULL_OR``
``IS_NULL_OR``:inxx

Deprecated, an alias for ``IS_EMPTY_OR`` described below.

##### ``IS_EMPTY_OR``
``IS_EMPTY_OR``:inxx

Sometimes you need to allow empty values on a field along with other requirements. For example a field may be a date but it can also be empty.
The ``IS_EMPTY_OR`` validator allows this:
``
requires = IS_EMPTY_OR(IS_DATE())
``:code


##### ``IS_EXPR``
``IS_EXPR``:inxx

Its first argument is a string containing a logical expression in terms of a variable value. It validates a field value if the expression evaluates to ``True``. For example:
``
requires = IS_EXPR('int(value)%3==0',
                   error_message='not divisible by 3')
``:code

One should first check that the value is an integer so that an exception will not occur.
``
requires = [IS_INT_IN_RANGE(0, 100), IS_EXPR('value%3==0')]
``:code


##### ``IS_DECIMAL_IN_RANGE``
``IS_DECIMAL_IN_RANGE``:inxx

``
INPUT(_type='text', _name='name', requires=IS_DECIMAL_IN_RANGE(0, 10, dot="."))
``:code

It converts the input into a Python Decimal or generates an error if
the decimal does not fall within the specified inclusive range.
The comparison is made with Python Decimal arithmetic.

The minimum and maximum limits can be None, meaning no lower or upper limit,
respectively.

The ``dot`` argument is optional and allows you to internationalize the symbol used to separate the decimals.

##### ``IS_FLOAT_IN_RANGE``
``IS_FLOAT_IN_RANGE``:inxx

Checks that the field value is a floating point number within a definite range, ``0 <= value <= 100`` in the following example:
``
requires = IS_FLOAT_IN_RANGE(0, 100, dot=".",
         error_message='too small or too large!')
``:code

The ``dot`` argument is optional and allows you to internationalize the symbol used to separate the decimals.

##### ``IS_INT_IN_RANGE``
``IS_INT_IN_RANGE``:inxx

Checks that the field value is an integer number within a definite range,
 ``0 <= value < 100`` in the following example:

``
requires = IS_INT_IN_RANGE(0, 100,
         error_message='too small or too large!')
``:code

##### ``IS_IN_SET``
``IS_IN_SET``:inxx
``multiple``:inxx

In SQLFORM (and the grids) this validator will automatically set the form field to an option field (ie, with a drop-down menu).

``IS_IN_SET`` checks that the field values are in a set:
``
requires = IS_IN_SET(['a', 'b', 'c'],zero=T('choose one'),
         error_message='must be a or b or c')
``:code

The zero argument is optional and it determines the text of the option selected by default, an option which is not accepted by the ``IS_IN_SET`` validator itself. If you do not want a "choose one" option, set ``zero=None``.

The elements of the set can be combined with an numerical validator, as long as IS_IN_SET is first in the list. Doing so wil force conversion by the validtor to the numerical type. So, IS_IN_SET can be followed by  ``IS_INT_IN_RANGE`` (which converts the value to int) or  ``IS_FLOAT_IN_RANGE`` (which converts the value to float). For example:
``
requires = [ IS_IN_SET([2, 3, 5, 7],IS_INT_IN_RANGE(0, 8),
          error_message='must be prime and less than 10')]
``:code

[[checkbox_validation]]
###### Checkbox validation
To force a filled-in form checkbox (such as an acceptance of terms and conditions), use this:
``
requires=IS_IN_SET(['on'])
``:code
###### Dictionaries and tuples with IS_IN_SET
You may also use a dictionary or a list of tuples to make the drop down list more descriptive:
``
Dictionary example:
requires = IS_IN_SET({'A':'Apple','B':'Banana','C':'Cherry'},zero=None)

List of tuples example:
requires = IS_IN_SET([('A','Apple'),('B','Banana'),('C','Cherry')])
``:code


##### ``IS_IN_SET`` and Tagging

The ``IS_IN_SET`` validator has an optional attribute ``multiple=False``. If set to True, multiple values can be stored in one field. The field should be of type ``list:integer`` or ``list:string``. ``multiple`` references are handled automatically in create and update forms, but they are transparent to the DAL. We strongly suggest using the jQuery multiselect plugin to render multiple fields.

------
Note that when ``multiple=True``, ``IS_IN_SET`` will accept ``zero`` or more values, i.e. it will accept the field when nothing has been selected. ``multiple`` can also be a tuple of the form ``(a,b)`` where ``a`` and ``b`` are the minimum and (exclusive) maximum number of items that can be selected respectively.
------


#### Complexity and security validators
##### ``IS_STRONG``
``IS_STRONG``:inxx

Enforces complexity requirements on a field (usually a password field)

Example:
``
requires = IS_STRONG(min=10, special=2, upper=2)
``:code

where
- min is minimum length of the value
- special is the minimum number of required special characters special characters are any of the following ``!@#$%^&*(){}[]-+``
- upper is the minimum number of upper case characters

##### ``CRYPT``
``CRYPT``:inxx

This is also a filter. It performs a secure hash on the input and it is used to prevent passwords from being passed in the clear to the database.
``
requires = CRYPT()
``:code

By default, CRYPT uses 1000 iterations of the pbkdf2 algorithm combined with SHA512 to produce a 20-byte-long hash. Older versions of web2py used "md5" or HMAC+SHA512 depending on whether a key was was specified or not.

If a key is specified, CRYPT uses the HMAC algorithm. The key may contain a prefix that determines the algorithm to use with HMAC, for example SHA512:

``
requires = CRYPT(key='sha512:thisisthekey')
``:code

This is the recommended syntax. The key must be a unique string associated with the database used. The key can never be changed. If you lose the key, the previously hashed values become useless.

By default, CRYPT uses random salt, such that each result is different. To use a constant salt value, specify its value:

``
requires = CRYPT(salt='mysaltvalue')
``:code

Or, to use no salt:

``
requires = CRYPT(salt=False)
``:code

The CRYPT validator hashes its input, and this makes it somewhat special. If you need to validate a password field before it is hashed, you can use CRYPT in a list of validators, but must make sure it is the last of the list, so that it is called last. For example:

``
requires = [IS_STRONG(),CRYPT(key='sha512:thisisthekey')]
``:code

``CRYPT`` also takes a ``min_length`` argument, which defaults to zero.

The resulting hash takes the form ``alg$salt$hash``, where ``alg`` is the hash algorithm used, ``salt`` is the salt string (which can be empty), and ``hash`` is the algorithm's output. Consequently, the hash is self-identifying, allowing, for example, the algorithm to be changed without invalidating previous hashes. The key, however, must remain the same.


#### Special type validators

##### ``IS_LIST_OF``
``IS_LIST_OF``:inxx

This is not properly a validator. Its intended use is to allow validations of fields that return multiple values. It is used in those rare cases when a form contains multiple fields with the same name or a multiple selection box. Its only argument is another validator, and all it does is to apply the other validator to each element of the list. For example, the following expression checks that every item in a list is an integer in the range 0-10:
``
requires = IS_LIST_OF(IS_INT_IN_RANGE(0, 10))
``:code

It never returns an error and does not contain an error message. The inner validator controls the error generation.

##### ``IS_IMAGE``
``IS_IMAGE``:inxx

This validator checks if a file uploaded through the file input was saved in one of the selected image formats and has dimensions (width and height) within given limits.

It does not check for maximum file size (use IS_LENGTH for that). It returns
a validation failure if no data was uploaded. It supports the file formats BMP, GIF, JPEG, PNG, and it does not require the Python Imaging Library.

Code parts taken from ref.``source1``:cite

It takes the following arguments:
- extensions: iterable containing allowed image file extensions in lowercase
- maxsize: iterable containing maximum width and height of the image
- minsize: iterable containing minimum width and height of the image

Use (-1, -1) as minsize to bypass the image-size check.

Here are some Examples:
- Check if uploaded file is in any of supported image formats:
``
requires = IS_IMAGE()
``:code
- Check if uploaded file is either JPEG or PNG:
``
requires = IS_IMAGE(extensions=('jpeg', 'png'))
``:code

- Check if uploaded file is PNG with maximum size of 200x200 pixels:
``
requires = IS_IMAGE(extensions=('png'), maxsize=(200, 200))
``:code

- Note: on displaying an edit form for a table including ``requires = IS_IMAGE()``, a ``delete`` checkbox will NOT appear because to delete the file would cause the validation to fail. To display the ``delete`` checkbox use this validation:
``
requires = IS_EMPTY_OR(IS_IMAGE())
``:code


##### ``IS_UPLOAD_FILENAME``
``IS_UPLOAD_FILENAME``:inxx

This validator checks if the name and extension of a file uploaded through the file input matches the given criteria.

It does not ensure the file type in any way. Returns validation failure
if no data was uploaded.

Its arguments are:
- filename: filename (before dot) regex.
- extension: extension (after dot) regex.
- lastdot: which dot should be used as a filename / extension separator: ``True`` indicates last dot (e.g., "file.tar.gz" will be broken in "file.tar" + "gz") while ``False`` means first dot (e.g., "file.tar.gz" will be broken into "file" + "tar.gz").
- case: 0 means keep the case; 1 means transform the string into lowercase (default); 2 means transform the string into uppercase.

If there is no dot present, extension checks will be done against an empty
string and filename checks will be done against the whole value.

Examples:

Check if file has a pdf extension (case insensitive):
``
requires = IS_UPLOAD_FILENAME(extension='pdf')
``:code

Check if file has a tar.gz extension and name starting with backup:
``
requires = IS_UPLOAD_FILENAME(filename='backup.*', extension='tar.gz', lastdot=False)
``:code

Check if file has no extension and name matching README (case sensitive):
``
requires = IS_UPLOAD_FILENAME(filename='^README$', extension='^$', case=0)
``:code

##### ``IS_IPV4``
``IS_IPV4``:inxx

This validator checks if a field's value is an IP version 4 address in decimal form. Can
be set to force addresses from a certain range.

IPv4 regex taken from ref.``regexlib``:cite
Its arguments are:
- ``minip`` lowest allowed address; accepts: **str**, e.g., 192.168.0.1; **iterable of numbers**, e.g., [192, 168, 0, 1]; **int**, e.g., 3232235521
- ``maxip`` highest allowed address; same as above

All three example values are equal, since addresses are converted to
integers for inclusion check with following function:
``
number = 16777216 * IP[0] + 65536 * IP[1] + 256 * IP[2] + IP[3]
``:code

Examples:

Check for valid IPv4 address:
``
requires = IS_IPV4()
``:code

Check for valid private network IPv4 address:
``
requires = IS_IPV4(minip='192.168.0.1', maxip='192.168.255.255')
``:code

#### Other validators
##### ``CLEANUP``
``CLEANUP``:inxx

This is a filter. It never fails. It just removes all characters whose decimal ASCII codes are not in the list [10, 13, 32-127].
``
requires = CLEANUP()
``:code


#### Database validators

##### ``IS_NOT_IN_DB``
``IS_NOT_IN_DB``:inxx
######Synopsis:
``IS_NOT_IN_DB(db|set, 'table.field')``

Consider the following example:
``
db.define_table('person', Field('name'))
db.person.name.requires = IS_NOT_IN_DB(db, 'person.name')
``:code

It requires that when you insert a new person, his/her name is not already in the database, ``db``, in the field ``person.name``. 

A set can be used instead of ``db``.

As with all other validators this requirement is enforced at the form processing level, not at the database level. This means that there is a small probability that, if two visitors try to concurrently insert records with the same person.name, this results in a race condition and both records are accepted. It is therefore safer to also inform the database that this field should have a unique value:
``
db.define_table('person', Field('name', unique=True))
db.person.name.requires = IS_NOT_IN_DB(db, 'person.name')
``:code

Now if a race condition occurs, the database raises an OperationalError and one of the two inserts is rejected.

The first argument of ``IS_NOT_IN_DB`` can be a database connection or a Set. In the latter case, you would be checking only the set defined by the Set.

A complete argument list for ``IS_NOT_IN_DB()`` is as follows:
``
IS_NOT_IN_DB(dbset, field, error_message='value already in database or empty', allowed_override=[],
    ignore_common_filters=True)
``:code

The following code, for example, does not allow registration of two persons with the same name within 10 days of each other:
``
import datetime
now = datetime.datetime.today()
db.define_table('person',
    Field('name'),
    Field('registration_stamp', 'datetime', default=now))
recent = db(db.person.registration_stamp>now-datetime.timedelta(10))
db.person.name.requires = IS_NOT_IN_DB(recent, 'person.name')
``:code

##### ``IS_IN_DB``
``IS_IN_DB``:inxx
[[validate_IS_IN_DB]]
######Synopsis:
``IS_IN_DB(db|set,'table.value_field','%(representing_field)s',zero='choose one')``
where the third and fourth arguments are optional.

``multiple=`` is also possible if the field type is a list. The default is False. It can be set to True or to a tuple (min,max) to restrict the number of values selected. So ``multiple=(1,10)`` enforces at least one and at most ten selections.

Other optional arguments are discussed below.

######Example
Consider the following tables and requirement:

``
db.define_table('person', Field('name', unique=True))
db.define_table('dog', Field('name'), Field('owner', db.person)
db.dog.owner.requires = IS_IN_DB(db, 'person.id', '%(name)s',
                                 zero=T('choose one'))
*or using a Set*
db.person.name.requires = IS_IN_DB(db(db.person.id>10), 'person.id', '%(name)s')
``:code

It is enforced at the level of dog INSERT/UPDATE/DELETE forms. This example requires that a ``dog.owner`` be a valid id in the field ``person.id`` in the database ``db``. Because of this validator, the ``dog.owner`` field is represented as a drop-down list. The third argument of the validator is a string that describes the elements in the drop-down list. In the example you want to see the person ``%(name)s`` instead of the person ``%(id)s``. ``%(...)s`` is replaced by the value of the field in brackets for each record.

The ``zero`` option works very much like for the ``IS_IN_SET`` validator.

The first argument of the validator can be a database connection or a DAL Set, as in ``IS_NOT_IN_DB``. This can be useful for example when wishing to limit the records in the drop-down list. In this example, we use ``IS_IN_DB`` in a controller to limit the records dynamically each time the controller is called:

``
def index():
    (...)
    query = (db.table.field == 'xyz') #in practice 'xyz' would be a variable
    db.table.field.requires=IS_IN_DB(db(query),....)
    form=SQLFORM(...)
    if form.process().accepted: ...
    (...)
``:code

If you want the field validated, but you do not want a drop-down, you must put the validator in a list.

``
db.dog.owner.requires = [IS_IN_DB(db, 'person.id', '%(name)s')]
``:code

``_and``:inxx
Occasionally you want the drop-down (so you do not want to use the list syntax above) yet you want to use additional validators. For this purpose the ``IS_IN_DB`` validator takes an extra argument ``_and`` that can point to a list of other validators applied if the validated value passes the ``IS_IN_DB`` validation. For example to validate all dog owners in db that are not in a subset:
``
subset=db(db.person.id>100)
db.dog.owner.requires = IS_IN_DB(db, 'person.id', '%(name)s',
                                 _and=IS_NOT_IN_DB(subset,'person.id'))
``:code

``IS_IN_DB`` has a boolean ``distinct`` argument which defaults to ``False``. When set to ``True`` it prevents repeated values in the drop-down.

``IS_IN_DB`` also takes a ``cache`` argument that works like the ``cache`` argument of select.


##### ``IS_IN_DB`` and Tagging
``tags``:inxx
``multiple``:inxx

The ``IS_IN_DB`` validator has an optional attribute ``multiple=False``. If set to ``True`` multiple values can be stored in one field. This field should be of type ``list:reference`` as discussed in Chapter 6. An explicit example of tagging is discussed there. ``multiple`` references are handled automatically in create and update forms, but they are transparent to the DAL. We strongly suggest using the jQuery multiselect plugin to render multiple fields.

#### Custom validators
``custom validator``:inxx

All validators follow the prototype below:
``
class sample_validator:
    def __init__(self, *a, error_message='error'):
        self.a = a
        self.e = error_message
    def __call__(self, value):
        if validate(value):
            return (parsed(value), None)
        return (value, self.e)
    def formatter(self, value):
        return format(value)
``:code

i.e., when called to validate a value, a validator returns a tuple ``(x, y)``. If ``y`` is ``None``, then the value passed validation and ``x`` contains a parsed value. For example, if the validator requires the value to be an integer, ``x`` is converted to ``int(value)``. If the value did not pass validation, then ``x`` contains the input value and ``y`` contains an error message that explains the failed validation. This error message is used to report the error in forms that do not validate.

The validator may also contain a ``formatter`` method. It must perform the opposite conversion to the one the ``__call__`` does. For example, consider the source code for ``IS_DATE``:
``
class IS_DATE(object):
    def __init__(self, format='%Y-%m-%d', error_message='must be YYYY-MM-DD!'):
        self.format = format
        self.error_message = error_message
    def __call__(self, value):
        try:
            y, m, d, hh, mm, ss, t0, t1, t2 = time.strptime(value, str(self.format))
            value = datetime.date(y, m, d)
            return (value, None)
        except:
            return (value, self.error_message)
    def formatter(self, value):
        return value.strftime(str(self.format))
``:code

On success, the ``__call__`` method reads a date string from the form and converts it into a datetime.date object using the format string specified in the constructor. The ``formatter`` object takes a datetime.date object and converts it to a string representation using the same format. The ``formatter`` is called automatically in forms, but you can also call it explicitly to convert objects into their proper representation. For example:
``
>>> db = DAL()
>>> db.define_table('atable',
       Field('birth', 'date', requires=IS_DATE('%m/%d/%Y')))
>>> id = db.atable.insert(birth=datetime.date(2008, 1, 1))
>>> row = db.atable[id]
>>> print db.atable.formatter(row.birth)
01/01/2008
``:code

When multiple validators are required (and stored in a list), they are executed in order and the output of one is passed as input to the next. The chain breaks when one of the validators fails.

Conversely, when we call the ``formatter`` method of a field, the formatters of the associated validators are also chained, but in reverse order.

------
Notice that as alternative to custom validators, you can also use the ``onvalidate`` argument of ``form.accepts(...)``, ``form.process(...)`` and ``form.validate(...)``.
------


#### Validators with dependencies

Usually validators are set once for all in models.

Occasionally, you need to validate a field and the validator depends on the value of another field. This can be done in various ways. It can be done in the model or in the controller.

For example, here is a page that generates a registration form that asks for username and password twice. None of the fields can be empty, and both passwords must match:
``
def index():
    form = SQLFORM.factory(
        Field('username', requires=IS_NOT_EMPTY()),
        Field('password', requires=IS_NOT_EMPTY()),
        Field('password_again',
              requires=IS_EQUAL_TO(request.vars.password)))
    if form.process().accepted:
        pass # or take some action
    return dict(form=form)
``:code

The same mechanism can be applied to FORM and SQLFORM objects.

### Widgets

Here is a list of available web2py widgets:
``
SQLFORM.widgets.string.widget
SQLFORM.widgets.text.widget
SQLFORM.widgets.password.widget
SQLFORM.widgets.integer.widget
SQLFORM.widgets.double.widget
SQLFORM.widgets.time.widget
SQLFORM.widgets.date.widget
SQLFORM.widgets.datetime.widget
SQLFORM.widgets.upload.widget
SQLFORM.widgets.boolean.widget
SQLFORM.widgets.options.widget
SQLFORM.widgets.multiple.widget
SQLFORM.widgets.radio.widget
SQLFORM.widgets.checkboxes.widget
SQLFORM.widgets.autocomplete
``:code

The first ten of them are the defaults for the corresponding field types. The "options" widget is used when a field's requires is ``IS_IN_SET`` or ``IS_IN_DB`` with ``multiple=False`` (default behavior). The "multiple" widget is used when a field's requires is ``IS_IN_SET`` or ``IS_IN_DB`` with ``multiple=True``. The "radio" and "checkboxes" widgets are never used by default, but can be set manually. The autocomplete widget is special and discussed in its own section.

For example, to have a "string" field represented by a textarea:
``
Field('comment', 'string', widget=SQLFORM.widgets.text.widget)
``:code

Widgets can also be assigned to fields ''a posteriori'':

``
db.mytable.myfield.widget = SQLFORM.widgets.string.widget
``

Sometimes widgets take additional arguments and one needs to specify their values. In this case one can use ``lambda``

``
db.mytable.myfield.widget = lambda field,value: \
    SQLFORM.widgets.string.widget(field,value,_style='color:blue')
``

Widgets are helper factories and their first two arguments are always ``field`` and ``value``. The other arguments can include normal helper attributes such as ``_style``, ``_class``, etc. Some widgets also take special arguments. In particular ``SQLFORM.widgets.radio`` and ``SQLFORM.widgets.checkboxes`` take a ``style`` argument (not to be confused with ``_style``) which can be set to "table", "ul", or "divs" in order to match the ``formstyle`` of the containing form.

You can create new widgets or extend existing widgets.

``SQLFORM.widgets[type]`` is a class and ``SQLFORM.widgets[type].widget`` is a static member function of the corresponding class. Each widget function takes two arguments: the field object, and the current value of that field. It returns a representation of the widget. As an example, the string widget could be re-coded as follows:
``
def my_string_widget(field, value):
    return INPUT(_name=field.name,
                 _id="%s_%s" % (field._tablename, field.name),
                 _class=field.type,
                 _value=value,
                 requires=field.requires)

Field('comment', 'string', widget=my_string_widget)
``:code

The id and class values must follow the convention described later in this chapter. A widget may contain its own validators, but it is good practice to associate the validators to the "requires" attribute of the field and have the widget get them from there.

#### Autocomplete widget
``autocomplete``:inxx

There are two possible uses for the autocomplete widget: to autocomplete a field that takes a value from a list or to autocomplete a reference field (where the string to be autocompleted is a representation of the reference which is implemented as an id).

The first case is easy:
``
db.define_table('category',Field('name'))
db.define_table('product',Field('name'),Field('category'))
db.product.category.widget = SQLFORM.widgets.autocomplete(
     request, db.category.name, limitby=(0,10), min_length=2)
``:code

Where ``limitby`` instructs the widget to display no more than 10 suggestions at the time, and ``min_length`` instructs the widget to perform an Ajax callback to fetch suggestions only after the user has typed at least 2 characters in the search box.

The second case is more complex:
``
db.define_table('category',Field('name'))
db.define_table('product',Field('name'),Field('category'))
db.product.category.widget = SQLFORM.widgets.autocomplete(
     request, db.category.name, id_field=db.category.id)
``:code

In this case the value of ``id_field`` tells the widget that even if the value to be autocompleted is a ``db.category.name``, the value to be stored is the corresponding ``db.category.id``. An optional parameter is ``orderby`` that instructs the widget on how to sort the suggestions (alphabetical by default).

This widget works via Ajax. Where is the Ajax callback? Some magic is going on in this widget. The callback is a method of the widget object itself. How is it exposed? In web2py any piece of code can generate a response by raising an HTTP exception. This widget exploits this possibility in the following way: the widget sends the Ajax call to the same URL that generated the widget in the first place and puts a special token in the request.vars. Should the widget get instantiated again, it finds the token and raises an HTTP exception that responds to the request. All of this is done under the hood and hidden to the developer.

## ``SQLFORM.grid`` and ``SQLFORM.smartgrid``

-------
Attention: grid and smartgrid were experimental prior web2py version 2.0 and were vulnerable to information leakage. The grid and smartgrid are no longer experimental, but we are still not promising backward compatibility of the presentation layer of the grid, only of its APIs.
-------

These are two high level objects that create complex CRUD controls. They provide pagination, the ability to browse, search, sort, create, update and delete records from a single object.

Because web2py's HTML objects build on the underlying, simpler objects, the grids create SQLFORMs for viewing, editing and creating its rows. Many of the arguments to the grids are passed through to this SQLFORM. This means the documentation for SQLFORM (and FORM) is relevant. For example, the grid takes an ``onvalidation`` callback. The processing logic of the grid ultimately passes this through to the underlying process() method of FORM, which means you should consult the documentation of ``onvalidation`` for FORMs.

As the grid passes through different states, such as editing a row, a new request is generated. request.args has information about which state the grid is in.


### ``SQLFORM.grid`` 
The simplest of the two is ``SQLFORM.grid``. Here is an example of usage:

``
@auth.requires_login()
def manage_users():
    grid = SQLFORM.grid(db.auth_user)
    return locals()
``:code

which produces the following page:

[[image @///image/en6700.png center 480px]]

The first argument of ``SQLFORM.grid`` can be a table or a query. The grid object will provide access to records matching the query.

Before we dive into the long list of arguments of the grid object we need to understand how it works. The object looks at ``request.args`` in order to decide what to do (browse, search, create, update, delete, etc.). Each button created by the object links the same function (``manage_users`` in the above case) but passes different ``request.args``. 

#### login required by default for data updates
By default all the URLs generated by the grid are digitally signed and verified. This means one cannot perform certain actions (create, update, delete) without being logged-in. These restrictions can be relaxed:

``
def manage_users():
    grid = SQLFORM.grid(db.auth_user,user_signature=False)
    return locals()
``:code

but we do not recommend it.


#### Multiple grids per controller function
-----
Because of the way grid works one can only have one grid per controller function, unless they are embedded as components via ``LOAD``.
To make the default search grid work in more than one LOADed grid, please use a different ``formname`` for each one.
-----

#### Using requests.args safely
Because the controller function that contains the grid may itself manipulate the URL arguments (known in web2py as response.args and response.vars), the grid needs to know which args should be handled by the grid and which not. Here is an example of code that allows one to manage any table:

``
@auth.requires_login()
def manage():
    table = request.args(0)
    if not table in db.tables(): redirect(URL('error'))
    grid = SQLFORM.grid(db[table],args=request.args[:1])
    return locals()
``:code

the ``args`` argument of the ``grid`` specifies which ``request.args`` should be passed along and ignored by the ``grid``. In our case ``request.args[:1]`` is the name of the table we want to manage and it is handled by the ``manage`` function itself, not by the ``grid``. So, ``args=request.args[:1]`` tells the grid to preserve the first URL argument in any links that it generates, appending any grid-specific arguments after that first argument.

#### SQLFORM.grid signature
The complete signature for the grid is the following:

``
SQLFORM.grid(
    query,
    fields=None,
    field_id=None,
    left=None,
    headers={},
    orderby=None,
    groupby=None,
    searchable=True,
    sortable=True,
    paginate=20,
    deletable=True,
    editable=True,
    details=True,
    selectable=None,
    create=True,
    csv=True,
    links=None,
    links_in_grid=True,
    upload='<default>',
    args=[],
    user_signature=True,
    maxtextlengths={},
    maxtextlength=20,
    onvalidation=None,
    oncreate=None,
    onupdate=None,
    ondelete=None,
    sorter_icons=(XML('&#x2191;'), XML('&#x2193;')),
    ui = 'web2py',
    showbuttontext=True,
    _class="web2py_grid",
    formname='web2py_grid',
    search_widget='default',
    ignore_rw = False,
    formstyle = 'table3cols',
    exportclasses = None,
    formargs={},
    createargs={},
    editargs={},
    viewargs={},
    buttons_placement = 'right',
    links_placement = 'right'
    )
``:code

- ``fields`` is a list of fields to be fetched from the database. It is also used to determine which fields to be shown in the grid view. However, it doesn't control what is displayed in the separate form used to edit rows. For that, use the readable and writable attribute of the database fields. For example, in a editable grid, suppress updating of a field like this: before creating the SQLFORM.grid, set 
``
db.my_table.a_field.writable = False
db.my_table.a_field.readable = False

``:code
- ``field_id`` must be the field of the table to be used as ID, for example ``db.mytable.id``.
- ``left`` is an optional left join expressions used to build ``...select(left=...)``.
- ``headers`` is a dictionary that maps 'tablename.fieldname' into the corresponding header label, e.g. ``{'auth_user.email' : 'Email Address'}``
- ``orderby`` is used as default ordering for the rows. See [[DAL chapter ../06#orderby]] (multiple fields are possible).
- ``groupby`` is used to group the set. Use the same syntax as you were passing in a simple ``select(groupby=...)``.
- ``searchable``, ``sortable``, ``deletable``, ``editable``, ``details``, ``create`` determine whether one can search, sort, delete, edit, view details, and create new records respectively.
- ``selectable`` can be used to call a custom function on multiple records (a checkbox will be inserted for every row) e.g.
  ``
   selectable = lambda ids : redirect(URL('default', 'mapping_multiple', vars=dict(id=ids)))``:code
or for multiple action buttons, use a list of tuples: 
`` selectable = [('button label1',lambda...),('button label2',lambda ...)]
``:code
- ``paginate`` sets the max number of rows per page.
- ``csv`` if set to true allows to download the grid in various format (more on that later).
- ``links`` is used to display new columns which can be links to other pages. The ``links`` argument must be a list of  ``dict(header='name',body=lambda row: A(...))`` where ``header`` is the header of the new column and ``body`` is a function that takes a row and returns a value. In the example, the value is a ``A(...)`` helper.
- ``links_in_grid`` if set to False, links will only be displayed in the "details" and "edit" page (so, not on the main grid)
- ``upload`` same as SQLFORM's one. web2py uses the action at that URL to download the file
- ``maxtextlength`` sets the maximum length of text to be displayed for each field value, in the grid view. This value can be overwritten for each field using ``maxtextlengths``, a dictionary of 'tablename.fieldname':length e.g. ``{'auth_user.email' : 50}``
- ``onvalidation``, ``oncreate``, ``onupdate`` and ``ondelete`` are callback functions. All but ``ondelete`` take a form object as input, ondelete takes the table and the record id
Because the edit/create form is an SQLFORM which extends FORM, these callbacks are essentially used in the same way as documented in the sections for FORM and SQLFORM.

Here is skeleton code:

``
def myonvalidation(form):
    print "In onvalidation callback"
    print form.vars
    form.errors= True  #this prevents the submission from completing
    
    #...or to add messages to specific elements on the form
    form.errors.first_name = "Do not name your child after prominent deities"   
    form.errors.last_name = "Last names must start with a letter"
    response.flash = "I don't like your submission" 

def myoncreate(form):
    print 'create!'
    print form.vars

def myonupdate(form):
    print 'update!'
    print form.vars

def myondelete(table, id):
    print 'delete!'
    print table, id
``:code

onupdate and oncreate are the same callbacks available to SQLFORM.process()

- ``sorter_icons`` is a list of two strings (or helpers) that will be used to represent the up and down sorting options for each field.
- ``ui`` can be set equal to 'web2py' and will generate web2py friendly class names, can be set equal to ``jquery-ui`` and will generate jquery UI friendly class names, but it can also be its own set of class names for the various grid components:
  ``
ui = dict(
    widget='',
    header='',
    content='',
    default='',
    cornerall='',
    cornertop='',
    cornerbottom='',
    button='button',
    buttontext='buttontext button',
    buttonadd='icon plus',
    buttonback='icon leftarrow',
    buttonexport='icon downarrow',
    buttondelete='icon trash',
    buttonedit='icon pen',
    buttontable='icon rightarrow',
    buttonview='icon magnifier')
``:code

- ``search_widget`` allows to override the default search widget and we refer the reader the source code in "gluon/sqlhtml.py" for details.
- ``showbuttontext`` allows buttons without text (there will effectively be only icons)
- ``_class`` is the class for the grid container.
- ``exportclasses`` takes a dictionary of tuples: by default it's defined as

``
csv_with_hidden_cols=(ExporterCSV, 'CSV (hidden cols)'),
csv=(ExporterCSV, 'CSV'),
xml=(ExporterXML, 'XML'),
html=(ExporterHTML, 'HTML'),
tsv_with_hidden_cols=(ExporterTSV, 'TSV (Excel compatible, hidden cols)'),
tsv=(ExporterTSV, 'TSV (Excel compatible)'))
``:code

ExporterCSV, ExporterXML, ExporterHTML and ExporterTSV are all defined in gluon/sqlhtml.py. Take a look at those for creating your own exporter. If you pass a dict like ``dict(xml=False, html=False)`` you will disable the xml and html export formats.

- ``formargs`` is passed to all SQLFORM objects used by the grid, while ``createargs``, ``editargs`` and ``viewargs`` are passed only to the specific create, edit and details SQLFORMs
- ``formname``, ``ignore_rw`` and ``formstyle`` are passed to the SQLFORM objects used by the grid for create/update forms.
- ``buttons_placement`` and ``links_placement`` both take a parameter ('right', 'left', 'both') that will affect where on the row the buttons (or the links) will be placed
------
``deletable``, ``editable`` and ``details`` are usually boolean values but they can be functions which take the row object and decide whether to display the corresponding button or not.
-----

#### Virtual fields in SQLFORM.grid and smartgrid
In versions of web2py after 2.6, virtual fields are shown in grids like normal fields: either shown alongside all other fields by default, or by including them in the ``fields`` argument. However, virtual fields are not sortable. 

In older web2py versions, showing virtual fields in a grid requires use of the ``links`` argument. This is still supported for more recent versions. If table db.t1 has a field called t1.vfield which is based on the values of t1.field1 and t1.field2, do this:

``grid = SQLFORM.grid(db.t1, ..., fields = [t1.field1, t1.field2,...], 
   links = [dict(header='Virtual Field 1',body=lambda row:row.vfield),...] )
``:code

In all cases, because t1.vfield depends on t1.field1 and t1.field2, these fields must be present in the row. In the example above, this is guaranteed by including t1.field1 and t1.field2 in the fields argument. Alternatively, showing all fields will also work. You can suppress a field from displaying by setting the readable attribute to False. 

Note that when defining the virtual field, the lambda function must qualify fields with the database name, but in the links argument, this is not necessary.
So for the example above, the virtual field may be defined like:
``
db.define_table('t1',Field('field1','string'),
   Field('field2','string'),
  Field.Virtual('virtual1', lambda row: row.t1.field1 + row.t1.field2),
  ...)
``:code

### SQLFORM.smartgrid

A ``SQLFORM.smartgrid`` looks a lot like a ``grid``, in fact it contains a grid but it is designed to take as input not a query but only one table and to browse said table and selected referencing tables.

For example consider the following table structure:

``
db.define_table('parent',Field('name'))
db.define_table('child',Field('name'),Field('parent','reference parent'))
``:code

With SQLFORM.grid you can list all parents:

``
SQLFORM.grid(db.parent)
``:code
all children:
``
SQLFORM.grid(db.child)
``:code
and all parents and children in one table:
``
SQLFORM.grid(db.parent,left=db.child.on(db.child.parent==db.parent.id))
``:code

With SQLFORM.smartgrid you can put all the data in one object that spawns both tables:

``
@auth.requires_login()
def manage():
    grid = SQLFORM.smartgrid(db.parent,linked_tables=['child'])
    return locals()
``:code

which looks like this:

[[image @///image/en6800.png center 480px]]

Notice the extra "children" links. One could create the extra ``links`` using a regular ``grid`` but they would point to a different action. With a ``smartgrid`` they are created automatically and handled by the same object.

Also notice that when clicking on the "children" link for a given parent one only gets the list of children for that parent (and that is obvious) but also notice that if one now tried to add a new child, the parent value for the new child is automatically set to the selected parent (displayed in the breadcrumbs associated to the object). The value of this field can be overwritten. We can prevent this by making it readonly:

``
@auth.requires_login():
def manage():
    db.child.parent.writable = False
    grid = SQLFORM.smartgrid(db.parent,linked_tables=['child'])
    return locals()
``:code

If the ``linked_tables`` argument is not specified all referencing tables are automatically linked. Anyway, to avoid accidentally exposing data we recommend explicitly listing tables that should be linked.

The following code creates a very powerful management interface for all tables in the system:

``
@auth.requires_membership('managers'):
def manage():
    table = request.args(0) or 'auth_user'
    if not table in db.tables(): redirect(URL('error'))
    grid = SQLFORM.smartgrid(db[table],args=request.args[:1])
    return locals()
``:code

#### smartgrid signature

The ``smartgrid`` takes the same arguments as a ``grid`` and some more with some caveats:

- The first argument is a table, not a query
- There is an extra argument ``constraints`` which is a dictionary of 'tablename':query which can be used to further restrict access to the records displayed in the 'tablename' grid.
- There is an extra argument ``linked_tables`` which is a list of tablenames of tables that should be accessible via the smartgrid.
- ``divider`` allows to specify a character to use in the breadcrumb navigator, ``breadcrumbs_class`` will apply the class to the breadcrumb element
- All the arguments but the table, ``args``, ``linked_tables`` and ``user_signatures`` can be dictionaries as explained below.

Consider the previous grid:
``
grid = SQLFORM.smartgrid(db.parent,linked_tables=['child'])
``:code
It allows one to access both a ``db.parent`` and a ``db.child``. Apart for navigation controls, for each one table, a smarttable is nothing but a grid. This means that, in this case, one smartgrid can create a grid for parent and one grid for child. We may want to pass different sets of parameters to these grids. For example different sets of ``searchable`` parameters.

While for a grid we would pass a boolean:
``
grid = SQLFORM.grid(db.parent,searchable=True)
``:code

For a smartgrid we would pass a dictionary of booleans:
``
grid = SQLFORM.smartgrid(db.parent,linked_tables=['child'],
     searchable= dict(parent=True, child=False))
``:code

In this way we made parents searchable but children for each parent not searchable (there should not be that many to need the search widget).

### grid and smartgrid access control
``grid`` and ``smartgrid`` do not automatically enforce access control like crud does but you can integrate it with ``auth`` using explicit permission checking:

``
grid = SQLFORM.grid(db.auth_user,
     editable = auth.has_membership('managers'),
     deletable = auth.has_membership('managers'))
``:code

or

``
grid = SQLFORM.grid(db.auth_user,
     editable = auth.has_permission('edit','auth_user'),
     deletable = auth.has_permission('delete','auth_user'))
``:code

### smartgrid plurals
The ``smartgrid`` is the only object in web2py that displays the table name and it needs both the singular and the plural. For example one parent can have one "Child" or many "Children". Therefore a table object needs to know its own singular and plural names. web2py normally guesses them but you can set them explicitly:

``
db.define_table('child', ..., singular="Child", plural="Children")
``:code

or with: ``singular``:inxx ``plural``:inxx

``
db.define_table('child', ...)
db.child._singular = "Child"
db.child._plural = "Children"
``:code

They should also be internationalized using the ``T`` operator.

The plural and singular values are then used by ``smartgrid``
to provide correct names for headers and links.

