## Представления
``views``:inxx ``template language``:inxx ``HTML``:inxx

web2py использует Python для своих моделей, контроллеров и представлений, хотя он и использует слегка измененный синтаксис Python в представлениях, но тем самым обеспечивается более читаемый код без наложения каких-либо ограничений на правильное использование Python.

Назначением представления является внедрение кода (Python) в HTML-документ. В целом, это создает некоторые проблемы:
- Каким образом встроенный код должен быть экранирован?
- Отступы должны быть основаны на правилах Python или HTML?

web2py использует ``{{ ... }}`` чтобы выделить Python код, внедренный в HTML. Преимуществом использования фигурных скобок вместо угловых скобокявляется то, что они прозрачны для всех распространенных HTML-редакторов. Это позволяет разработчику использовать эти редакторы для создания web2py представлений. Данные разделители могут быть изменены, например:

``
response.delimiters = ('<?','?>')
``:code

Если эта строка в модели, то они будут применяться везде, если в контроллере, то только в представлениях для действий контроллера, если внутри действия, то только в представлении для этого действия..

Так как разработчик встраивает код Python в HTML, то отступы в документе должны быть в соответствии с правилами HTML, а не с правилами Python. Поэтому, мы допускаем Python код без отступов внутри ``{{...}}`` тегов. Поскольку Python обычно использует отступы для разделения блоков кода, то нам нужен другой способ разграничить их; именно поэтому язык шаблонов web2py использует ключевое слово Python ``pass``.

-------
Блок кода начинается со строки, которая заканчивается двоеточием, и заканчивается строкой, которая начинается с ``pass``. Ключевое слово ``pass`` не является обязательным, когда конец блока очевиден из контекста.
-------

Вот пример:

``
{{
if i == 0:
response.write('i is 0')
else:
response.write('i is not 0')
pass
}}
``:code

Обратите внимание, что ``pass`` является ключевым словом Python, а не ключевым словом web2py. Некоторые редакторы Python, такие как Emacs, используют ключевое слово ``pass`` для обозначения разделения блоков и используют его для повторного отступа кода автоматически.

Язык шаблонов web2py делает то же самое. Когда он находит что-то вроде:

``
<html><body>
{{for x in range(10):}}{{=x}}hello<br />{{pass}}
</body></html>
``:code

он переводит его в программу:
``
response.write("""<html><body>""", escape=False)
for x in range(10):
    response.write(x)
    response.write("""hello<br />""", escape=False)
response.write("""</body></html>""", escape=False)
``:code
``response.write`` writes to the ``response.body``.

При возникновении ошибки в представлении web2py, в отчете об ошибке показывается сгенерированный код представления, а не фактическое представление, написанное разработчиком. Это помогает разработчику отлаживать код путем выделения фактического кода, который выполняется (то, что может быть отлажено с помощью редактора HTML или инспектора DOM браузера).

Также отметим, что:
``
{{=x}}
``:code

генерирует
``response.write``:inxx ``escape``:inxx
``
response.write(x)
``:code

Переменные впрыскивается в HTML код и таким спосбом экранируются (escaped) по умолчанию.
Экранирование игнорируется, если ``x`` является объектом ``XML``, даже если экранирование escape установлено на ``True``.

Ниже приведен пример, который вводит ``H1`` помощника:
``
{{=H1(i)}}
``:code

который переводится в:
``
response.write(H1(i))
``:code

при оценке, объект ``H1`` и его компоненты рекурсивно сериализуются, экранируются и записываются в тело ответа. Теги, сгенерированные ``H1`` и внутренний HTML не экранируется. Данные механизм гарантирует, что весь текст --- и только текст ---, отображенный на веб-странице является всегда экранированным, таким образом предотвращаются XSS уязвимости. В то же время, код прост и удобен для отладки.

Метод ``response.write(obj, escape=True)`` принимает два аргумента, объект для записи и разрешение на экранирование (установлено на ``True`` по умолчанию). Если ``obj`` имеет метод ``.xml()``, то он вызывается и результат записывается в тело ответа (``escape`` аргумент игнорируется). В противном случае он использует метод объекта ``__str__`` для его сериализации и, если аргумент escape установлен на ``True``, экранировании его. Все встроенные вспомогательные объекты (``H1`` в примере) являются объектами, которые знают, как сериализовать себя через ``.xml()`` метод.

Это все делается прозрачно. Вам никогда не понадобиться (и не следует) вызывать метод ``response.write`` в явном виде.

### Основной синтаксис

Язык шаблонов web2py поддерживает все управляющие структуры Python. Здесь мы приводим некоторые примеры каждой из них. Они могут быть вложены в соответствии с обычной практикой программирования.

#### ``for...in``
``for``:inxx

В шаблонах вы сможете циклически перебрать итерируемый объект:
``
{{items = ['a', 'b', 'c']}}
<ul>
{{for item in items:}}<li>{{=item}}</li>{{pass}}
</ul>
``:code

который производит:
``
<ul>
<li>a</li>
<li>b</li>
<li>c</li>
</ul>
``:code

Здесь ``item`` является любым итерируемым объектом, таким как список Python, кортеж Python, объект Rows или любой другой объект, который реализуется в качестве итератора. Элементы, выводимые на экран, сперва сериализуются и экранируются.

#### ``while``
``while``:inxx

Вы можете создать цикл, используя ключевое слово while:
``
{{k = 3}}
<ul>
{{while k > 0:}}<li>{{=k}}{{k = k - 1}}</li>{{pass}}
</ul>
``:code

который производит:
``
<ul>
<li>3</li>
<li>2</li>
<li>1</li>
</ul>
``:code

#### ``if...elif...else``
``if``:inxx ``elif``:inxx ``else``:inxx

Вы можете использовать условные операторы:
``
{{
import random
k = random.randint(0, 100)
}}
<h2>
{{=k}}
{{if k % 2:}}is odd{{else:}}is even{{pass}}
</h2>
``:code

который производит:
``
<h2>
45 is odd
</h2>
``:code

Поскольку очевидно, что ``else`` закрывает первый ``if`` блок, то нет никакой необходимости в обявлении ``pass``, использованием которого было бы неправильным. Тем не менее, вы должны явно закрыть ``else`` блок с ``pass``.

Напомним, что в Python "else if" пишется ``elif``, как в следующем примере:
``
{{
import random
k = random.randint(0, 100)
}}
<h2>
{{=k}}
{{if k % 4 == 0:}}is divisible by 4
{{elif k % 2 == 0:}}is even
{{else:}}is odd
{{pass}}
</h2>
``:code

Она производит:
``
<h2>
64 is divisible by 4
</h2>
``:code

#### ``try...except...else...finally``
``try``:inxx ``except``:inxx ``else``:inxx ``finally``:inxx

Кроме того, можно использовать ``try...except`` операторы в представлениях с одной оговоркой. Рассмотрим следующий пример:
``
{{try:}}
Hello {{= 1 / 0}}
{{except:}}
division by zero
{{else:}}
no division by zero
{{finally}}
<br />
{{pass}}
``:code

Он будет производить следующий вывод:
``
Hello
division by zero
<br />
``:code

Этот пример показывает, что все выходные данные, генерируемые до возникновения исключения, визуализируется (в том числе выводные данные, которые предшествовали исключению) внутри блока try. "Hello" пишется, потому что он предшествует исключению.

#### Оператор ``def...return``
``def``:inxx ``return``:inxx

Язык шаблонов web2py позволяет разработчику определять и реализовывать функции, которые могут возвращать любой объект Python или text/html строку. Здесь мы рассмотрим два примера:
``
{{def itemize1(link): return LI(A(link, _href="http://" + link))}}
<ul>
{{=itemize1('www.google.com')}}
</ul>
``:code

производит следующий вывод:
``
<ul>
<li><a href="http:/www.google.com">www.google.com</a></li>
</ul>
``:code

Функция ``itemize1`` возвращает вспомогательный объект, который вставляется в том месте, где вызывается функция.

Рассмотрим теперь следующий код:
``
{{def itemize2(link):}}
<li><a href="http://{{=link}}">{{=link}}</a></li>
{{return}}
<ul>
{{itemize2('www.google.com')}}
</ul>
``:code

Она производит точно такой же результат, как описано выше. В этом случае функция ``itemize2`` представляет собой кусок HTML, который идет на замену web2py тега, где вызывается функция. Заметьте, что нет '=' перед вызовом ``itemize2``, так как функция не возвращает текст, но он записывает его непосредственно в ответ.

Существует один нюанс: функции, определенные внутри представления должны завершаться с оператором return, или автоматическая расстановка отступов потерпит неудачу.

### HTML Помощники
``helpers``:inxx

Рассмотрим следующий код в представлении:
``
{{=DIV('this', 'is', 'a', 'test', _id='123', _class='myclass')}}
``:code

она визуализируется как:
``
<div id="123" class="myclass">thisisatest</div>
``:code
``DIV`` является классом помощника, то есть классом, который может быть использован для программного построения HTML кода. Он соответствует HTML тегу ``<div>``.

Позиционные аргументы интерпретируются как объекты, содержащиеся между открывающим и закрывающим тегами. Именованные аргументы, которые начинаются с символа подчеркивания интерпретируются как HTML атрибуты тега (без подчеркивания). Некоторые помощники также имеют именованные аргументы, которые не начинаются с подчеркивания; эти аргументы специфичных тегов.

Вместо множества безымянных аргументов, помощник может также принимать один список или кортеж в качестве своего набора компонентов с использованием ``*`` обозначения и он может принимать единичный словарь в качестве своего набора атрибутов с помощью ``**``, например:
``
{{
contents = ['this','is','a','test']
attributes = {'_id':'123', '_class':'myclass'}
=DIV(*contents,**attributes)
}}
``:code
(производит такой же результат, как и раньше).

Следующий набор помощников:

``A``,  ``B``,  ``BEAUTIFY``,  ``BODY``,  ``BR``,  ``CAT``,  ``CENTER``,  ``CODE``,  ``COL``, ``COLGROUP``, ``DIV``,  ``EM``,  ``EMBED``,  ``FIELDSET``,  ``FORM``,  ``H1``,  ``H2``,  ``H3``,  ``H4``,  ``H5``,  ``H6``,  ``HEAD``,  ``HR``,  ``HTML``,  ``I``,  ``IFRAME``,  ``IMG``,  ``INPUT``,  ``LABEL``,  ``LEGEND``,  ``LI``,  ``LINK``,  ``MARKMIN``,  ``MENU``,  ``META``,  ``OBJECT``,  ``ON``,  ``OL``,  ``OPTGROUP``,  ``OPTION``,  ``P``,  ``PRE``,  ``SCRIPT``,  ``SELECT``,  ``SPAN``,  ``STYLE``,  ``TABLE``,  ``TAG``,  ``TBODY``,  ``TD``,  ``TEXTAREA``,  ``TFOOT``,  ``TH``,  ``THEAD``,  ``TITLE``,  ``TR``,  ``TT``, ``UL``,   ``URL``,  ``XHTML``,  ``XML``,  ``embed64``,  ``xmlescape``

может быть использован для построения сложных выражений, которые затем могут быть сериализованы в XML ``xml-w``:cite ``xml-o``:cite. Например:
``
{{=DIV(B(I("hello ", "<world>")), _class="myclass")}}
``:code

визуализируется:
``
<div class="myclass"><b><i>hello &lt;world&gt;</i></b></div>
``:code

Помощники также могут быть сериализованы в строки, также как и с ``__str__`` и ``xml`` методами:

``
>>> print str(DIV("hello world"))
<div>hello world</div>
>>> print DIV("hello world").xml()
<div>hello world</div>
``

``Объектная Модель Документа (DOM)``:inxx
Механизм помощников в web2py больше, чем система для генерации HTML без конкатенации строк. Он обеспечивает на стороне сервера представление объектной модели документа (DOM).

К компонентам внутри помощников можно обращаться по номеру их позиции, и помощники действуютс как списки в отношении своих компонентов:
``
>>> a = DIV(SPAN('a', 'b'), 'c')
>>> print a
<div><span>ab</span>c</div>
>>> del a[1]
>>> a.append(B('x'))
>>> a[0][0] = 'y'
>>> print a
<div><span>yb</span><b>x</b></div>
``:code

К атрибутам помощников можно обращаться по имени, и помощники действуют как словари в отношении своих атрибутов:
``
>>> a = DIV(SPAN('a', 'b'), 'c')
>>> a['_class'] = 's'
>>> a[0]['_class'] = 't'
>>> print a
<div class="s"><span class="t">ab</span>c</div>
``:code

Обратите внимание, что полный набор компонентов, может быть доступен через список, вызываемый через ``a.components``, и полный набор атрибутов может быть доступен через словарь, вызываемый через ``a.attributes``. Таким образом, ``a[i]`` эквивалентно ``a.components[i]``, когда ``i`` является целым, и ``a[s]`` эквивалентно ``a.attributes[s]``, когда ``s`` является строкой.

Обратите внимание на то, что атрибуты HTML-тега передаются как ключевые слова в аргументах помощника. В некоторых случаях, имена атрибутов HTML-тега могут включать в себя специальные символы, которые не разрешены в идентификаторах Python (например, дефис) и, следовательно, не могут быть использованы в качестве ключевых слов наименований аргументов. Например:

``
DIV('text', _data-role='collapsible')
``:code

не будет работать, потому что "_data-role" включает в себя дефис, который будет производить ошибку синтаксиса Python.

В таких случаях у вас есть несколько вариантов.
Вы можете использовать ``data`` аргумент (на этот раз без знака подчеркивания), чтобы передать словарь связанных атрибутов без их ведущего дефиса, и выход будет иметь желаемые комбинацию, например:

``
>>> print DIV('text', data={'role': 'collapsible'})
<div data-role="collapsible">text</div>
``:code

или вы можете взамен этого передать атрибуты в виде словаря и использовать Python обозначение ``**`` для аргументов функции, что сопоставит словарь: пары (ключ:значение) в множество ключевых аргументов:

``
>>> print DIV('text', **{'_data-role': 'collapsible'})
<div data-role="collapsible">text</div>
``:code

Обратите внимание, что более сложные записи будут вводить символьные сущности HTML, но они, тем не менее, будут работать, например

``
>>> print DIV('text', data={'options':'{"mode":"calbox", "useNewStyle":true}'})
<div data-options="{&quot;mode&quot;:&quot;calbox&quot;, &quot;useNewStyle&quot;:true}">text</div>
``:code

Кроме того, можно динамически создавать специальные тэги:

``
>>> print TAG['soap:Body']('whatever',**{'_xmlns:m':'http://www.example.org'})
<soap:Body xmlns:m="http://www.example.org">whatever</soap:Body>
``:code

#### ``XML``
``XML``:inxx
``XML`` это объект, используемый для инкапсуляции текста, который не должен экранироваться. Текст может содержать или не содержать допустимый XML. Например, он может содержать JavaScript.

Текст в этом примере экранируется:
``
>>> print DIV("<b>hello</b>")
&lt;b&gt;hello&lt;/b&gt;
``:code

используя ``XML`` вы можете предотвратить экранирование:
``
>>> print DIV(XML("<b>hello</b>"))
<b>hello</b>
``:code

Иногда очень хочется визуализировать HTML, хранимый в переменной, но HTML может содержать небезопасные теги, такие как сценарии:
``
>>> print XML('<script>alert("unsafe!")</script>')
<script>alert("unsafe!")</script>
``:code

Неэкранированный исполняемый ввод, такой как этот (например, введенный в тело комментария к блогу) является небезопасным, так как он может быть использован для создания Cross Site Scripting (XSS) атак против других посетителей страницы.

``sanitize``:inxx
Web2py ``XML`` помощник может санировать (sanitize) наш текст, чтобы предотвратить инъекции и экранировать все теги, за исключением тех, которые вы явно разрешили. Вот пример:
``
>>> print XML('<script>alert("unsafe!")</script>', sanitize=True)
&lt;script&gt;alert(&quot;unsafe!&quot;)&lt;/script&gt;
``:code

Конструкторы ``XML`` по умолчанию, безопасным способом рассматривают содержание некоторых тегов и некоторые из их атрибутов. Вы можете переопределить значения по умолчанию, используя дополнительные аргументы ``permitted_tags`` и ``allowed_attributes``. Вот значения по умолчанию необязательных аргументов ``XML`` помощника.
``
XML(text, sanitize=False,
    permitted_tags=['a', 'b', 'blockquote', 'br/', 'i', 'li',
       'ol', 'ul', 'p', 'cite', 'code', 'pre', 'img/'],
    allowed_attributes={'a':['href', 'title'],
       'img':['src', 'alt'], 'blockquote':['type']})
``:code

### Встроенные помощники

#### ``A``

Этот помощник используется для построения ссылок.

``A``:inxx
``
>>> print A('<click>', XML('<b>me</b>'),
            _href='http://www.web2py.com')
<a href='http://www.web2py.com'>&lt;click&gt;<b>me/b></a>
``:code

Вместо ``_href`` вы можете передать URL с помощью ``callback`` аргумента. Например, в представлении:

``
{{=A('click me', callback=URL('myaction'))}}
``

и эффектом нажатия на ссылку будет Ajax вызов "myaction" вместо перенаправления.
В этом случае при необходимости можно указать еще два аргумента: ``target`` и ``delete``:
``
{{=A('click me', callback=URL('myaction'), target="t")}}
<div id="t"><div>
``
и ответ на обратный вызов Ajax будет храниться в DIV с идентификатором, равным "t".

``
<div id="b">{{=A('click me', callback=URL('myaction'), delete='div#b")}}</div>
``
и после ответа, наиболее подходящий тег "div#b" будет удален. В этом случае кнопка будет удалена.
Типичным применением является:

``
{{=A('click me', callback=URL('myaction'), delete='tr")}}
``

в таблице. При нажатии кнопки будет выполнять обратный вызов и удаление строки таблицы.

``callback`` и ``delete`` могут быть скомбинированы.

Помощник А принимает специальный аргумент с именем ``cid``. Он работает следующим образом:

``
{{=A('linked page', _href='http://example.com', cid='myid')}}
<div id="myid"></div>
``:code

и нажатие на ссылку заставляет содержание загрузиться в div. Это аналогичный, но более мощный, чем предыдущий вариант синтаксиса, так как он предназначен для обновления компонентов страницы. Мы обсудим применение ``cid`` более подробно в [[главе 12 ../12#trapped_ajax_links]], в контексте компонентов.

Эти функции требуют Ajax и JQuery "static/js/web2py_ajax.js", которые автоматически включаются путем размещения ``{{include 'web2py_ajax.html'}}`` в заголовке макета. "views/web2py_ajax.html" определяет некоторые переменные на основе ``request`` и включает в себя все необходимые JS и CSS файлы.


#### ``B``
``B``:inxx

Этот помощник делает свое содержимое жирным шрифтом.
``
>>> print B('<hello>', XML('<i>world</i>'), _class='test', _id=0)
<b id="0" class="test">&lt;hello&gt;<i>world</i></b>
``:code

#### ``BODY``
``BODY``:inxx
Этот помощник делает тело страницы.
``
>>> print BODY('<hello>', XML('<b>world</b>'), _bgcolor='red')
<body bgcolor="red">&lt;hello&gt;<b>world</b></body>
``:code

#### ``BR``
``BR``:inxx

Этот помощник создает разрыв строки.
``
>>> print BR()
<br />
``:code

Обратите внимание на то, что помощники могут быть повторены с помощью оператора умножения:

``
>>> print BR()*5
<br /><br /><br /><br /><br />
``:code

#### ``CAT``
``CAT``:inxx

Этот помощник сцепляет других помощников, так же как TAG[\'\'].

``
>>> print CAT('Here is a ', A('link',_href=URL()), ', and here is some ', B('bold text'), '.')
Here is a <a href="/app/default/index">link</a>, and here is some <b>bold text</b>.
``:code

#### ``CENTER``
``CENTER``:inxx

Этот помощник центрует свое содержание.
``
>>> print CENTER('<hello>', XML('<b>world</b>'),
>>>              _class='test', _id=0)
<center id="0" class="test">&lt;hello&gt;<b>world</b></center>
``:code

#### ``CODE``
``CODE``:inxx

Этот помощник выполняет подсветку синтаксиса для кода Python, C, C++, HTML и web2py, и является предпочтительнее чем ``PRE`` для листинга программного кода. `` CODE`` также имеет возможность создавать ссылки на документацию API web2py.

Ниже приведен пример подсветки разделов кода Python.
``
>>> print CODE('print "hello"', language='python').xml()
<table><tr valign="top"><td style="width:40px; text-align: right;"><pre style="
        font-size: 11px;
        font-family: Bitstream Vera Sans Mono,monospace;
        background-color: transparent;
            margin: 0;
            padding: 5px;
            border: none;
        background-color: #E0E0E0;
        color: #A0A0A0;
    ">1.</pre></td><td><pre style="
        font-size: 11px;
        font-family: Bitstream Vera Sans Mono,monospace;
        background-color: transparent;
            margin: 0;
            padding: 5px;
            border: none;
            overflow: auto;
    "><span style="color:#185369; font-weight: bold">print </span>
    <span style="color: #FF9966">"hello"</span></pre></td></tr>
</table>
``:code

Вот подобный пример для HTML
``
>>> print CODE(
>>>   '<html><body>{{=request.env.remote_add}}</body></html>',
>>>   language='html')
``:code
``
<table>...<code>...
<html><body>{{=request.env.remote_add}}</body></html>
...</code>...</table>
``:code

Эти аргументы по умолчанию для помощника ``CODE``:
``
CODE("print 'hello world'", language='python', link=None, counter=1, styles={})
``:code

Поддерживаемыми значениями для аргумента ``language`` являются "python", "html_plain", "c", "cpp", "web2py" и "html". В "html" язык интерпретирует {{ и }} теги, как "web2py" код, в то время как "html_plain" нет.

Если задано значение ``link``, например "/examples/global/vars/", то web2py API ссылки в коде связываются с документацией по URL ссылке. Например "request" будет связан с "/examples/global/vars/request". В приведенном выше примере, ссылка URL обрабатывается через "vars" действием в контроллере "global.py", который распространяется как часть web2py приложения "examples".

Аргумент ``counter`` используется для нумерации строк. Он может быть установлен в любом из трех различных значений. Это может быть ``None`` при отсутствии номеров строки, числовым значением, определяющим начальный номер или строку. Если счетчик установлен в string, то он интерпретируется как подсказка, и нет имеет номеров строки.

Аргумент ``styles`` немного сложнее. Если вы посмотрите на сгенерированный выше HTML-код, то он содержит таблицу с двумя столбцами, и каждый столбец имеет свой собственный стиль, объявленный внутри строк с помощью CSS. Атрибуты ``styles`` позволяют переопределить эти два стиля CSS. Например:

``
{{=CODE(...,styles={'CODE':'margin: 0;padding: 5px;border: none;'})}}
``:code

Атрибут ``styles`` должен быть словарем, и он допускает два возможных ключа: ``CODE`` для стиля актуального кода, и ``LINENUMBERS`` для стиля в левой колонке, которая содержит номера строк. Имейте ввиду, что эти стили полностью заменяют стандартные стили, а не просто добавляются к ним.

#### ``COL``
``COL``:inxx

``
>>> print COL('a','b')
<col>ab</col>
``:code

#### ``COLGROUP``
``COLGROUP``:inxx

``
>>> print COLGROUP('a','b')
<colgroup>ab</colgroup>
``:code

#### ``DIV``
Все помощники, кроме ``XML``, являются производными от ``DIV`` и наследуют его основные методы.

``DIV``:inxx
``
>>> print DIV('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<div id="0" class="test">&lt;hello&gt;<b>world</b></div>
``:code

#### ``EM``

Подчеркивает свое содержимое.

``EM``:inxx
``
>>> print EM('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<em id="0" class="test">&lt;hello&gt;<b>world</b></em>
``:code

#### ``FIELDSET``
``FIELDSET``:inxx

Используется для создания поля ввода вместе с пометкой (label).
``
>>> print FIELDSET('Height:', INPUT(_name='height'), _class='test')
<fieldset class="test">Height:<input name="height" /></fieldset>
``:code

#### ``FORM``
``FORM``:inxx

Это один из наиболее важных помощников. В простой форме, он просто создает тэг ``<form>...</form>``, но поскольку помощники являются объектами и имеют знания о том, что они содержат, то они могут обрабатывать предоставленные формы (например, выполнить проверку полей). Этот вопрос будет обсуждаться подробно в Главе 7.
``
>>> print FORM(INPUT(_type='submit'), _action='', _method='post')
<form enctype="multipart/form-data" action="" method="post">
<input type="submit" /></form>
``:code

Атрибут "enctype" явялется "multipart/form-data" по умолчанию.

``hidden``:inxx
Конструктор от ``FORM``, и от ``SQLFORM``, также может принимать специальный аргумент с именем ``hidden``. Когда словарь передается как ``hidden``, то его элементы переводятся в "скрытые" поля ввода (INPUT fields). Например:
``
>>> print FORM(hidden=dict(a='b'))
<form enctype="multipart/form-data" action="" method="post">
<input value="b" type="hidden" name="a" /></form>
``:code

#### ``H1``, ``H2``, ``H3``, ``H4``, ``H5``, ``H6``
``H1``:inxx

Это помощники для заголовков и подзаголовков параграфа:
``
>>> print H1('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<h1 id="0" class="test">&lt;hello&gt;<b>world</b></h1>
``:code

#### ``HEAD``

Для тэга HEAD в HTML странице.

``HEAD``:inxx
``
>>> print HEAD(TITLE('<hello>', XML('<b>world</b>')))
<head><title>&lt;hello&gt;<b>world</b></title></head>
``:code

#### ``HTML``
``HTML``:inxx ``XHTML``:inxx

Этот помощник немного отличается. В дополнение к созданию ``<HTML>`` тегов, он помещает тэг со строкой типа документа doctype ``xhtml-w,xhtml-o,xhtml-school``:cite .
``
>>> print HTML(BODY('<hello>', XML('<b>world</b>')))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
                      "http://www.w3.org/TR/html4/loose.dtd">
<html><body>&lt;hello&gt;<b>world</b></body></html>
``:code

Помощник HTML также принимает некоторые дополнительные необязательные аргументы, которые имеют следующие значения по умолчанию:
``
HTML(..., lang='en', doctype='transitional')
``:code

где doctype может быть 'strict', 'transitional', 'frameset', 'html5', или полная строка doctype.

#### ``XHTML``
``XHTML``:inxx

XHTML похож на HTML, но он создает XHTML doctype  вместо этого.
``
XHTML(..., lang='en', doctype='transitional', xmlns='http://www.w3.org/1999/xhtml')
``:code

где doctype может быть 'strict', 'transitional', 'frameset', или полная строка doctype.

#### ``HR``
``HR``:inxx

Этот помощник создает горизонтальную строку в HTML-странице
``
>>> print HR()
<hr />
``:code

#### ``I``
``I``:inxx

Этот помощник делает свое содержимое курсивом.
``
>>> print I('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<i id="0" class="test">&lt;hello&gt;<b>world</b></i>
``:code

#### ``IFRAME``

Этот помощник включает в себя другую веб-страницу, на текущей странице. URL-адрес на другую страницу задается с помощью атрибута "_src".

``IFRAME``:inxx
``
>>> print IFRAME(_src='http://www.web2py.com')
<iframe src="http://www.web2py.com"></iframe>
``:code

#### ``IMG``
``IMG``:inxx

Он может быть использован для встраивания изображений в HTML:

``
>>> IMG(_src='http://example.com/image.png',_alt='test')
<img src="http://example.com/image.ong" alt="rest" />
``:code

Здесь сочетание из A, IMG и URL-помощников для включения статического изображения со ссылкой:

``
>>> A(IMG(_src=URL('static','logo.png'), _alt="My Logo"),
      _href=URL('default','index'))
<a href="/myapp/default/index">
  <img src="/myapp/static/logo.png" alt="My Logo" />
</a>
``:code

#### ``INPUT``
``INPUT``:inxx

Создает тег ``<input.../>``. Тег ввода input не может содержать другие вложенные теги и поэтому закрывается через ``/>`` вместо ``>``. Тег ввода input имеет необязательный атрибут ``_type`` который может быть установлен в "text" (по умолчанию), "submit", "checkbox", или "radio".
``
>>> print INPUT(_name='test', _value='a')
<input value="a" name="test" />
``:code

Он также принимает необязательный специальный аргумент с именем "value", который отличается от "_value". "_value" устанавливает значение по умолчанию для поля ввода; "value" устанавливает текущее значение поля ввода. Для ввода типа "text", "value" переопределяет "_value" (тип "text" используется по умолчанию):
``
>>> print INPUT(_name='test', _value='a', value='b')
<input value="b" name="test" />
``:code

Для радио-кнопок, ``INPUT`` выборочно устанавливает атрибут "checked" (т.е. если его текущее значение "value" равно значению по умолчанию "_value"):

``radio``:inxx
``
>>> for v in ['a', 'b', 'c']:
>>>     print INPUT(_type='radio', _name='test', _value=v, value='b'), v
<input value="a" type="radio" name="test" /> a
<input value="b" type="radio" checked="checked" name="test" /> b
<input value="c" type="radio" name="test" /> c
``:code

а так же для флажков:

``checkbox``:inxx
``
>>> print INPUT(_type='checkbox', _name='test', _value='a', value=True)
<input value="a" type="checkbox" checked="checked" name="test" />
>>> print INPUT(_type='checkbox', _name='test', _value='a', value=False)
<input value="a" type="checkbox" name="test" />
``:code

#### ``LABEL``

Используется для создания тега пометки LABEL для INPUT поля.

``LABEL``:inxx
``
>>> print LABEL('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<label id="0" class="test">&lt;hello&gt;<b>world</b></label>
``:code

#### ``LEGEND``

Он используется для создания тега легенды legend для поля в форме.

``LEGEND``:inxx
``
>>> print LEGEND('Name', _for='myfield')
<legend for="myfield">Name</legend>
``:code

#### ``LI``

Он создает элемент списка и должен содержаться в ``UL`` или ``OL`` тегах.

``LI``:inxx
``
>>> print LI('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<li id="0" class="test">&lt;hello&gt;<b>world</b></li>
``:code

#### ``META``

Используется для построения ``META`` тегов в ``HTML`` заголовке. Например:

``META``:inxx
``
>>> print META(_name='security', _content='high')
<meta name="security" content="high" />
``:code

[[markmin_syntax]]
#### ``MARKMIN``

Реализует синтаксис markmin вики. Он преобразует входной текст в выходной HTML в соответствии с правилами, описанными в примере markmin ниже:

``MARKMIN``:inxx
``
>>> print MARKMIN("это **жирный** или ''курсивом'', а это [[ссылка http://web2py.com]]")
<p>это <b>жирный</b> или <i>курсивом</i>, а это <a href="http://web2py.com">ссылка</a></p>
``:code

Синтаксис markmin описан в этом файле, который поставляется с web2py:
``
http://127.0.0.1:8000/examples/static/markmin.html
``:code

Вы можете использовать markmin для генерации HTML, LaTeX и PDF-документов:

``
m = "Hello **world** [[link http://web2py.com]]"
from gluon.contrib.markmin.markmin2html import markmin2html
print markmin2html(m)
from gluon.contrib.markmin.markmin2latex import markmin2latex
print markmin2latex(m)
from gluon.contrib.markmin.markmin2pdf import markmin2pdf
print markmin2pdf(m) # requires pdflatex
``

(помощник ``MARKMIN`` является сокращением для ``markmin2html``)

Вот основной синтаксис праймера:

--------------------------------------------------
**Источник**                 | **Вывод**
``# Оглавление``                | **Оглавление**
``## Раздел``             | **Раздел**
``### Подраздел``         | **Подраздел**
``**Жирный**``               | **Жирный**
``''Курсив''``             | ''Курсив''
``!`!`дословный`!`!``       | ``дословный``
``http://google.com``      | http://google.com
``http://...`` | ``<a href="http://...">http:...</a>``
``http://...png`` | ``<img src="http://...png" />``
``http://...mp3`` | ``<audio src="http://...mp3"></audio>``
``http://...mp4`` | ``<video src="http://...mp4"></video>``
``qr:http://...`` | ``<a href="http://..."><img src="qr code"/></a>``
``embed:http://...`` | ``<iframe src="http://..."></iframe>``
``[[нажми меня #мойякорь]]`` | [[нажми меня #мойякорь]]
``[[мойякорь]]`` | Создание якоря для ссылки
``$````$\int_a^b sin(x)dx$````$``  | $$\int_a^b sin(x)dx$$
---------------------------------------------------

##### MARKMIN ссылки

Ссылки принимают эту форму: ``[[link display text <link>]]``
<link> может быть якорем, например ``#мойякорь``
или URI, например ``http://www.web2py.com``
или относительная ссылка, например ``[[Смотри главу ../08]]`` или ``[[Смотри главу 8 ../08#мойякорь]]``

Просто включаются ссылки на изображение, видео или аудио файлы без необходимости разметки результата в соответствующем изображения, видео или аудио файле, которая включается автоматически (для аудио и видео он использует HTML <audio> и <video> теги).

Добавление ссылки с префиксом ``qr:``, такой как

``
qr:http://web2py.com
``

Результаты в соответствующем QR-коде встраивают и связывают указанный URL.

Добавление ссылки с префиксом ``embed:``, такой как

``
embed:http://www.youtube.com/embed/x1w8hKTJ2Co
``

Результаты на странице будут внедрены, в этом случае видео YouTube является внедренным.

Изображения также могут быть внедрены со следующим синтаксисом:

``
[[image-description http://.../image.png right 200px]]
``

##### MARKMIN списки и таблицы

Неупорядоченные списки с:
``
- one
- two
- three
``

Упорядоченные списки с:
``
+ one
+ two
+ three
``

и таблицы с:
``
----------
 X | 0 | 0
 0 | X | 0
 0 | 0 | 1
----------
``

##### MARKMIN расширение
Синтаксис MARKMIN также поддерживает блоки цитат, аудио и видео теги HTML5, выравнивание изображения, пользовательские CSS, и он может быть расширен:

``
MARKMIN("!`!!`!abab!`!!`!:custom", extra=dict(custom=lambda text: text.replace('a','c'))
``:code

генерирует

``'cbcb'``:code

Пользовательские блоки разделяются ``!`!!`!...!`!!`!:<key>`` и они визуализируются через функцию, переданную в качестве значения соответствующего ключа в дополнительном словаре  аргумента MARKMIN. Имейте в виду, что может понадобиться экранирование вывода функции, чтобы предотвратить XSS.

#### ``OBJECT``

Используется для внедрения объектов (например, Flash Player) в HTML.

``OBJECT``:inxx
``
>>> print OBJECT('<hello>', XML('<b>world</b>'),
>>>              _src='http://www.web2py.com')
<object src="http://www.web2py.com">&lt;hello&gt;<b>world</b></object>
``:code

#### ``OL``

Это стойка для упорядоченных списков. Список должен содержать LI теги. Аргументы ``OL``, которые не являются ``LI`` объектами автоматически заключаются в ``<li>...</li>`` теги.

``OL``:inxx
``
>>> print OL('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<ol id="0" class="test"><li>&lt;hello&gt;</li><li><b>world</b></li></ol>
``:code

#### ``ON``

Используется для обратной совместимости, и является просто псевдонимом для ``True``. Он используется исключительно для флажков и является устаревшим, использование ``True`` является более Питоновским.

``ON``:inxx
``
>>> print INPUT(_type='checkbox', _name='test', _checked=ON)
<input checked="checked" type="checkbox" name="test" />
``:code

#### ``OPTGROUP``

Позволяет сгруппировать несколько опций в SELECT и пригодится для настройки полей с помощью CSS.

``OPTGROUP``:inxx
``
>>> print SELECT('a', OPTGROUP('b', 'c'))
<select>
  <option value="a">a</option>
  <optgroup>
    <option value="b">b</option>
    <option value="c">c</option>
  </optgroup>
</select>
``:code

#### ``OPTION``

Используется только как часть SELECT/OPTION комбинации.

``OPTION``:inxx
``
>>> print OPTION('<hello>', XML('<b>world</b>'), _value='a')
<option value="a">&lt;hello&gt;<b>world</b></option>
``:code

Как и в случае ``INPUT``, web2py проводить различие между "_value" (значением из OPTION), и "value" (текущим значением, заключенным в выборе). Если они равны, то опция помечается как выбиранная "selected".

``selected``:inxx
``
>>> print SELECT('a', 'b', value='b'):
<select>
<option value="a">a</option>
<option value="b" selected="selected">b</option>
</select>
``:code

#### ``P``
``P``:inxx

Используется для маркировки параграфа.
``
>>> print P('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<p id="0" class="test">&lt;hello&gt;<b>world</b></p>
``:code

#### ``PRE``
``PRE``:inxx

Генерирует тег ``<pre>...</pre>`` для отображения предварительно отформатированного текста. Помощник ``CODE``, как правило, предпочтительнее для листингов кода.
``
>>> print PRE('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<pre id="0" class="test">&lt;hello&gt;<b>world</b></pre>
``:code

#### ``SCRIPT``
``SCRIPT``:inxx

Включает или ссылается на скрипт, такой как JavaScript. Содержание между тегами отображается в виде HTML-комментария, в пользу действительно старых браузеров.
``
>>> print SCRIPT('alert("hello world");', _type='text/javascript')
<script type="text/javascript"><!--
alert("hello world");
//--></script>
``:code

#### ``SELECT``
``SELECT``:inxx

Создает тег ``<select>...</select>``. Это используется с ``OPTION`` помощником. Аргументы``SELECT``, которые не являются объектами ``OPTION`` автоматически преобразуются в параметры.
``
>>> print SELECT('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<select id="0" class="test">
   <option value="&lt;hello&gt;">&lt;hello&gt;</option>
   <option value="&lt;b&gt;world&lt;/b&gt;"><b>world</b></option>
</select>
``:code

#### ``SPAN``
``SPAN``:inxx

Подобно ``DIV``, но используется для обозначения содержания в строке (а не в блоке).
``
>>> print SPAN('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<span id="0" class="test">&lt;hello&gt;<b>world</b></span>
``:code

#### ``STYLE``
``STYLE``:inxx

Похож на скрипт, но используется чтобы либо включить код CSS, либо сослаться на код CSS.
Здесь CSS включается:
``
>>> print STYLE(XML('body {color: white}'))
<style><!--
body { color: white }
//--></style>
``:code

а здесь он ссылается:
``
>>> print STYLE(_src='style.css')
<style src="style.css"><!--
//--></style>
``:code

#### ``TABLE``, ``TR``, ``TD``
``TABLE``:inxx ``TR``:inxx ``TD``:inxx

Эти теги (наряду с дополнительным ``THEAD``, ``TBODY`` и ``TFOOTER`` помощниками) используются для создания HTML-таблиц.
``
>>> print TABLE(TR(TD('a'), TD('b')), TR(TD('c'), TD('d')))
<table><tr><td>a</td><td>b</td></tr><tr><td>c</td><td>d</td></tr></table>
``:code
``TR`` ожидает ``TD`` содержимое; аргументы, которые не являются ``TD`` объектами, автоматически преобразуются.
``
>>> print TABLE(TR('a', 'b'), TR('c', 'd'))
<table><tr><td>a</td><td>b</td></tr><tr><td>c</td><td>d</td></tr></table>
``:code

Легко преобразовать массив Python в HTML-таблицу с помощью обозначения ``*`` перед аргументом функции Python, которое сопоставляет элементы в списке с позициями аргументов функции.

Здесь, мы преобразуем построчно:
``
>>> table = [['a', 'b'], ['c', 'd']]
>>> print TABLE(TR(*table[0]), TR(*table[1]))
<table><tr><td>a</td><td>b</td></tr><tr><td>c</td><td>d</td></tr></table>
``:code

Здесь мы преобразуем все строки сразу:
``
>>> table = [['a', 'b'], ['c', 'd']]
>>> print TABLE(*[TR(*rows) for rows in table])
<table><tr><td>a</td><td>b</td></tr><tr><td>c</td><td>d</td></tr></table>
``:code

#### ``TBODY``
``TBODY``:inxx

Используется для разметки строк, содержащихся в теле таблицы, в отличие от строк верхнего или нижнего колонтитула. Это является необязательным.
``
>>> print TBODY(TR('<hello>'), _class='test', _id=0)
<tbody id="0" class="test"><tr><td>&lt;hello&gt;</td></tr></tbody>
``:code

#### ``TEXTAREA``
``TEXTAREA``:inxx

Этот помощник делает тег ``<textarea>...</textarea>``.
``
>>> print TEXTAREA('<hello>', XML('<b>world</b>'), _class='test')
<textarea class="test" cols="40" rows="10">&lt;hello&gt;<b>world</b></textarea>
``:code

Единственное ограничение в том, что его необязательный аргумент "value" перекрывает его содержимое (inner HTML)
``
>>> print TEXTAREA(value="<hello world>", _class="test")
<textarea class="test" cols="40" rows="10">&lt;hello world&gt;</textarea>
``:code

#### ``TFOOT``
``TFOOT``:inxx

Используется для разметки строк нижнего колонтитула таблицы.
``
>>> print TFOOT(TR(TD('<hello>')), _class='test', _id=0)
<tfoot id="0" class="test"><tr><td>&lt;hello&gt;</td></tr></tfoot>
``:code

#### ``TH``
``TH``:inxx

Используется вместо ``TD`` в заголовке таблицы.
``
>>> print TH('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<th id="0" class="test">&lt;hello&gt;<b>world</b></th>
``:code

#### ``THEAD``
``THEAD``:inxx

Используется для разметки строк заголовка таблицы.
``
>>> print THEAD(TR(TH('<hello>')), _class='test', _id=0)
<thead id="0" class="test"><tr><th>&lt;hello&gt;</th></tr></thead>
``:code

#### ``TITLE``
``TITLE``:inxx

Используется для разметки оглавления страницы в заголовке HTML.
``
>>> print TITLE('<hello>', XML('<b>world</b>'))
<title>&lt;hello&gt;<b>world</b></title>
``:code

#### ``TR``
``TR``:inxx

Метки строк таблицы. Они должны отображаться внутри таблицы и содержать теги ``<td>...</td>``. Аргументы ``TR``, которые не являются ``TD`` объектами автоматически преобразуются.
``
>>> print TR('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<tr id="0" class="test"><td>&lt;hello&gt;</td><td><b>world</b></td></tr>
``:code

#### ``TT``
``TT``:inxx

Теги текста пишущей машинки (моноширинный).
``
>>> print TT('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<tt id="0" class="test">&lt;hello&gt;<b>world</b></tt>
``:code

#### ``UL``

Обозначает неупорядоченный список и должен содержать элементы LI. Если его содержание не помечено как LI, то UL делает это автоматически.

``UL``:inxx
``
>>> print UL('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<ul id="0" class="test"><li>&lt;hello&gt;</li><li><b>world</b></li></ul>
``:code


#### ``URL``
Помощник URL описан в [[главе 4 URL ../04#URL]]

#### ``embed64``

``embed64(filename=None, file=None, data=None, extension='image/gif')`` энкодирует предоставленные (двоичные) данные в base64.

filename: если имеется, открывает и читает файл в режиме 'rb'.
file: если имеется, читает этот файл.
data: если имеется, использует указанные данные.

``embed64``:inxx

#### ``xmlescape``

``xmlescape(data, quote=True)`` возвращает экранированную строку из предоставленных данных.

``xmlescape``:inxx
``
>>> print xmlescape('<hello>')
&lt;hello&gt;
``:code

### Пользовательские помощники

#### ``TAG``
``TAG``:inxx

Иногда вам нужно создать пользовательские теги XML. web2py предоставляет ``TAG``, который является универсальным генератором тегов.
``
{{=TAG.name('a', 'b', _c='d')}}
``:code

генерирует следующий XML
``
<name c="d">ab</name>
``:code

Аргументы "a", "b", и "d" автоматически экранируются; используйте ``XML`` помощник, чтобы подавить это поведение. Используя ``TAG`` вы можете сгенерировать HTML/XML теги, которые не предоставляются API. Теги могут быть вложенными и сериализироваться через ``str().``
Эквивалентный синтаксис:
``
{{=TAG['name']('a', 'b', c='d')}}
``:code

If the TAG object is created with an empty name, it can be used to concatenate multiple strings and HTML helpers together without inserting them into a surrounding tag, but this use is deprecated. Use the ``CAT`` helper instead.

Self-closing tags can be generated with the TAG helper. The tag name must end with a "/".
``
{{=TAG['link/'](_href='http://web2py.com')}}
``:code
generates the following XML:
``
<link ref="http://web2py.com"/>
``:code
Notice that ``TAG`` is an object, and ``TAG.name`` or ``TAG['name']`` is a function that returns a temporary helper class.

#### ``MENU``
``MENU``:inxx

The MENU helper takes a list of lists or of tuples of the form of ``response.menu`` (as described in Chapter 4) and generates a tree-like structure using unordered lists representing the menu. For example:
``
>>> print MENU([['One', False, 'link1'], ['Two', False, 'link2']])
<ul class="web2py-menu web2py-menu-vertical">
  <li><a href="link1">One</a></li>
  <li><a href="link2">Two</a></li>
</ul>
``:code

------
The first item in each list/tuple is the text to be displayed for the given menu item.

The second item in each list/tuple is a boolean indicating whether that particular menu item is active
(i.e., the currently selected item). When set to True, the MENU() helper will add a "web2py-menu-active"
class to the <li> for that item (you can change the name of that class via the "li_active" argument to MENU
()). Another way to specify the active url is by directly passing it to MENU() via its "active_url" argument.

The third item in each list/tuple can be an HTML helper (which could include nested helpers), and the ``MENU`` helper will simply render that helper rather than creating its own ``<a>`` tag.
------

Each menu item can have a fourth argument that is a nested submenu (and so on recursively):
``
>>> print MENU([['One', False, 'link1', [['Two', False, 'link2']]]])
<ul class="web2py-menu web2py-menu-vertical">
  <li class="web2py-menu-expand">
     <a href="link1">One</a>
     <ul class="web2py-menu-vertical">
        <li><a href="link2">Two</a></li>
     </ul>
  </li>
</ul>
``:code

A menu item can also have an optional 5th element, which is a boolean. When false, the menu item is ignored by the MENU helper.

The MENU helper takes the following optional arguments:
- ``_class``: defaults to "web2py-menu web2py-menu-vertical" and sets the class of the outer UL elements.
- ``ul_class``: defaults to "web2py-menu-vertical" and sets the class of the inner UL elements.
- ``li_class``: defaults to "web2py-menu-expand" and sets the class of the inner LI elements.
- ``li_first``: allows to add a class to the first list element.
- ``li_last``: allows to add a class to the last list element.

``mobile``:inxx

``MENU`` takes an optional argument ``mobile``. When set to ``True`` instead of building a recursive ``UL`` menu structure it returns a ``SELECT`` dropdown with all the menu options and a ``onchange`` attribute that redirects to the page corresponding to the selected option. This is designed an an alternative menu representation that increases usability on small mobile devices such as phones.

Normally the menu is used in a layout with the following syntax:

``
{{=MENU(response.menu, mobile=request.user_agent().is_mobile)}}
``

In this way a mobile device is automatically detected and the menu is rendered accordingly.

### ``BEAUTIFY``
``BEAUTIFY`` is used to build HTML representations of compound objects, including lists, tuples and dictionaries:
``
{{=BEAUTIFY({"a": ["hello", XML("world")], "b": (1, 2)})}}
``:code
``BEAUTIFY`` returns an XML-like object serializable to XML, with a nice looking representation of its constructor argument. In this case, the XML representation of:
``
{"a": ["hello", XML("world")], "b": (1, 2)}
``:code

will render as:
``
<table>
<tr><td>a</td><td>:</td><td>hello<br />world</td></tr>
<tr><td>b</td><td>:</td><td>1<br />2</td></tr>
</table>
``:code

### Server-side ''DOM'' and parsing
``element``:inxx ``elements``:inxx

#### ``elements``

The DIV helper and all derived helpers provide the search methods ``element`` and ``elements``.

``element`` returns the first child element matching a specified condition (or None if no match).

``elements`` returns a list of all matching children.

**element** and **elements** use the same syntax to specify the matching condition, which allows for three possibilities that can be mixed and matched: jQuery-like expressions, match by exact attribute value, match using regular expressions.

Here is a simple example:
``
>>> a = DIV(DIV(DIV('a', _id='target',_class='abc')))
>>> d = a.elements('div#target')
>>> d[0][0] = 'changed'
>>> print a
<div><div><div id="target" class="abc">changed</div></div></div>
``:code

The un-named argument of ``elements`` is a string, which may contain: the name of a tag, the id of a tag preceded by a pound symbol, the class preceded by a dot, the explicit value of an attribute in square brackets.

Here are 4 equivalent ways to search the previous tag by id:
``
>>> d = a.elements('#target')
>>> d = a.elements('div#target')
>>> d = a.elements('div[id=target]')
>>> d = a.elements('div',_id='target')
``:code

Here are 4 equivalent ways to search the previous tag by class:
``
>>> d = a.elements('.abc')
>>> d = a.elements('div.abc')
>>> d = a.elements('div[class=abc]')
>>> d = a.elements('div',_class='abc')
``:code

Any attribute can be used to locate an element (not just ``id`` and ``class``), including multiple attributes (the function element can take multiple named arguments), but only the first matching element will be returned.

Using the jQuery syntax "div#target" it is possible to specify multiple search criteria separated by a comma:
``
>>> a = DIV(SPAN('a', _id='t1'), DIV('b', _class='c2'))
>>> d = a.elements('span#t1, div.c2')
``:code

or equivalently
``
>>> a = DIV(SPAN('a', _id='t1'), DIV('b', _class='c2'))
>>> d = a.elements('span#t1', 'div.c2')
``:code

If the value of an attribute is specified using a name argument, it can be a string or a regular expression:
``
>>> a = DIV(SPAN('a', _id='test123'), DIV('b', _class='c2'))
>>> d = a.elements('span', _id=re.compile('test\d{3}')
``:code

A special named argument of the DIV (and derived) helpers is ``find``. It can be used to specify a search value or a search regular expression in the text content of the tag. For example:
``
>>> a = DIV(SPAN('abcde'), DIV('fghij'))
>>> d = a.elements(find='bcd')
>>> print d[0]
<span>abcde</span>
``:code

or
``
>>> a = DIV(SPAN('abcde'), DIV('fghij'))
>>> d = a.elements(find=re.compile('fg\w{3}'))
>>> print d[0]
<div>fghij</div>
``:code

``components``:inxx
#### ``components`` 

Here's an example of listing all elements in an html string:
``
html = TAG('<a>xxx</a><b>yyy</b>')
for item in html.components: print item
``:code

``parent``:inxx ``sibling``:inxx
#### ``parent`` and ``siblings``
``parent`` returns the parent of the current element.
``
>>> a = DIV(SPAN('a'),DIV('b'))
>>> s = a.element('span')
>>> d = s.parent
>>> d['_class']='abc'
>>> print a
<div class="abc"><span>a</span><div>b</div></div>
>>> for e in s.siblings(): print e
<div>b</div>
``:code

#### Replacing elements

Elements that are matched can also be replaced or removed by specifying
the ``replace`` argument. Notice that a
list of the original matching elements is still returned as usual.

``
>>> a = DIV(SPAN('x'), DIV(SPAN('y'))
>>> b = a.elements('span', replace=P('z')
>>> print a
<div><p>z</p><div><p>z</p></div>
``:code

``replace`` can be a callable. In this case it will be passed
the original element and it is expected to return the replacement element:

``
>>> a = DIV(SPAN('x'), DIV(SPAN('y'))
>>> b = a.elements('span', replace=lambda t: P(t[0])
>>> print a
<div><p>x</p><div><p>y</p></div>
``:code

If ``replace=None``, matching elements will be removed completely.

``
>>> a = DIV(SPAN('x'), DIV(SPAN('y'))
>>> b = a.elements('span', replace=None)
>>> print a
<div></div>
``:code

``flatten``:inxx
#### ``flatten`` 


The flatten method recursively serializes the content of the children of a given element into regular text (without tags):
``
>>> a = DIV(SPAN('this', DIV('is', B('a'))), SPAN('test'))
>>> print a.flatten()
thisisatest
``:code

Flatten can be passed an optional argument, ``render``, i.e. a function that renders/flattens the content using a different protocol. Here is an example to serialize some tags into Markmin wiki syntax:
``
>>> a = DIV(H1('title'), P('example of a ', A('link', _href='#test')))
>>> from gluon.html import markmin_serializer
>>> print a.flatten(render=markmin_serializer)
# titles

example of [[a link #test]]
``:code

At the time of writing we provide ``markmin_serializer`` and ``markdown_serializer``.

#### Parsing

The TAG object is also an XML/HTML parser. It can read text and convert into a tree structure of helpers. This allows manipulation using the API above:
``
>>> html = '<h1>Title</h1><p>this is a <span>test</span></p>'
>>> parsed_html = TAG(html)
>>> parsed_html.element('span')[0]='TEST'
>>> print parsed_html
<h1>Title</h1><p>this is a <span>TEST</span></p>
``:code


``page layout``:inxx ``layout.html``:inxx ``extent``:inxx ``include``:inxx
### Page layout

Views can extend and include other views in a tree-like structure.

For example, we can think of a view "index.html" that extends "layout.html" and includes "body.html".
At the same time,  "layout.html" may include "header.html" and "footer.html".

The root of the tree is what we call a layout view.  Just like any other HTML template file, you can edit it using the web2py administrative interface. The file name "layout.html" is just a convention.

Here is a minimalist page that extends the "layout.html" view and includes the "page.html" view:

``
{{extend 'layout.html'}}
<h1>Hello World</h1>
{{include 'page.html'}}
``:code

The extended layout file must contain an ``{{include}}`` directive, something like:
``
<html>
  <head>
    <title>Page Title</title>
  </head>
  <body>
    {{include}}
  </body>
</html>
``:code

When the view is called, the extended (layout) view is loaded, and the calling view replaces the ``{{include}}`` directive inside the layout. Processing continues recursively until all ``extend`` and ``include`` directives have been processed. The resulting template is then translated into Python code. Note, when an application is bytecode compiled, it is this Python code that is compiled, not the original view files themselves. So, the bytecode compiled version of a given view is a single .pyc file that includes the Python code not just for the original view file, but for its entire tree of extended and included views.

-------
``extend``, ``include``, ``block`` and ``super`` are special template directives,
not Python commands.
-------

Any content or code that precedes the ``{{extend ...}}`` directive will be inserted (and therefore executed) before the beginning of the extended view's content/code. Although this is not typically used to insert actual HTML content before the extended view's content, it can be useful as a means to define variables or functions that you want to make available to the extended view. For example, consider a view "index.html":
``
{{sidebar_enabled=True}}
{{extend 'layout.html'}}
<h1>Home Page</h1>
``:code

and an excerpt from "layout.html":
``
{{if sidebar_enabled:}}
    <div id="sidebar">
        Sidebar Content
    </div>
{{pass}}
``:code

Because the ``sidebar_enabled`` assignment in "index.html" comes before the ``extend``, that line gets inserted before the beginning of "layout.html", making ``sidebar_enabled`` available anywhere within the "layout.html" code (a somewhat more sophisticated version of this is used in the **welcome** app).

It is also worth pointing out that the variables returned by the controller function are available not only in the function's main view, but in all of its extended and included views as well.

The argument of an ``extend`` or ``include`` (i.e., the extended or included view name) can be a python variable (though not a python expression). However, this imposes a limitation -- views that use variables in ``extend`` or ``include`` statements cannot be bytecode compiled. As noted above, bytecode-compiled views include the entire tree of extended and included views, so the specific extended and included views must be known at compile time, which is not possible if the view names are variables (whose values are not determined until run time). Because bytecode compiling views can provide a significant speed boost, using variables in ``extend`` and ``include`` should generally be avoided if possible.

In some cases, an alternative to using a variable in an ``include`` is simply to place regular ``{{include ...}}`` directives inside an ``if...else`` block.

``
{{if some_condition:}}
{{include 'this_view.html'}}
{{else:}}
{{include 'that_view.html'}}
{{pass}}
``:code

The above code does not present any problem for bytecode compilation because no variables are involved. Note, however, that the bytecode compiled view will actually include the Python code for both "this_view.html" and "that_view.html", though only the code for one of those views will be executed, depending on the value of ``some_condition``.

Keep in mind, this only works for ``include`` -- you cannot place ``{{extend ...}}`` directives inside ``if...else`` blocks.

``response.menu``:inxx ``menu``:inxx ``response.meta``:inxx ``meta``:inxx

Layouts are used to encapsulate page commonality (headers, footers, menus), and though they are not mandatory, they will make your application easier to write and maintain.  In particular, we suggest writing layouts that take advantage of the following variables that can be set in the controller. Using these well known variables will help make your layouts interchangeable:
``
response.title
response.subtitle
response.meta.author
response.meta.keywords
response.meta.description
response.flash
response.menu
response.files
``:code

Except for ``menu`` and ``files``, these are all strings and their meaning should be obvious.

``response.menu`` menu is a list of 3-tuples or 4-tuples. The three elements are: the link name, a boolean representing whether the link is active (is the current link), and the URL of the linked page. For example:
``
response.menu = [('Google', False, 'http://www.google.com',[]),
                 ('Index',  True,  URL('index'), [])]
``:code

``sub-menu``:inxx
The fourth tuple element is an optional sub-menu.

``response.files`` is a list of CSS and JS files that are needed by your page.

We also recommend that you use:

``
{{include 'web2py_ajax.html'}}
``:code

in the HTML head, since this will include the jQuery libraries and define some backward-compatible JavaScript functions for special effects and Ajax. "web2py_ajax.html" includes the ``response.meta`` tags in the view, jQuery base, the calendar datepicker, and all required CSS and JS ``response.files``.

#### Default page layout

``Twitter Bootstrap``:inxx

The "views/layout.html" that ships with the web2py scaffolding application **welcome** (stripped down of some optional parts) is quite complex but it has the following structure:

``
<!DOCTYPE html>
<head>
  <meta charset="utf-8" />
  <title>{{=response.title or request.application}}</title>
  ...
  <script src="{{=URL('static','js/modernizr.custom.js')}}"></script>

  {{
  response.files.append(URL('static','css/web2py.css'))
  response.files.append(URL('static','css/bootstrap.min.css'))
  response.files.append(URL('static','css/bootstrap-responsive.min.css'))
  response.files.append(URL('static','css/web2py_bootstrap.css'))
  }}

  {{include 'web2py_ajax.html'}}

  {{
  # using sidebars need to know what sidebar you want to use
  left_sidebar_enabled = globals().get('left_sidebar_enabled',False)
  right_sidebar_enabled = globals().get('right_sidebar_enabled',False)
  middle_columns = {0:'span12',1:'span9',2:'span6'}[
    (left_sidebar_enabled and 1 or 0)+(right_sidebar_enabled and 1 or 0)]
  }}

  {{block head}}{{end}}
</head>

<body>
  <!-- Navbar ================================================== -->
  <div class="navbar navbar-inverse navbar-fixed-top">
    <div class="flash">{{=response.flash or ''}}</div>
    <div class="navbar-inner">
      <div class="container">
        {{=response.logo or ''}}
        <ul id="navbar" class="nav pull-right">
          {{='auth' in globals() and auth.navbar(mode="dropdown") or ''}}
        </ul>
        <div class="nav-collapse">
          {{if response.menu:}}
          {{=MENU(response.menu)}}
          {{pass}}
        </div><!--/.nav-collapse -->
      </div>
    </div>
  </div><!--/top navbar -->

  <div class="container">
    <!-- Masthead ================================================== -->
    <header class="mastheader row" id="header">
        <div class="span12">
            <div class="page-header">
                <h1>
                    {{=response.title or request.application}}
                    <small>{{=response.subtitle or ''}}</small>
                </h1>
            </div>
        </div>
    </header>

    <section id="main" class="main row">
        {{if left_sidebar_enabled:}}
        <div class="span3 left-sidebar">
            {{block left_sidebar}}
            <h3>Left Sidebar</h3>
            <p></p>
            {{end}}
        </div>
        {{pass}}

        <div class="{{=middle_columns}}">
            {{block center}}
            {{include}}
            {{end}}
        </div>

        {{if right_sidebar_enabled:}}
        <div class="span3">
            {{block right_sidebar}}
            <h3>Right Sidebar</h3>
            <p></p>
            {{end}}
        </div>
        {{pass}}
    </section><!--/main-->

    <!-- Footer ================================================== -->
    <div class="row">
        <footer class="footer span12" id="footer">
            <div class="footer-content">
                {{block footer}} <!-- this is default footer -->
                ...
                {{end}}
            </div>
        </footer>
    </div>

  </div> <!-- /container -->

  <!-- The javascript =============================================
       (Placed at the end of the document so the pages load faster) -->
  <script src="{{=URL('static','js/bootstrap.min.js')}}"></script>
  <script src="{{=URL('static','js/web2py_bootstrap.js')}}"></script>
  {{if response.google_analytics_id:}}
    <script src="{{=URL('static','js/analytics.js')}}"></script>
    <script type="text/javascript">
    analytics.initialize({
      'Google Analytics':{trackingId:'{{=response.google_analytics_id}}'}
    });</script>
  {{pass}}
</body>
</html>
``:code

There are a few features of this default layout that make it very easy to use and customize:

- It is written in HTML5 and uses the "modernizr" ``modernizr``:cite library for backward compatibility. The actual layout include some extra conditional statements required by IE and they are omitted for brevity.
- It displays both ``response.title`` and ``response.subtitle`` which can be set in a model. If they are not set, it adopts the application name as title
- It includes the ``web2py_ajax.html`` file in the header which generated all the link and script import statements.
- It uses a modified version of Twitter Bootstrap for flexible layouts which works on mobile devices and re-arranges columns to fit small screens.
- It uses "analytics.js" to connect to Google Analytics.
- The ``{{=auth.navbar(...)}}`` displays a welcome to the current user and links to the auth functions like login, logout, register, change password, etc. depending on context. It is a helper factory and its output can be manipulated as any other helper. It is placed in a ``{{try:}}...{{except:pass}}`` in case auth is undefined.
- The ``{{=MENU(response.menu)}}`` displays the menu structure as ``<ul>...</ul>``.
- ``{{include}}`` is replaced by the content of the extending view when the page is rendered.
- By default it uses a conditional three column (the left and right sidebars can be turned off by the extending views)
- It uses the following classes: header, main, footer
- It contains the following blocks: statusbar, left_sidebar, center, right_sidebar, footer.

In views, you can turn on and customize sidebars as follows:

``
{{left_sidebar_enable=True}}
{{extend 'layout.html'}}

This text goes in center

{{block left_sidebar}}
This text goes in sidebar
{{end}}
``:code

#### Customizing the default layout

``CSS``:inxx

Customizing the default layout without editing is easy because the welcome application is based on Twitter Bootstrap which is well documented and supports themes. In web2py four static files which are relevant to style:

- "css/web2py.css" contains web2py specific styles
- "css/bootstrap.min.css" contains the Twitter Bootstrap CSS style ``bootstrap``:cite ``Bootstrap``:inxx
- "css/web2py_bootstrap.css" contains with overrides some Bootstrap styles to conform to web2py needs.
- "js/bootstrap.min.js" which includes the libraries for menu effects, modals, panels.

To change colors and background images,
try append the following code to layout.html header:

``
<style>
body { background: url('images/background.png') repeat-x #3A3A3A; }
a { color: #349C01; }
.header h1 { color: #349C01; }
.header h2 { color: white; font-style: italic; font-size: 14px;}
.statusbar { background: #333333; border-bottom: 5px #349C01 solid; }
.statusbar a { color: white; }
.footer { border-top: 5px #349C01 solid; }
</style>
``:code

Of course you can also completely replace the "layout.html" and "web2py.css" files with your own.

#### Mobile development

The default layout.html is designed to be friendly to mobile devices but that is not enough. One may need to use different views when a page is visited by a mobile device.

To make developing for desktop and mobile devices easier, web2py includes the ``@mobilize`` decorator. This decorator is applied to actions that should have a normal view and a mobile view. This is demonstrated here:

``
from gluon.contrib.user_agent_parser import mobilize
@mobilize
def index():
   return dict()
``

Notice that the decorator must be imported before using it in a controller.
When the "index" function is called from a regular browser (desktop computer), web2py will render the returned dictionary using the view "[controller]/index.html". However, when it is called by a mobile device, the dictionary will be rendered by "[controller]/index.mobile.html". Notice that mobile views have the "mobile.html" extension.

Alternatively you can apply the following logic to make all views mobile friendly:

``
if request.user_agent().is_mobile:
    response.view.replace('.html','.mobile.html')
``

The task of creating the "*.mobile.html" views is left to the developer but we strongly suggest using the "jQuery Mobile" plugin which makes the task very easy.

### Functions in views

Consider this "layout.html":

``
<html>
  <body>
    {{include}}
    <div class="sidebar">
      {{if 'mysidebar' in globals():}}{{mysidebar()}}{{else:}}
        my default sidebar
      {{pass}}
    </div>
  </body>
</html>
``:code

and this extending view

``
{{def mysidebar():}}
my new sidebar!!!
{{return}}
{{extend 'layout.html'}}
Hello World!!!
``:code

Notice the function is defined before the ``{{extend...}}`` statement -- this results in the function being created before the "layout.html" code is executed, so the function can be called anywhere within "layout.html", even before the ``{{include}}``. Also notice the function is included in the extended view without the ``=`` prefix.

The code generates the following output:

``
<html>
  <body>
    Hello World!!!
    <div class="sidebar">
        my new sidebar!!!
    </div>
  </body>
</html>
``:code

Notice that the function is defined in HTML (although it could also contain Python code) so that ``response.write`` is used to write its content (the function does not return the content). This is why the layout calls the view function using ``{{mysidebar()}}`` rather than ``{{=mysidebar()}}``. Functions defined in this way can take arguments.

``block``:inxx
### Blocks in views

The main way to make a view more modular is by using ``{{block...}}s`` and this mechanism is an alternative to the mechanism discussed in the previous section.

To understand how this works, consider apps based on the scaffolding app Welcome, which has a view layout.html. This view is included into the view ``default/index.html`` via ``{{extend 'layout.html'}}``. The contents of layout.html predefine certain blocks with certain default content, and these are therefore included into default/index.html.

You can override these default content blocks by enclosing your new content inside the same block name. The location of the block in the layout.html is not changed, but the contents is. 

Here is a simplifed version. Imagine this is  "layout.html":

``
<html>
  <body>
    {{include}}
    <div class="sidebar">
      {{block mysidebar}}
        my default sidebar (this content to be replaced)
      {{end}}
    </div>
  </body>
</html>
``:code

and this is a simple extending view ``default/index.html``:

``
{{extend 'layout.html'}}
Hello World!!!
{{block mysidebar}}
my new sidebar!!!
{{end}}
``:code

It generates the following output, where the content is provided by the over-riding block in the extending view, yet the enclosing DIV and class comes from layout.html. This allows consistency across views:

``
<html>
  <body>
    Hello World!!!
    <div class="sidebar">
        my new sidebar!!!
    </div>
  </body>
</html>
``:code

The real layout.html defines a number of useful blocks, and you can easily add more to match the layout your desire. 

You can have many blocks, and if a block is present in the extended view but not in the extending view, the content of the extended view is used. Also, notice that unlike with functions, it is not necessary to define blocks before the ``{{extend ...}}`` -- even if defined after the ``extend``, they can be used to make substitutions anywhere in the extended view.

``super``:inxx

Inside a block, you can use the expression ``{{super}}`` to include the content of the parent. For example, if we replace the above extending view with:

``
{{extend 'layout.html'}}
Hello World!!!
{{block mysidebar}}
{{super}}
my new sidebar!!!
{{end}}
``:code

we get:

``
<html>
  <body>
    Hello World!!!
    <div class="sidebar">
        my default sidebar
        my new sidebar!!!
    </div>
  </body>
</html>
``:code
