96b8c924160e22ea18b8608f051af6b5483ac42d
diff --git a/sources/29-web2py-english/07.markmin b/sources/29-web2py-english/07.markmin
index b26be5b1dc2e788b90e546acbe5d61ac4c2633c9..fd144f277cf9fb28dca53bdf6c58944bd94cb5c7 100644
--- a/sources/29-web2py-english/07.markmin
+++ b/sources/29-web2py-english/07.markmin
@@ -147,9 +147,9 @@ the latter does not need the ``request`` and ``session`` arguments (although you
 
 The process function takes some extra argument that ``accepts`` does not take:
 - ``message_onsuccess``
-- ``onsuccess``: if equal to 'flash' (default) and the form is accepted it will flash the above `message_onsuccess``
+- ``onsuccess``: if equal to 'flash' (default) and the form is accepted it will flash the above ``message_onsuccess``
 - ``message_onfailure``
-- ``onfailure``: if equal to 'flash' (default) and the form fails validation, it will flash the above `message_onfailure``
+- ``onfailure``: if equal to 'flash' (default) and the form fails validation, it will flash the above ``message_onfailure``
 - ``next`` indicates where to redirect the user after the form is accepted.
 ``onsuccess`` and ``onfailure`` can be functions like ``lambda form: do_something(form)``.
 
@@ -251,6 +251,8 @@ def edit_dog():
     return dict(form=form)
 ``:code
 
+``record_changed`` works only with a SQLFORM and not with a FORM.
+
 #### Forms and redirection
 
 The most common way to use forms is via self-submission, so that the submitted field variables are processed by the same action that generated the form. Once the form is accepted, it is unusual to display the current page again (something we are doing here only to keep things simple). It is more common to redirect the visitor to a "next" page.
diff --git a/sources/29-web2py-english/08.markmin b/sources/29-web2py-english/08.markmin
index a9e6193e7079f6220e62ee7f6977a93a882ca384..67fc2f5c7e9e93dc6c9524d6281687c06a001a32 100644
--- a/sources/29-web2py-english/08.markmin
+++ b/sources/29-web2py-english/08.markmin
@@ -296,7 +296,7 @@ Note that ``<imapdb>.define_tables()`` returns a dictionary of strings mapping D
 If you want to set you own tablename/mailbox configuration and skip the automatic name configuration, you can pass a custom dictionary to the adapter in this way:
 
 ``
-imapdb.define_tables({"inbox": "MAILBOX", "trash", "SPAM"})
+imapdb.define_tables({"inbox":"MAILBOX", "trash":"SPAM"})
 ``:code
 
 To handle the different native mailbox names for the user interface,  the following attributes give access to the adapter auto mailbox mapped names (which native mailbox has what table name and vice versa):
diff --git a/sources/29-web2py-english/11.markmin b/sources/29-web2py-english/11.markmin
index d99f996ed9a1a34fa1bcc58d0d4bfe91227ba316..1b6117e15f700af3ae111d9df5b73445d49a714d 100644
--- a/sources/29-web2py-english/11.markmin
+++ b/sources/29-web2py-english/11.markmin
@@ -333,7 +333,7 @@ jQuery(document).ready(function(){
    jQuery('input.delete').prop('onclick',
      'if(this.checked) if(!confirm(
         "{{=T('Sure you want to delete this object?')}}"))
-      this.checked=false;');
+      this.checked=False;');
 });
 ``:code
 
diff --git a/sources/29-web2py-english/14.markmin b/sources/29-web2py-english/14.markmin
index 3751629f19bc5c3cf60689ab7e9951ffc9269738..54f5b7aee622be1ce5ae2cb36e52feb831a06955 100644
--- a/sources/29-web2py-english/14.markmin
+++ b/sources/29-web2py-english/14.markmin
@@ -589,7 +589,9 @@ Create a file called "yourapp/private/dropbox.key" and in it write
 ``
 <APP_KEY>:<APP_SECRET>:app_folder
 ``
-where ``<APP_KEY>`` and ``<APP_SECRET>`` are your key and secret.
+where ``<APP_KEY>`` and ``<APP_SECRET>`` are your key and secret. The third part could be ``app_folder`` or ``dropbox`` or ``auto``.
+
+Install the dropbox sdk from "https://www.dropbox.com/developers/core/sdks/python".
 
 Then in "models/db.py" do:
 
