# Helping web2py: Bugs, enhancements and documentation

### Reporting Security Bugs
 ``reporting security bugs``:inxx
<TODO: is there a silent email address to report bugs to? >

### Reporting non-security Bugs
 ``reporting bugs``:inxx
Bugs should first be discussed on the Google group 
[[web2py-users https://groups.google.com/forum/#!forum/web2py]]
(URL is ``https://groups.google.com/forum/#!forum/web2py``)
All the core developers are very active in this group.
It's important to indicate which version of web2py you are using, which operating system you are using, and which database backend. 

#### Filing a bug report via Google Code
If you have found a bug and discussed it on the group, you may be requested to file a bug report by creating an 'Issue' on Google Code
http://code.google.com/p/web2py/issues/

### Contributing code and documentation changes

#### How the project code is managed
The web2py code-base is managed in a github repository.
web2py has two active versions: the current stable version, and the development snapshot. In git the development snapshot is usually referred to as "master", but the web2py project uses the equivalent term "trunk".

Bug fixes and enhancements go into trunk, so to take quick advantage of a bug fix you will need to use trunk. 
The best way to do this is to clone the git repository. This is the first step when using code stored on github, and is well documented there. Because releases are tagged, you can switch between the trunk branch (which is 'master') and the current release (or any release). The core git skills you will need are:
1. cloning a repository hosted on github
2. Checkout out the master branch
3. checking out a branch based on a tag

#### Discussing proposed changes
If the change relates to a bug, the discussion will probably occur on the Issue on Google Code (see above). 
If the change related to an enhancement, the developers group is the best place initially: [[web2py-developers group https://groups.google.com/forum/#!forum/web2py-developers]]
(URL is ``https://groups.google.com/forum/#!forum/web2py-developers``)

Many users have successfully contributed to the project. Because web2py promises backwards compatability for non-experiemental ffeatures, accepting a change into the code base is a promise of maintenance to future users, and this is not a promise than can be made lightly. Less experienced users may discover via discussion that there is an existing method to achieve what they want; unfortunately, the documentation of power features sometimes lags (see improving the documentation below).

When you ready to submit a code change, discussion will probably move to the comments attached to the Pull Request (discussed below).

#### Coding style
 ``coding style``:inxx
Generally, follow PEP8 coding style. http://www.python.org/dev/peps/pep-0008/ 
#### Tips on setting up a development environment 
Chapter 13 has some tips on using various IDEs with web2py.

#### Preparation: using github
 ``patches``:inxx
 ``github``:inxx

Since web2py uses github, the overall flow of changes goes like this:
1. You create a clone of web2py on github, which github calls "forking".
2. You create a clone of your web2py 'fork' on your local machine (or whereever you want to make changes)
3. You push your changes back to your github fork
4. You make a pull request via github 
5. If your pull request is accepted, your commit will be in the master branch of web2py.

At the time of writing, the core git/github techniques are covered here:
https://help.github.com/articles/fork-a-repo

However, you need to follow the instructions below on how to create patches will can be cleanly merged.

#### Preparation: using travis with your github fork
 ``travis``:inxx
web2py works with travis, a continuous integration testing service. This means that a commit will trigger all the integrated tests to run. You can add travis to your own respository to avoid sending patches which will fail travis testing upstream. 

Follow the instructions here:
http://about.travis-ci.org/docs/user/getting-started/

### The three parts of a good quality enhancement
A high-quality enhancement has three parts:
1. The code change
2. Testing for the new functionality
3. Updating the book (which is also maintained in github)

#### Ensuring a clean patch: using the correct git branch technique

However, there are some specific guidelines to follow to make sure your pull request can be applied cleanly. 

Firstly, make sure you have a remote repository linked to the main web2py github repository. Your remote repository should be called upstream. You only need to do this once. Adding an upstream repository is covered by the introductory github article linked above, but in case you missed it, you can add upstream like this:
``
git remote add upstream https://github.com/web2py/web2py/
``:code

Next you need a branch name. Recommended is to choose a name like this:
- every bug-fixing commit should come from a branch named "issue/number_of_the_issue_on_google_code" (like issue/1684)
- every enhancement commit should come in a branch named "enhancement/title_of_the_enhancement" (like enhancement/trapped_links)

In your local environment, checkout the branch for your changes:
Substitute CHANGE1 for your branch name.
``
git fetch upstream
git checkout -b CHANGE1 upstream/master
``:code

... Make changes or cherry pick from another local branch. commit if necessary. 
When you are ready to send your local changes to your web2py fork:

``
git push origin CHANGE1
``:code

<TODO insert note about collapsing several commits into one commit>

and now go the github website, change to the new branch and do a pull request. 
GitHub has a "delete branch" button after your pull request is merged or closed. 

#### Adding tests
 ``code tests``:inxx
Unit tests should be added when an enhancement changes or adds functionality.
Tests are python scripts contained in gluon/tests
Copy the approach of existing tests. You will notice that tests often need to create something such as table, perform a test of the functionality and check the outcome, and then return the state do before the test (which in this case would mean dropping the table).

#### Updating the book
The book is also in github and the same git workflow can be used.
The book source contains sources in various languages. The content is written in markmin.
<TO DO>
