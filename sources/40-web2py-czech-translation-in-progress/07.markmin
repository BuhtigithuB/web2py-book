## Formuláře a validátory

Existují 4 způsoby, jak ve Web2py vytvářet formuláře:
- ``FORM`` je low-level implementace v souvislosti s ostatními HTML helpery (třídami pro renderování HTML elementů). ``FORM`` objekt může být serializován do HTML a spolupracuje s do něj vloženými poli. Dokáže validovat zadané (submitted) hodnoty.
- ``SQLFORM`` je high-level rozhraní (API) k vytváření formulářů pro přidání, aktualizaci a rušení záznamů z existujících databázových tabulek.
- ``SQLFORM.factory`` je abstrakce nad ``SQLFORM-em`` za účelem využití jeho výhod i pro případ, kdy nepracujeme s daty z databáze. Generuje tedy formulář velice podobný ``SQLFORM-u``, a to ze zadané definice dat, která je podobná definici tabulky v modelu, ale žádnou skutečnou tabulku nevytváří.
- ``CRUD`` metody. Jejich funkčnost je identická se SQLFORM a jsou založeny na SQLFORM. Poskytují poněkud kompaktnější zápis.

Všechny tyto formuláře se samy modifikují na základě zaávání dat. Pokud vstup neprojde validací, formulář se sám modifikuje přidáním chybových hlášení. Lze zjišťovat jednotlivé zadané údaje a výsledky a hlášení validace.

Do formuláře lze vložit nebo z něj získat jakýkoli HTML kód pomocí helperů.

``FORM`` a ``SQLFORM`` jsou helpery a můžete s nimi tedy zacházet velmi podobně jako s ``DIV`` helperem. Např. můžete nastavit styl takto:

``
form = SQLFORM(..)
form['_style'] = 'border:1px solid black'
``:code

### ``FORM``
``form``:inxx ``accepts``:inxx ``formname``:inxx

Uvažujme pro příklad aplikaci **test** s následujícím kontrolérem "default.py":
``
def display_form():
    return dict()
``:code

a s odpovídající "default/display_form.html" šablonou (view):
``
{{extend 'layout.html'}}
<h2>Vstupní formulář</h2>
<form enctype="multipart/form-data"
      action="{{=URL()}}" method="post">
Vaše jméno:
<input name="name" />
<input type="submit" />
</form>
<h2>Zadané údaje</h2>
{{=BEAUTIFY(request.vars)}}
``:code

To je běžný HTML formulář, který zjišťuje jméno uživatele. Jakmile zadáte jméno a odešlete data z prohlížeče (stisknete tlačítko submit), formulář předá data a proměnná ``request.vars.name`` se zadaným jménem se zobrazí pod formulářem.

Místo přímo pomocí HTML můžete stejný formulář vytvořit za pomoci helperů. To můžete provést buď v akci kontroléru nebo až v šabloně. Web2py zpracovává formuláře v akcích kontroléru, takže je lepší i přímo tam formulář vytvořit.

Kontrolér bude vypadat takto:
``
def display_form():
   form=FORM('Vaše jméno:', INPUT(_name='name'), INPUT(_type='submit'))
   return dict(form=form)
``:code

a odpovídající šablona "default/display_form.html":
``
{{extend 'layout.html'}}
<h2>Vstupní formulář</h2>
{{=form}}
<h2>Zadané údaje</h2>
{{=BEAUTIFY(request.vars)}}
``:code

Kód je ekvivalentní předchozímu, ale formulář je vygenerován příkazem ``{{=form}}``, který serializuje objekt ``FORM``.

Nyní přidáme další vlastnost a sice validaci dat a jejich zpracování.

Změníme kontrolér takto:
``
def display_form():
    form=FORM('Vaše jméno:',
              INPUT(_name='name', requires=IS_NOT_EMPTY()),
              INPUT(_type='submit'))
    if form.accepts(request,session):
        response.flash = 'formulář úspěšně zpracován'
    elif form.errors:
        response.flash = 've formuláři jsou chyby'
    else:
        response.flash = 'prosím, vyplň formulář'
    return dict(form=form)
``:code

a šablonu "default/display_form.html":
``
{{extend 'layout.html'}}
<h2>Vstupní formulář</h2>
{{=form}}
<h2>Zadané údaje</h2>
{{=BEAUTIFY(request.vars)}}
<h2>Zpracované údaje</h2>
{{=BEAUTIFY(form.vars)}}
<h2>Chyby ve formuláři</h2>
{{=BEAUTIFY(form.errors)}}
``:code

Všimněte si, že:
- V akci jsme přidali validátor ``requires=IS_NOT_EMPTY()`` k poli "name".
- V akci jsme přidali volání ``form.accepts(..)``
- Kromě formuláře a ``request.vars`` vypisujeme šablonou také ``form.vars`` a ``form.errors``.

Všechnu práci udělá metoda ``accepts`` objektu ``form``. Zpracuje ``request.vars`` podle požadavků (které jsou vyjádřeny pomocí validátorů). ``accepts`` uloží proměnné po validaci do ``form.vars``. Jestliže pole nesplňuje validační požadavek, příslušný validátor vrátí chybu a tato chyba je přidána do ``form.errors``. Obojí ``form.vars`` i ``form.errors`` jsou objekty ``gluon.storage.Storage`` podobné objektu ``request.vars``. První obsahuje hodnoty, zpracované ve validaci, například:
``
form.vars.name = "Max"
``:code

Druhý z nich obsahuje chyby:
``
form.errors.name = "Cannot be empty!"
``:code

Úplná signatura metody ``accepts`` je následující:
``onvalidation``:inxx
``
form.accepts(vars, session=None, formname='default',
             keepvalues=False, onvalidation=None,
             dbio=True, hideerror=False):
``:code

Význam volitelných parametrů bude vysvětlen v dalším oddíle.

První argument může být ``request.vars`` nebo ``request.get_vars`` nebo ``request.post_vars`` nebo jen ``request``. Poslední varianta je ekvivalentní volání s ``request.post_vars``.

Metoda ``accepts``  vrátí ``True``, když je formulář akceptován (úspěšně prošly validace), jinak vrátí ``False``. Formulář není akceptován, když jsou v něm chyby nebo nebyl potvrzen (submitted) (např. když je zobrazen poprvé).

Takto tedy stránka vypadá při prvním zobrazení (po navigaci na adresu (localhost:8000/)test/default/display_form):

[[image @///image/en5800.png center 300px]]

Takto vypadá po zadání s chybami:

[[image @///image/en5900.png center 300px]]

A nakonec po potvrzení správných dat:

[[image @///image/en6000.png center 300px]]

#### Metody ``process`` a ``validate``

Zkratka pro
``
form.accepts(request.post_vars, session, ...)
``:code
je
``
form.process(...).accepted
``:code
Druhá verze nevyžaduje argumenty ``request`` a ``session`` (i když jako nepovinné je můžete uvést). Od ``accepts`` se také liší tím, že návratová hodnota metody ``process`` je formulář (objekt formuláře). Vnitřně ``process`` volá ``accepts`` a předá mu své argumenty. Návratová hodnota ``accepts`` se uloží do ``form.accepted``.

Metoda ``process`` má navíc parametry, které ``accepts`` nemá:
- ``message_onsuccess``
- ``onsuccess``: jestliže je nastaveno na 'flash' a data vyhoví validaci, zobrazí hlášení ``message_onsuccess``
- ``message_onfailure``
- ``onfailure``: jestliže je nastaveno na 'flash' a selže validace, zobrazí hlášení ``message_onfailure``
- ``next`` udává adresu (url), kam bude uživatel přesměrován po úspěšném zpracování
``onsuccess`` a ``onfailure`` mohou místo defaultního nastavení být funkce: ``lambda form: neco_proved(form)``.

``
form.validate(...)
``:code

je zkratka pro

``
form.process(..., dbio=False).accepted
``:code

#### Skrytá (hidden) pole

Když je formulář serializován pomocí ``{{=form}}`` a protože předem byla zavolána metoda ``accepts``, bude nyní vypadat takto:
``
<form enctype="multipart/form-data" action="" method="post">
Vaše jméno:
<input name="name" />
<input type="submit" />
<input value="783531473471" type="hidden" name="_formkey" />
<input value="default" type="hidden" name="_formname" />
</form>
``:code

Všimněte si dvou přidaných skrytých polí: "_formkey" a "_formname". Jejich přidání způsobilo volání metody ``accepts`` a hrají dvě různé a důležité role:
- Skryté pole "_formkey" je jednorázový token (ověřovací řetězec), který Web2py používá, aby se zabránilo opakovanému dvojímu potvrzení formuláře. Hodnota tohoto klíče je generována, když je formulář serializován a je uložena do ``session``. Při potvrzení formuláře se obě hodnoty musí shodovat, a pokud ne, ``accepts`` vrátí ``False`` bez vrácení chyb stejně jako v případě, že formulář ještě vůbec nebyl potvrzen/odeslán.
- Skryté pole "_formname" je generováno jako jméno formuláře, ale toto jméno je možné přepsat. Je potřeba pro případ, kdy stránka obsahuje a zpracovává více formulářů.
Dále mohou být zařazena další skrytá pole, pokud byla přidána pomocí ``FORM(.., hidden=dict(...))``.

Použití těchto skrytých polí ve stránkách s několika formuláři současně bude probráno podrobněji později v této kapitole.

Když odešleme pokusný formulář s prázdným polem "name", neprojde validací. Poté se serializuje poněkud odlišně:
``
<form enctype="multipart/form-data" action="" method="post">
Vaše jméno:
<input value="" name="name" />
<div class="error">cannot be empty!</div>
<input type="submit" />
<input value="783531473471" type="hidden" name="_formkey" />
<input value="default" type="hidden" name="_formname" />
</form>
``:code

Všimněte si, že přibyl DIV s css třídou "error". Web2py vloží chybové hlášení do formuláře, aby uživatele upozornilo na nesprávně vyplněný údaj. Metoda ``accepts`` po takovém odeslání dat formuláře zjistí, že formulář byl potvrzen/odeslán, zjistí, že pole "name" navyhovělo validaci, a vloží chybové hlášení z validátoru do formuláře.

Od hlavní šablony "layout.html" se očekává, že zpracuje DIVy se třídou "error". Defaultní obsah souboru "layout.html" to řeší jQuery efekty, kdy chybové hlášení vyjede směrem dolů na červeném pozadí. Další podrobnosti můžete zjistit v kapitole 11.

#### ``keepvalues``

``keepvalues``:inxx

Volitelný argument ``keepvalues`` se týká případu, kdy data formuláře pro přidání nového záznamu jsou akceptována a nepřesměrujete na jinou (následující) URL, takže se tentýž formulář zobrazí znovu. Defaultně jsou údaje smazány a zobrazí se prázdné. Jestliže nastavíme ``keepvalues`` na ``True``, formulář se předvyplní naposledy zadanými hodnotami. To je užitečné tehdy, když se pomocí formuláře má zadávat více podobných záznamů.

#### ``dbio``

Jestliže je ``dbio`` argument nastaven na ``False``, Web2py neprovede po akceptování formuláře fyzické změny (insert/update) v databázi.

#### ``hideerror``

Jestliže nastavíte ``hideerror`` na ``True``, pak formulář nezobrazí chyby, které byly zjištěny ve validaci. Je pak na vás, abyste nějakým způsobem zpracovali a zobrazili ``form.errors``.

#### ``onvalidation``

Argument ``onvalidation`` může být ``None`` nebo to může být funkce, která jako argument vezme objekt formuláře a nevrátí nic. Taková funkce se zavolá (a předá se jí, jak bylo řečeno, jako argument objekt formuláře) ihned poté, kdy proběhla validace (pokud byla úspěšná). Funkci lze použít různými způsoby. Např. můžete provést další kontroly nad formulářem a případně přidat další chyby k těm, které byly zjištěny pomocí standardní validace. Dále je možné vypočíst hodnoty některých polí na základě jiných polí. Může být vyvolána nějaká akce (např. odeslání emailu) před tím, než dojde k aktualizaci záznamu.

Tady je příklad:
``
db.define_table('numbers',
    Field('a', 'integer'),
    Field('b', 'integer'),
    Field('c', 'integer', readable=False, writable=False))

def my_form_processing(form):
    c = form.vars.a * form.vars.b
    if c < 0:
       form.errors.b = 'součin a*b nesmí být záporný'
    else:
       form.vars.c = c

def insert_numbers():
   form = SQLFORM(db.numbers)
   if form.process(onvalidation=my_form_processing).accepted:
       session.flash = 'record inserted'
       redirect(URL())
   return dict(form=form)
``:code

#### Kontrola změny záznamu jiným uživatelem

Když editujetě záznam ve formuláři, je zde jistá, i když velmi nízká možnost, že by jiný uživatel v tu samou chvíli změnil editovaný záznam. Může být proto vhodné zjistit případný konflikt. Lze to udělat takto:

``
db.define_table('dog', Field('name'))

def edit_dog():
    dog = db.dog(request.args(0)) or redirect(URL('error'))
    form = SQLFORM(db.dog, dog)
    form.process(detect_record_change=True)
    if form.record_changed:
        # jiný změnil - udělej něco
    elif form.accepted:
        # akceptováno, nikdo nezměnil - udělej něco jiného
    else:
        # nic nedělat
    return dict(form=form)
``:code

#### Formuláře a přesměrování (redirect)

Standardní použití formulářů je se sebe-potvrzením (self-submission), takže potvrzené (odeslané) hodnoty údajů se zpracují na stejné adrese (stejnou akcí), která vystavila formulář. Jakmile je formulář akceptován, je sice možné zobrazit tutéž stránku znovu, ale není to obvyklé. (Pokud jsme to tak dělali v příkladech, tak jedině kvůli jednoduchosti ukázky.) Mnohem běžnější je přesměrovat uživatele na "další" ("next") stránku.

Tady to vidíme na příkladu:
``
def display_form():
    form = FORM('Vaše jméno:',
              INPUT(_name='name', requires=IS_NOT_EMPTY()),
              INPUT(_type='submit'))
    if form.process().accepted:
        session.flash = 'formulář úspěšně zpracován'
        redirect(URL('next'))
    elif form.errors:
        response.flash = 've formuláři jsou chyby'
    else:
        response.flash = 'prosím, vyplň formulář'
    return dict(form=form)

def next():
    return dict()
``:code

Jestliže chceme zobrazit flash hlášení až na následující straně (po redirekci), musíme použít ``session.flash`` místo ``response.flash``. Web2py tím získá hlášení ze session po redirekci, převede jej do ``response.flash`` a zobrazí. Pozor, pro použití přiřazení do ``session.flash`` nesmíte potlačovat práci se session pomocí ``session.forget()``.

#### Více formulářů na stránce

Obsah této sekce platí pro ``FORM`` i ``SQLFORM`` objekty.
Je možné zobrazit několik formulářů na stránce, ale musíte umožnit, aby bylo Web2py schopné je rozlišovat. Jestliže jsou vygenerovány pomocí ``SQLFORM`` z různých tabulek, dá jim Web2py unikátní jména automaticky. V opačném případě musíte nastavit unikátní jména explicitně. Příklad:
``
def two_forms():
    form1 = FORM(INPUT(_name='name', requires=IS_NOT_EMPTY()),
               INPUT(_type='submit'))
    form2 = FORM(INPUT(_name='name', requires=IS_NOT_EMPTY()),
               INPUT(_type='submit'))
    if form1.process(formname='form_one').accepted:
        response.flash = 'form one accepted'
    if form2.process(formname='form_two').accepted:
        response.flash = 'form two accepted'
    return dict(form1=form1, form2=form2)
``:code

což vytvoří tento výstup:

[[image @///image/en6100.png center 300px]]

Když uživatel potvrdí prázdný formulář form1, jen form1 zobrazí chyby; když uživatel potvrdí prázdný formulář form2, jen form2 zobrazí chyby.

#### Sdílení formulářů

Tento oddíl se opět týká i objektu ``FORM`` i ``SQLFORM`` objects. Co zde probíráme, se nedoporučuje, protože správný postup je vždy používat formuláře, které se samo-potvrzují ve stejné akci (self-submit). Někdy ale nemáte tu možnost, například v případě, když by akce, která vystaví formulář a akce, která jej zpracovává, patřily do dvou různých aplikací. Takové chování byste získali úpravou následujícího postupu:

Vytvořit formulář, který potvrzuje (submits) pomocí jiné akce je možné. Provedete to zadáním URL v atributech objektu ``FORM`` nebo ``SQLFORM``. Například:
``
form = FORM(INPUT(_name='name', requires=IS_NOT_EMPTY()),
        INPUT(_type='submit'), _action=URL('page_two'))

def page_one():
    return dict(form=form)

def page_two():
    if form.process(session=None, formname=None).accepted:
         response.flash = 'formulář byl zpracován'
    else:
         response.flash = 've formuláři byly chyby'
    return dict()
``:code

Všimněte si, že obě stránky, "page_one" i "page_two", používají tentýž ``form``. Definovali jsme ho jen jednou, tak, že jsme ho umístili mimo obě akce, abychom kód dvakrát neopakovali. Zde vidíme, že se úvodní část kódu v kontroléru provede pokaždé, a poté se předá řízení konkrétní akci.

Protože akce "page_one" nevolá ``process`` (ani ``accepts``), nemá formulář žádné jméno ani klíč a musíte zadat ``session=None`` a nastavit ``formname=None`` ve volání metody ``process``, jinak neproběhne validace poté, co jej obdrží druhá akce.

#### Přidání tlačítek do formuláře

Základní formulář má jediné tlačítko pro Odeslání (Submit). Často je potřeba přidat tlačítko "Zpět", které místo potvrzení formuláře směruje uživatele na jinou stránku.

``add_button``:inxx

Můžete využít metodu ``add_button``:

``
form.add_button('Zpět', URL('jina_akce'))
``:code

Opakovaným voláním můžete přidat více tlačítek. Argumentem metody ``add_button`` je value tlačítka (jeho text) a url, kam se přesměruje při stisknutí tlačítka.

#### Více o manipulaci s formuláři

Jak jsme ukázali v kapitole o šablonách (Views), FORM je HTML helper. S helpery můžeme manipulovat jako s jinými seznamy (lists) nebo slovníky (dictionaries) Pythonu, což umožňuje vytváření a modifikaci za běhu. (Pozn. překl.: více zde není uvedeno - zřejmě je potřeba nastavit bod přerušení (import pdb; pdb.set_trace()) a provést introspekci objektu (dir(form)).)

### ``SQLFORM``

Nyní půjdeme dále a přidáme další úroveň spoluprací formuláře s modelem:
``
db = DAL('sqlite://storage.sqlite')
db.define_table('person', Field('name', requires=IS_NOT_EMPTY(), label="Vaše jméno: "))
``:code

Změníme kontrolér takto:
``
def display_form():
    form = SQLFORM(db.person)
    if form.process().accepted:
        response.flash = 'formulář úspěšně zpracován'
    elif form.errors:
        response.flash = 've formuláři jsou chyby'
    else:
        response.flash = 'prosím, vyplň formulář'
    return dict(form=form)
``:code

Šablonu (view) ponecháme stejnou.

V novém kontroléru nemusíte sestavovat ``FORM``, protože volání ``SQLFORM`` formulář sestaví na základě tabulky ``db.person``, jak ji definoval model. Tento formulář bude po serializaci (voláním {{=form}} v šabloně) vypadat takto:
``
<form enctype="multipart/form-data" action="" method="post">
  <table>
    <tr id="person_name__row">
       <td><label id="person_name__label"
                  for="person_name">Vaše jméno: </label></td>
       <td><input type="text" class="string"
                  name="name" value="" id="person_name" /></td>
       <td></td>
    </tr>
    <tr id="submit_record__row">
       <td></td>
       <td><input value="Submit" type="submit" /></td>
       <td></td>
    </tr>
  </table>
  <input value="9038845529" type="hidden" name="_formkey" />
  <input value="person" type="hidden" name="_formname" />
</form>
``:code

Automaticky sestavený formulář je trochu složitější než ten, který jsme sestavovali dříve, na nižší úrovni. Obsahuje HTML tabulku řádků, z nichž každý má 3 sloupce. V prvním sloupci je label (titulek) pole tabulky z define_table(.., Field(.., label=..)), ve druhém sloupci je INPUT prvek pro zadání pole tabulky (a po potvrzení a neúspěšné validaci případně také chybové hlášení). Třetí sloupec je prázdný a může být zadán ??((pomocí fields v konstruktoru ``SQLFORM``))??.

Všechny HTML entity (tags) ve formuláři mají jména odvozená od jména tabulky a jejích polí. Vzhled a chování formuláře tedy můžete snadno přizpůsobit pomocí CSS nebo JavaScriptu. Podrobněji se tomu věnujeme v kapitole 11.

Podstatnější je, že metoda ``accepts`` pro vás nyní dělá mnohem více. Stejně jako v předchozím případě zajistí validaci vstupu, ale navíc, když data validaci vyhoví, provede insert nového záznamu do databáze a uloží přidělené unikátní "id" do ``form.vars.id``.

Objekt ``SQLFORM`` také automaticky podporuje pole typu "upload" a ukládá uploadované soubory do adresáře "uploads" (poté, co je přejmenuje, a tak předejte možným konfliktům a útokům, založeným na znalosti jména souboru) a jejich (nová) jména do příslušného pole databáze. Po zpracování ve ``form.process()`` je nové jméno souboru dostupné jako ``form.vars.fieldname`` (to znamená, že nahradí standardní ``cgi.FieldStorage`` objekt, který přijde jako ``request.vars.fieldname``), takže se můžete snadněji na soubor odkazovat ihned poté, co byl nahrán.

``SQLFORM`` zobrazí na stránce
- "boolean" hodnoty pomocí checkboxů,
- hodnoty typu "text" pomocí HTML textarea,
- hodnoty, jejichž validátor vyžaduje, aby byly ze zadané množiny nebo aby byly v tabulce databáze, pomocí drop-boxů,
- "upload" pole pomocí odkazu, který umožňuje uživateli stáhnout uploadovaný soubor.
Skryje pole typu "blob", protože o nich se předpokládá, že budou ošetřena jinak, jak popíšeme později.

Např. uvažujme tento model:
``
db.define_table('person',
    Field('name', requires=IS_NOT_EMPTY()),
    Field('married', 'boolean'),
    Field('gender', requires=IS_IN_SET(['Muž', 'Žena', 'Nevíme'])),
    Field('profile', 'text'),
    Field('image', 'upload'))
``:code

``SQLFORM(db.person)`` vygeneruje následující formulář:

[[image @///image/en6200.png center 300px]]

Konstruktor ``SQLFORM`` umožňuje různá přizpůsobení (customizations), např. zobrazit jenom vybraná pole, změnit popisné texty (labely), přidat hodnoty do volitelného třetího sloupce, nebo změnit formulář pro vložení nového záznamu na formulář pro Update/Delete stávajícího záznamu.
Objekt ``SQLFORM`` znamená nejspíš největší úsporu času při používání Web2py.

Třída ``SQLFORM`` je definovaná v "gluon/sqlhtml.py". Může být snadno rozšířena tím, že (ve vyděděné třídě) přepíšeme její ``xml`` metodu, čili metodu, která serializuje objekt do HTML, a tak změníme její HTML reprezentaci.

``fields``:inxx ``labels``:inxx
Úplná signatura ``SQLFORM`` konstruktoru je:
``
SQLFORM(table, record = None,
        deletable = False, linkto = None,
        upload = None, fields = None, labels = None,
        col3 = {}, submit_button = 'Submit',
        delete_label = 'Check to delete:',
        showid = True, readonly = False,
        comments = True, keepopts = [],
        ignore_rw = False, record_id = None,
        formstyle = 'table3cols',
        buttons = ['submit'], separator = ': ',
        **attributes)

``:code
- Pomocí nepovinného druhého parametru změníte formulář pro vložení nového záznamu (Insert) na formulář pro aktualizaci (Update) stávajícího záznamu (více v následujícím oddíle).
``showid``:inxx ``delete_label``:inxx ``id_label``:inxx ``submit_button``:inxx
- Jestliže nastavíte ``deletable`` na ``True``, Update verze formuláře zobrazí checkbox "Check to delete". Text můžete přizpůsobit pomocí ``delete_label``.
- ``submit_button`` určuje value (text) potvrzovacího tlačítka.
- ``id_label`` je popisný text pro "id" záznamu. "id" se vůbec nezobrazí, jestliže zadáte ``showid=False``.
- ``fields`` je nepovinný seznam (list) jmen polí, která chcete zobrazit. Bez jeho zadání se zobrazí všechna pole. Například:
``
fields = ['name']
``:code
- ``labels`` je slovník (dictionary) popisných textů pro jednotlivá pole. Klíčem je jméno pole a hodnotou požadovaný popisný text. Není-li popisný text takto zadán, Web2py vezme popisný text z definice tabulky a když i ten chybí, použije přímo jméno pole (změní první písmeno na velké a nahradí podtržítka mezerami). Například:
``
labels = {'name':'Vaše celé jméno:'}
``:code
- ``col3`` je slovník (dictionary) obsahu pro třetí sloupec. Například:
``
col3 = {'name':A('co je to?',
      _href='http://www.google.com/search?q=define:name')}
``:code
- ``linkto`` a ``upload`` jsou nepovinné URL adresy na akce kontroléru(ů), které umožňují pracovat s referencemi (s poli, které odkazují jinam). Podrobněji si to ještě popíšeme.
- ``readonly``. Je-li True, formulář se zobrazí jen pro čtení (readonly).
- ``comments``, True/False. Řídí, zda třetí sloupec zobrazí comments z definice tabulky.
- ``ignore_rw``. Normálně create i update formulář nezobrazí pole, označená v definici tabulky jako writable=False, a readonly formulář nezobrazí pole, označená readable=False. Nastavením ``ignore_rw=True`` toto chování potlačíte a zobrazí se všechna pole. Používá se to především v appadmin rozhraní, když se zobrazují úplné obsahy tabulek.
- ``formstyle``:inxx ``formstyle`` určuje styl při serializování formuláře do html. Lze nastavit "table3cols" (default), "table2cols" (jeden řádek pro label a comment, jeden řádek pro input prvek), "ul" (seznam s input prvky), "divs" (div prvky s atributy pro snadné stylování). ``formstyle`` může také být funkce, která má parametry (record_id, field_label, field_widget, field_comment) a vrátí TR() objekt.
- ``buttons``:inxx je seznam (list) HTML helperů jako ``INPUT`` nebo ``TAG.BUTTON`` (případně i jiných helperů), které se přidají do DIVu, v němž se nachází tlačítko Submit.
- ``separator``:inxx ``separator`` je oddělovač mezi popisnými texty údajů a input prvky.
- Nepovinné ``attributes`` jsou argumenty, zapsané s úvodním podtržítkem, které chcete předat ``<form>`` tagu. Například:
``
_action = '.'
_method = 'POST'
``:code

Dalším atributem je ``hidden``. Předáme-li jako argument ``hidden`` slovník (dictionary), z jeho prvků se vytvoří skryté (hidden) prvky INPUT. (viz příklad pro ``FORM`` helper v kapitole 5).

``
form = SQLFORM(...., hidden=...)
``:code
to způsobí, že skrytá (hidden) pole formuláře budou předána při potvrzení formuláře - a právě jen to.
``form.accepts(...)`` není totiž zamýšlen pro načtení skrytých polí a jejich převedení na form.vars. Je to z důvodu bezpečnosti. Se skrytými poli by mohlo být manipulováno.
Proto musíte explicitně provést přiřazení z objektu request do objektu form:

``
form.vars.a = request.vars.a
form = SQLFORM(..., hidden=dict(a='b'))
``:code

#### ``SQLFORM`` a ``insert``/``update``/``delete``

Po potvzení formuláře vytvoří ``SQLFORM`` nový záznam v databázi db. Máme-li formulář ``form=SQLFORM(db.test)``:code, po potvrzení (a úspěšné validaci) bude id nově založeného záznamu dostupné jako ``form.vars.id``.

``delete record``:inxx
Když předáte jako druhý argument pro ``SQLFORM`` konstruktor id záznamu, formulář se z formuláře pro přidání nového záznamu změní na formulář pro editaci. Poté, co je formulář potvrzen, je aktualizován záznam se zadaným id. Předáte-li také argument ``deletable=True``, editační formulář zobrazí navíc checkbox "check to delete" (označ záznam ke zrušení). Pokud jej uživatel zaškrtne, záznam bude (po potvrzení formuláře) zrušen.

------
Jestliže je uvedený checkbox zaškrtnut a formulář je již potvrzen,
``form.deleted`` bude nastaveno na ``True``.
------

Akci kontroléru můžete upravit tak, že když se na konec URL přidá číslo, jako v tomto příkladu:
``
/test/default/display_form/2
``:code

a když existuje záznam s odpovídajícím id (id=2 v našem příkladu), ``SQLFORM`` vygeneruje formulář pro editaci pro záznam, který byl vyžádán uvedeným formátem URL adresy:
``
def display_form():
    record = db.person(request.args(0)) or redirect(URL('index'))
    form = SQLFORM(db.person, record)
    if form.process().accepted:
        response.flash = 'formulář úspěšně zpracován'
    elif form.errors:
        response.flash = 've formuláři jsou chyby'
    return dict(form=form)
``:code

Druhý řádek najde záznam, třetí řádek vytvoří editační formulář (lze předat record nebo record.id). Řádek 4 zajistí veškeré zpracování formuláře.

Editační formulář je velmi podobný formuláři pro zadávání nových záznamů. V aktivních HTML prvcích jsou předvyplněny hodnoty z editovaného záznamu.

Editační formulář také obsahuje skrytý provek INPUT s ``name="id"``, který slouží k identifikaci záznamu. Totéž id je uloženo pro větší bezpečnost i na straně serveru a když se uživatel pokusí manipulovat s hodnotou pole s id, UPDATE se neprovede a Web2py vystaví chybu SyntaxError s informací, že uživatel nedovoleně manipuloval s formulářem ("user is tampering with form").

Jestliže je pole označeno jako ``writable=False``, nezobrazuje se ve formulářích pro založení nového záznamu, kdežto ve formulářích pro editaci se zobrazí jen ke čtení (readonly). Ale když navíc zadáte pro toto pole (v definici tabulky nebo později) ``readable=False``, nebude se zobrazovat vůbec ani v editačních formulářích.

Můžete ignorovat uvedené atributy ``readable`` a ``writable``
``
form = SQLFORM(..., ignore_rw=True)
``:code

a tak se vždy zobrazí všechna pole. Tak se chovají formuláře v kontroléru ``appadmin``.

Formuláře vytvořené s argumentem ``readonly=True``
``
form = SQLFORM(table, record_id, readonly=True)
``:code

vždy ukazují data jen pro čtení a nemohou být potvrzeny - neboli generovat nějaký zápis do databáze a/nebo mít nastaveno ``form.accepted=True`` nebo ``form.deleted=True``.

Označení pole ``writable=False`` zabrání poli, aby bylo (aktivním) prvkem formuláře a způsobí, že zpracování formuláře nebude brát ohled na případnou hodnotu ``request.vars.field``. Když ale přiřadíte hodnotu do ``form.vars.field``, pak takové pole ''bude'' součástí příkazu insert nebo update při zpracování formuláře. 
To vám umožňuje programově měnit i obsah polí, které z nějakého důvodu nechcete ve formuláři zobrazit.


#### ``SQLFORM`` a HTML

Může nastat situace, že chcete použít ``SQLFORM`` kvůli vygenerování formuláře a zpracování potvrzeného formuláře, ale chcete takové úpravy HTML, které není možné zajistit pomocí parameterů ``SQLFORM`` objektu. Formulář v tom případě musíte designovat přímo v HTML.

Editujte kontrolér a přidejte novou akci:
``
def display_manual_form():
    form = SQLFORM(db.person)
    if form.process(session=None, formname='test').accepted:
        response.flash = 'formulář úspěšně zpracován'
    elif form.errors:
        response.flash = 've formuláři jsou chyby'
    else:
        response.flash = 'prosím, vyplňte formulář'
    # Poznámka: do šablony nepředáváme instanci formuláře
   return dict()
``:code

a formulář do odpovídající šablony "default/display_manual_form.html" zadáme ručně:
``
{{extend 'layout.html'}}
<form action="#">
  <ul>
    <li>Vaše jméno je: <input name="name" /></li>
  </ul>
  <input type="submit" />
  <input type="hidden" name="_formname" value="test" />
</form>
``:code

Všimněte si, že akce nevrací formulář jako jeden z klíčů návratového slovníku, a to proto, že šablona tuto proměnnou nepotřebuje. Šablona obsahuje formulář manuálně vytvořený pomocí HTML. Formulář musí obsahovat skryté pole "_formname" s hodnotou stejnou jako ``formname``, zadané při volání metody ``accepts`` nebo ``process``. Web2py používá jméno formuláře (formname) v případě více formulářů na stránce k rozeznání toho, který byl potvrzen. Když je na stránce jediný formulář, může být zadáno ``formname=None`` a vynecháno skryté pole v HTML.

``form.accepts / process`` bude v ``response.vars`` hledat data, pojmenovaná shodně s poli v databázové tabulce ``db.person``. Takto pojmenovaná pole musíme mít (a máme) v HTML v tomto formátu:
``<input name="jednotlive_jmeno_pole" />
``:code

Poznamenejme, že v uvedeném příkladu se data z formuláře přenesou v URL adrese. Když to tak nechceme, musíme vynutit použití protokolu ``POST``. Také, chceme-li používat upload pole, musíme formulář nastavit, aby to povoloval. Obojí nastavení vidíme zde:
``
<form action="#" enctype="multipart/form-data" method="post">
``:code

#### ``SQLFORM`` a upload

Pole typu "upload" jsou zvláštní. Vykreslují se (renderují) jako INPUT pole s ``type="file"``. Není-li určeno jinak, uploadovaný soubor je streamován za použití vyrovnávacího bufferu a uložen v adresáři "uploads" pod novým bezpečným jménem, které je přiděleno automaticky. Toto nové jméno se pak zapíše do pole typu upload.

Např. máme-li tento model:
``
db.define_table('person',
    Field('name', requires=IS_NOT_EMPTY()),
    Field('image', 'upload'))
``:code

můžete použít akci "display_form" kontroléru, jak jsme ji uvedli výše.

Když vkládáte nový záznam, formulář umožní hledat (browse for..) soubor.
Dejme tomu, že vybereme jpg fotografii. Soubor je při uploadu uložen jako:
``
applications/test/uploads/person.image.XXXXX.jpg
``:code

"XXXXXX" je náhodný identifikátor, který Web2py přidělí.

``content-disposition``:inxx

-------
Defaultně je původní jméno souboru převedeno funkcí b16encode() a použito pro sestavení nového jména souboru. Toto jméno pak obdrží defaultní "download" akce a použije jej pro sestavení hlavičky (content disposition header) tak, aby uživatel znovu získal původní jméno souboru.
-------

Pro uložený soubor je zachována jen přípona. Jedná se o bezpečnostní požadavek, protože jméno souboru může obsahovat speciální znaky, zneužitelné k útoku (directory traversal attacks nebo jiné nebezpečné akce).

Nové jméno souboru je po zpracování ve ``form.vars.image``.

Během editace záznamu v editačním formuláři je dobrá možnost zobrazit odkaz pro download na serveru uloženého souboru, a Web2py to může zajistit.

Předáte-li ``SQLFORM`` konstruktoru pomocí argumentu upload adresu URL, Web2py ji (tedy akci na této adrese) použije pro download souboru. Mějme např. v kontroléru tyto akce:
``
def display_form():
   record = db.person(request.args(0)) or redirect(URL('index'))
   form = SQLFORM(db.person, record, deletable=True,
                  upload=URL('download'))
   if form.process().accepted:
       response.flash = 'potvrzeno'
   elif form.errors:
       response.flash = 've formuláři jsou chyby'
   return dict(form=form)

def download():
    return response.download(request, db)
``:code

Vložme nový záznam pomocí URL adresy:
``
http://127.0.0.1:8000/test/default/display_form
``:code

Uploadujte fotografii, potvrďte formulář, a pak editujte nově vytvořený záznam pomocí adresy:
``
http://127.0.0.1:8000/test/default/display_form/3
``:code

(předpokládáme tady, že jsme právě přidali záznam id=3). Formulář zobrazí preview fotografie:

[[image @///image/en6300.png center 300px]]

Serializovaný formulář generuje toto HTML:
``
<td><label id="person_image__label" for="person_image">Image: </label></td>
<td><div><input type="file" id="person_image" class="upload" name="image"
/>[<a href="/test/default/download/person.image.0246683463831.jpg">file</a>|
<input type="checkbox" name="image__delete" />delete]</div></td><td></td></tr>
<tr id="delete_record__row"><td><label id="delete_record__label" for="delete_record"
>Check to delete:</label></td><td><input type="checkbox" id="delete_record"
class="delete" name="delete_this_record" /></td>
``:code

které obsahuje odkaz na stažení souboru dříve uploadovaného na server a checkbox pro možnost zrušení souboru (fotografie) neboli pro jeho odstranění z editovaného záznamu tabulky, neboli pro uložení hodnoty NULL do pole "image".

Proč je tento mechanismus zpřístupněn pomocí separátní akce pro download? Protože možná budete chtít vynutit nějakou autorizaci ve funkci pro download. V kapitole 9 najdete příklad.

Standardně jsou uploadované soubory ukládány do "<aplikace>/uploads", ale můžete zadat jiné umístění:
``
Field('image', 'upload', uploadfolder='...')
``
Řada operačních systémů bude zpomalovat s narůstajícím počtem souborů v adresáři. Víte-li, že bude uploadováno více než 1000 souborů, nastavte Web2py, aby je rozdělilo do více podadresářů:
``
Field('image', 'upload', uploadseparate=True)
``


#### Uložení včetně původního jména souboru

Web2py automaticky ukládá původní jméno uploadovaného souboru do nového unikátního jména souboru. Při downloadu je pak původní jméno součástí hlavičky (content-disposition header) HTTP odpovědi. To se provede automaticky bez jakéhokoli programování.

Někdy můžete chtít uložit původní jméno souboru do databázového pole. V tom případě je potřeba upravit model a přidat pole na uložení původního jména:
``
db.define_table('person',
    Field('name', requires=IS_NOT_EMPTY()),
    Field('image_filename'),
    Field('image', 'upload'))
``:code

a dále je potřeba upravit kontrolér:
``
def display_form():
    record = db.person(request.args(0)) or redirect(URL('index'))
    url = URL('download')
    form = SQLFORM(db.person, record, deletable=True,
                   upload=url, fields=['name', 'image'])
    if request.vars.image!=None:
        form.vars.image_filename = request.vars.image.filename
    if form.process().accepted:
        response.flash = 'potvrzeno'
    elif form.errors:
        response.flash = 've formuláři jsou chyby'
    return dict(form=form)
``:code

Všimněte si, že v ``SQLFORM`` nezobrazujeme pole "image_filename".
Akce "display_form" přesune původní jméno souboru z ``request.vars.image`` do ``form.vars.image_filename``, čímž se nové pole přidá ke zpracování v ``accepts`` (nebo ``process``) a bude uloženo do databáze.

#### ``autodelete``
``autodelete``:inxx

Standardně ``SQLFORM`` při rušení záznamu neruší fyzicky uploadované soubory, na které záznam odkazuje. Důvod je, že Web2py neví, zda soubor není případně odkazován odjinud nebo používán k jiným účelům. Jestliže víte, že je bezpečné a vhodné spolu s rušeným záznamem zrušit i soubor, udělejte následující:
``
db.define_table('image',
    Field('name', requires=IS_NOT_EMPTY()),
    Field('source', 'upload', autodelete=True))
``:code

Atribut ``autodelete`` je defaultně ``False`` a jestliže ho změníme na ``True``, způsobí to právě automatické zrušení odkazovaného souboru během rušení záznamu.

#### Odkazy (links) na související záznamy

Nyní předpokládejme případ dvou tabulek propojených pomocí odkazu (cizího klíče). Například:
``
db.define_table('person',
    Field('name', requires=IS_NOT_EMPTY()))
db.define_table('dog',
    Field('owner', 'reference person'),
    Field('name', requires=IS_NOT_EMPTY()))
db.dog.owner.requires = IS_IN_DB(db, db.person.id, '%(name)s')
``:code

Osoba má psy a každý ze psů patří některé osobě, jeho pánovi. Pole owner v tabulce psů odkazuje na správného majitele pomocí platného ``db.person.id`` a pro zobrazení majitelů na výběr se použije formátování ``'%(name)s'``.

Použijme **appadmin** rozhraní této aplikace <aplikace>/appadmin a přidejme několik osob a jejich psů.

Když v **appadmin** rozhraní editujeme existující osobu, editační formulář ukáže odkaz na psy, které tato osoba vlastní. Toto chování si ve vlastním kódu zprovozníme pomocí argumentu ``linkto`` formuláře ``SQLFORM``. ``linkto`` by mělo vést na další URL adresu (na novou akci), která z ``SQLFORM`` převezme dotaz (query string) a vypíše odpovídající záznamy.
Tady je příklad:
``
def display_form():
   record = db.person(request.args(0)) or redirect(URL('index'))
   url = URL('download')
   link = URL('list_records', args='db')
   form = SQLFORM(db.person, record, deletable=True,
                  upload=url, linkto=link)
   if form.process().accepted:
       response.flash = 'form accepted'
   elif form.errors:
       response.flash = 'form has errors'
   return dict(form=form)
``:code

Výsledná stránka je zde:

[[image @///image/en6400.png center 300px]]

Je na ní odkaz "dog.owner". Text odkazu lze změnit pomocí argumentu ``labels`` formuláře ``SQLFORM``, například:
``
labels = {'dog.owner': "Psi tohoto majitele"}
``:code

Klikem na odkaz jste přesměrováni na:
``
/test/default/list_records/dog?query=db.dog.owner%3D%3D5
``:code

"list_records" je požadovaná akce, která jako ``request.args(0)`` obdrží jméno odkazující tabulky a jako ``request.vars.query`` dotaz (query string).
Tento dotaz na konci URL obsahuje podmínku "dog.owner==5" správně escapovanou (url-encoded, tj. po nahrazení nebezpečných znaků).
Escapování (konverze znaků) provádí Web2py automaticky.

Snadno můžete implementovat hodně obecnou akci "list_records" třeba takto (ošetřeno včetně kontroly správného (povoleného) formátu dotazu, ale s tím, že proměnnou db předpokládáme jako pevně danou):
``
def list_records():
    REGEX = re.compile('^(\w+)\.(\w+)\.(\w+)\=\=(\d+)$')
    match = REGEX.match(request.vars.query)
    if not match:
        redirect(URL('error'))
    table, field, id = match.group(2), match.group(3), match.group(4)
    records = db(db[table][field]==id).select()
    return dict(records=records)
``:code

a k akci přidružená šablona (view) "default/list_records.html":
``
{{extend 'layout.html'}}
{{=records}}
``:code

Když select vrátí Rows objekt (sadu záznamů) a ten je serializována v šabloně, je nejprve konvertován na objekt SQLTABLE (neplést s Table) a pak je serializován do HTML tabulky, v níž každé pole vytvoří sloupec.

#### Předvyplnění formuláře
Vždy je možné formulář (obvykle částečně) předvyplnit pomocí příkazů:
``
form.vars.jmenopole = 'hodnota'
``:code

Tyto příkazy musíme umístit za deklaraci formuláře (za instanciování objektu z ``SQLFORM``) a před volání metody ``process`` nebo ``accepts``, a to bez ohledu na to, zda se údaj ("jmenopole" v našem příkladu) ve formuláři zobrazuje nebo ne.

#### Přidání dalších formulářových prvků do ``SQLFORM``
Někdy můžete chtít přidat do vytvořeného formuláře další prvky navíc. Třeba budete chtít zobrazit checkbox pro potvrzení, že uživatel souhlasí s podmínkami služby:
``
form = SQLFORM(db.yourtable)
my_extra_element = TR(LABEL('Souhlasím se závaznými podmínkami'), \
                      INPUT(_name='agree', value=True, _type='checkbox'))
form[0].insert(-1, my_extra_element)
``:code

Proměnnou ``my_extra_element`` je potřeba přizpůsobit aktuálně použitému argumentu formstyle. V příkladu jsme předpokládali defaultní ``formstyle='table3cols'``.

Po potvrzení bude ``form.vars.agree`` obsahovat status přidaného checkboxu, který můžeme například použít ve funkci ``onvalidation`` nebo můžeme rozložit zpracování na validaci a fyzický zápis, jak si ukážeme dále.

#### ``SQLFORM`` bez zápisu do databáze

Někdy může být potřebné generovat formulář pomocí ``SQLFORM`` a řádně validovat potvrzená data, ale neprovést automatický Insert/Update/Delete do databáze. Dejme tomu, že po validaci chcete ještě něco udělat, např. určit hodnoty dalších odvozených polí. Také můžete chtít ještě aplikovat dodatečné validace, které pomocí standardních validátorů nejsou možné.

Lze to udělat velmi jednoduše rozdělením:
``
form = SQLFORM(db.person)
if form.process().accepted:
    response.flash = 'záznam byl přidán'
``:code

na:
``
form = SQLFORM(db.person)
if form.validate():
    ### případná další práce se záznamem ve form.vars
    form.vars.id = db.person.insert(**dict(form.vars))
    response.flash = 'záznam byl přidán'
``:code

Podobně pro Update/Delete:
``
form = SQLFORM(db.person, record)
if form.process().accepted:
    response.flash = 'záznam byl aktualizován'
``:code

rozložením na:
``
form = SQLFORM(db.person,record)
if form.validate():
    if form.deleted:
        db(db.person.id==record.id).delete()
    else:
        record.update_record(**dict(form.vars))
    response.flash = 'záznam byl aktualizován'
``:code

Pro pole typu "upload" se i při volání ``process(dbio=False)`` resp. zkráceného ``validate()`` pracuje s upload polem stejně jako při ``process(dbio=True)``, takže nově přidělené jméno máte po validaci ve:
``
form.vars.jmeno_upload_pole
``:code

### Další typy formulářů

#### ``SQLFORM.factory``

Je často výhodné sestavit formulář ''jako kdyby'' pracoval nad databázovou tabulkou (jak jsme právě popsali), i když skutečnou databázovou tabulku nemáte. Chcete totiž využít přednosti ``SQLFORM`` objektu k sestavení standardní a dobře CSS stylovatelné podoby formuláře včetně např. docela sofistikované podpory pro upload.

K tomu slouží ``SQLFORM.factory``. Tady je příklad, kde se sestaví formulář, provedou validace, uploaduje soubor a vše se uloží do ``session`` :
``
def form_from_factory():
    form = SQLFORM.factory(
        Field('your_name', requires=IS_NOT_EMPTY()),
        Field('your_image', 'upload'))
    if form.process().accepted:
        response.flash = 'form accepted'
        session.your_name = form.vars.your_name
        session.your_image = form.vars.your_image
    elif form.errors:
        response.flash = 'form has errors'
    return dict(form=form)
``:code

The Field object in the SQLFORM.factory() constructor is fully documented in the DAL chapter.
A run-time construction technique for SQLFORM.factory() is
``
fields = []
fields.append(Field(...))
form=SQLFORM.factory(*fields)
``:code

Here is the "default/form_from_factory.html" view:
``
{{extend 'layout.html'}}
{{=form}}
``:code

You need to use an underscore instead of a space for field labels, or explicitly pass a dictionary of ``labels`` to ``form_factory``, as you would for a ``SQLFORM``. By default ``SQLFORM.factory`` generates the form using html "id" attributes generated as if the form was generated from a table called "no_table". To change this dummy table name, use the ``table_name`` attribute for the factory:
``
form = SQLFORM.factory(...,table_name='other_dummy_name')
``:code

Changing the ``table_name`` is necessary if you need to place two factory generated forms in the same table and want to avoid CSS conflicts.

##### Uploading files with SQLFORM.factory


#### One form for multiple tables

It often happens that you have two tables (for example 'client' and
'address' which are linked together by a reference and you want to
create a single form that allows to insert info about one client and
its default address. Here is how:

model:
``
db.define_table('client',
     Field('name'))
db.define_table('address',
    Field('client','reference client',
          writable=False,readable=False),
    Field('street'),Field('city'))
``:code

controller:
``
def register():
    form=SQLFORM.factory(db.client,db.address)
    if form.process().accepted:
        id = db.client.insert(**db.client._filter_fields(form.vars))
        form.vars.client=id
        id = db.address.insert(**db.address._filter_fields(form.vars))
        response.flash='Thanks for filling the form'
    return dict(form=form)
``:code

Notice the SQLFORM.factory (it makes ONE form using public fields from
both tables and inherits their validators too).
On form accepts this does two inserts, some data in one table and some
data in the other.

-------
This only works when the tables don't have field names in common.
-------


#### Confirmation Forms

``confirm``:inxx

Often you need a form with a confirmation choice. The form should be accepted if the choice is accepted and none otherwise. The form may have additional options that link other web pages. web2py provides a simple way to do this:

``
form = FORM.confirm('Are you sure?')
if form.accepted: do_what_needs_to_be_done()
``:code

Notice that the confirm form does not need and must not call ``.accepts`` or ``.process`` because this is done internally. You can add buttons with links to the confirmation form in the form of a dictionary of ``{'value':'link'}``:

``
form = FORM.confirm('Are you sure?',{'Back':URL('other_page')})
if form.accepted: do_what_needs_to_be_done()
``:code

#### Form to edit a dictionary

Imagine a system that stores configurations options in a dictionary,

``
config = dict(color='black', language='English')
``:code

and you need a form to allow the visitor to modify this dictionary.
This can be done with:

``
form = SQLFORM.dictform(config)
if form.process().accepted: config.update(form.vars)
``:code

The form will display one INPUT field for each item in the dictionary. It will use dictionary keys as INPUT names and labels and current values to infer types (string, int, double, date, datetime, boolean).

This works great but leave to you the logic of making the config dictionary persistent. For example you may want to store the ``config`` in a session.

``
session.config or dict(color='black', language='English')
form = SQLFORM.dictform(session.config)
if form.process().accepted:
    session.config.update(form.vars)
``:code


### CRUD
``CRUD``:inxx ``crud.create``:inxx ``crud.update``:inxx ``crud.select``:inxx ``crud.search``:inxx ``crud.tables``:inxx ``crud.delete``:inxx

One of the recent additions to web2py is the Create/Read/Update/Delete (CRUD) API on top of SQLFORM.
CRUD creates an SQLFORM, but it simplifies the coding because it incorporates the creation of the form, the processing of the form, the notification, and the redirection, all in one single function.

The first thing to notice is that CRUD differs from the other web2py APIs we have used so far because it is not already exposed. It must be imported. It also must be linked to a specific database. For example:
``
from gluon.tools import Crud
crud = Crud(db)
``:code

The ``crud`` object defined above provides the following API:

``crud.tables``:inxx ``crud.create``:inxx ``crud.read``:inxx ``crud.update``:inxx ``crud.delete``:inxx ``crud.select``:inxx .
- ``crud.tables()`` returns a list of tables defined in the database.
- ``crud.create(db.tablename)`` returns a create form for table tablename.
- ``crud.read(db.tablename, id)`` returns a readonly form for tablename and record id.
- ``crud.update(db.tablename, id)`` returns an update form for tablename and record id.
- ``crud.delete(db.tablename, id)`` deletes the record.
- ``crud.select(db.tablename, query)`` returns a list of records selected from the table.
- ``crud.search(db.tablename)`` returns a tuple (form, records) where form is a search form and records is a list of records based on the submitted search form.
- ``crud()`` returns one of the above based on the ``request.args()``.

For example, the following action:
``
def data(): return dict(form=crud())
``:code

would expose the following URLs:
``
http://.../[app]/[controller]/data/tables
http://.../[app]/[controller]/data/create/[tablename]
http://.../[app]/[controller]/data/read/[tablename]/[id]
http://.../[app]/[controller]/data/update/[tablename]/[id]
http://.../[app]/[controller]/data/delete/[tablename]/[id]
http://.../[app]/[controller]/data/select/[tablename]
http://.../[app]/[controller]/data/search/[tablename]
``:code

However, the following action:

``
def create_tablename():
    return dict(form=crud.create(db.tablename))
``:code

would only expose the create method

``
http://.../[app]/[controller]/create_tablename
``:code

While the following action:

``
def update_tablename():
    return dict(form=crud.update(db.tablename, request.args(0)))
``:code

would only expose the update method

``
http://.../[app]/[controller]/update_tablename/[id]
``:code

and so on.

The behavior of CRUD can be customized in two ways: by setting some attributes of the ``crud`` object or by passing extra parameters to each of its methods.

#### Settings

Here is a complete list of current CRUD attributes, their default values, and meaning:

To enforce authentication on all crud forms:

``
crud.settings.auth = auth
``:code
The use is explained in chapter 9.

To specify the controller that defines the ``data`` function which returns the ``crud`` object

``
crud.settings.controller = 'default'
``:code

To specify the URL to redirect to after a successful "create" record:

``
crud.settings.create_next = URL('index')
``:code

To specify the URL to redirect to after a successful "update" record:

``
crud.settings.update_next = URL('index')
``:code

To specify the URL to redirect to after a successful "delete" record:

``
crud.settings.delete_next = URL('index')
``:code

To specify the URL to be used for linking uploaded files:

``
crud.settings.download_url = URL('download')
``:code

To specify extra functions to be executed after standard validation procedures for ``crud.create`` forms:

``
crud.settings.create_onvalidation = StorageList()
``:code

``StorageList`` is the same as a ``Storage`` object, they are both defined in the file "gluon/storage.py", but it defaults to ``[]`` as opposed to ``None``. It allows the following syntax:

``
crud.settings.create_onvalidation.mytablename.append(lambda form:....)
``:code

To specify extra functions to be executed after        standard validation procedures for ``crud.update`` forms:

``
crud.settings.update_onvalidation = StorageList()
``:code

To specify extra functions to be executed after completion of ``crud.create`` forms:

``
crud.settings.create_onaccept = StorageList()
``:code

To specify extra functions to be executed after completion of ``crud.update`` forms:

``
crud.settings.update_onaccept = StorageList()
``:code

To specify extra functions to be executed after completion of ``crud.update`` if record is deleted:

``
crud.settings.update_ondelete = StorageList()
``:code

To specify extra functions to be executed after completion of ``crud.delete``:

``
crud.settings.delete_onaccept = StorageList()
``:code

To determine whether the "update" forms should have a "delete" button:

``
crud.settings.update_deletable = True
``:code

To determine whether the "update" forms should show the id of the edited record:

``
crud.settings.showid = False
``:code

To determine whether forms should keep the previously inserted values or reset to default after successful submission:

``
crud.settings.keepvalues = False
``:code

Crud always detects whether a record being edited has been modified by a third party in the time between the time when the form is displayed and the time when it is submitted. This behavior is equivalent to
``
form.process(detect_record_change=True)``

and it is set in:

``
crud.settings.detect_record_change = True
``:code
and it can be changed/disabled by setting the variable to ``False``.

You can change the form style by

``
crud.settings.formstyle = 'table3cols' or 'table2cols' or 'divs' or 'ul'
``:code

You can set the separator in all crud forms:

``
crud.settings.label_separator = ':'
``:code

You can add captcha to forms, using the same convention explained for auth, with:

``
crud.settings.create_captcha = None
crud.settings.update_captcha = None
crud.settings.captcha = None
``:code


#### Messages

Here is a list of customizable messages:
``
crud.messages.submit_button = 'Submit'
``:code

sets the text of the "submit" button for both create and update forms.
``
crud.messages.delete_label = 'Check to delete:'
``:code

sets the label of the "delete" button in "update" forms.
``
crud.messages.record_created = 'Record Created'
``:code

sets the flash message on successful record creation.
``
crud.messages.record_updated = 'Record Updated'
``:code

sets the flash message on successful record update.
``
crud.messages.record_deleted = 'Record Deleted'
``:code

sets the flash message on successful record deletion.
``
crud.messages.update_log = 'Record %(id)s updated'
``:code

sets the log message on successful record update.
``
crud.messages.create_log = 'Record %(id)s created'
``:code

sets the log message on successful record creation.
``
crud.messages.read_log = 'Record %(id)s read'
``:code

sets the log message on successful record read access.
``
crud.messages.delete_log = 'Record %(id)s deleted'
``:code

sets the log message on successful record deletion.

------
Notice that ``crud.messages`` belongs to the class ``gluon.storage.Message`` which is similar to ``gluon.storage.Storage`` but it automatically translates its values, without need for the ``T`` operator.
------

Log messages are used if and only if CRUD is connected to Auth as discussed in Chapter 9. The events are logged in the Auth table "auth_events".

#### Methods

The behavior of CRUD methods can also be customized on a per call basis. Here are their signatures:
``
crud.tables()
crud.create(table, next, onvalidation, onaccept, log, message)
crud.read(table, record)
crud.update(table, record, next, onvalidation, onaccept, ondelete, log, message, deletable)
crud.delete(table, record_id, next, message)
crud.select(table, query, fields, orderby, limitby, headers, **attr)
crud.search(table, query, queries, query_labels, fields, field_labels, zero, showall, chkall)
``:code
- ``table`` is a DAL table or a tablename the method should act on.
- ``record`` and ``record_id`` are the id of the record the method should act on.
- ``next`` is the URL to redirect to after success. If the URL contains the substring "[id]" this will be replaced by the id of the record currently created/updated.
- ``onvalidation`` has the same function as SQLFORM(..., onvalidation)
- ``onaccept`` is a function to be called after the form submission is accepted and acted upon, but before redirection.
- ``log`` is the log message. Log messages in CRUD see variables in the ``form.vars`` dictionary such as "%(id)s".
- ``message`` is the flash message upon form acceptance.
- ``ondelete`` is called in place of ``onaccept`` when a record is deleted via an "update" form.
- ``deletable`` determines whether the "update" form should have a delete option.
- ``query`` is the query to be used to select records.
- ``fields`` is a list of fields to be selected.
- ``orderby`` determines the order in which records should be selected (see Chapter 6).
- ``limitby`` determines the range of selected records that should be displayed (see Chapter 6).
- ``headers`` is a dictionary with the table header names.
- ``queries`` a list like ``['equals', 'not equal', 'contains']`` containing the allowed methods in the search form.
- ``query_labels`` a dictionary like ``query_labels=dict(equals='Equals')`` giving names to search methods.
- ``fields`` a list of fields to be listed in the search widget.
- ``field_labels`` a dictionary mapping field names into labels.
- ``zero`` defaults to "choose one" is used as default option for the drop-down in the search widget.
- ``showall`` set it to True if you want rows returned as per the query in the first call (added after 1.98.2).
- ``chkall`` set it to True to turn on all the checkboxes in the search form (added after 1.98.2).

Here is an example of usage in a single controller function:
``
## assuming db.define_table('person', Field('name'))
def people():
    form = crud.create(db.person, next=URL('index'),
           message=T("record created"))
    persons = crud.select(db.person, fields=['name'],
           headers={'person.name': 'Name'})
    return dict(form=form, persons=persons)
``:code

Here is another very generic controller function that lets you search, create and edit any records from any table where the tablename is passed request.args(0):
``
def manage():
    table=db[request.args(0)]
    form = crud.update(table,request.args(1))
    table.id.represent = lambda id, row: \
       A('edit:',id,_href=URL(args=(request.args(0),id)))
    search, rows = crud.search(table)
    return dict(form=form,search=search,rows=rows)
``:code

Notice the line ``table.id.represent=...`` that tells web2py to change the representation of the id field and display a link instead to the page itself and passes the id as request.args(1) which turns the create page into an update page.

#### Record versioning

Both SQLFORM and CRUD provides a utility to version database records:

If you have a table (db.mytable) that needs full revision history you can just do:
``
form = SQLFORM(db.mytable, myrecord).process(onsuccess=auth.archive)
``:code

``
form = crud.update(db.mytable, myrecord, onaccept=auth.archive)
``:code

``auth.archive`` defines a new table called **db.mytable_archive** (the name is derived from the name of the table to which it refers) and on updating, it stores a copy of the record (as it was before the update) in the created archive table, including a reference to the current record.

Because the record is actually updated (only its previous state is archived), references are never broken.

This is all done under the hood.  Should you wish to access the archive table you should define it in a model:
``
db.define_table('mytable_archive',
   Field('current_record', 'reference mytable'),
   db.mytable)
``:code

Notice the table extends ``db.mytable`` (including all its fields), and adds  a reference to the ``current_record``.

``auth.archive`` does not timestamp the stored record unless your original table has timestamp fields, for example:

``
db.define_table('mytable',
    Field('created_on', 'datetime',
          default=request.now, update=request.now, writable=False),
    Field('created_by', 'reference auth_user',
          default=auth.user_id, update=auth.user_id, writable=False),
``:code

There is nothing special about these fields and you may give them any name you like. They are filled before the record is archived and are archived with each copy of the record.  The archive table name and/or reference field name can be changed like this:

``
db.define_table('myhistory',
    Field('parent_record', 'reference mytable'),
    db.mytable)
## ...
form = SQLFORM(db.mytable,myrecord)
form.process(onsuccess = lambda form:auth.archive(form,
             archive_table=db.myhistory,
             current_record='parent_record'))
``:code

### Custom forms

If a form is created with SQLFORM, SQLFORM.factory or CRUD, there are multiple ways it can be embedded in a view allowing multiple degrees of customization. Consider for example the following model:
``
db.define_table('image',
    Field('name', requires=IS_NOT_EMPTY()),
    Field('source', 'upload'))
``:code

and upload action
``
def upload_image():
    return dict(form=SQLFORM(db.image).process())
``:code

The simplest way to embed the form in the view for ``upload_image`` is
``
{{=form}}
``:code

This results in a standard table layout. If you wish to use a different layout, you can break the form into components
``
{{=form.custom.begin}}
Image name: <div>{{=form.custom.widget.name}}</div>
Image file: <div>{{=form.custom.widget.source}}</div>
Click here to upload: {{=form.custom.submit}}
{{=form.custom.end}}
``:code

where ``form.custom.widget[fieldname]`` gets serialized into the proper widget for the field. If the form is submitted and it contains errors, they are appended below the widgets, as usual.

The above sample form is show in the image below.

[[image @///image/en6500.png center 300px]]

A similar result could have been obtained without using a custom form:

``
SQLFORM(...,formstyle='table2cols')
``:code

or in case of CRUD forms with the following parameter:

``
crud.settings.formstyle='table2cols'
``:code

Other possible ``formstyle``s are "table3cols" (the default), "divs" and "ul".

If you do not wish to use the widgets serialized by web2py, you can replace them with HTML. There are some variables that will be useful for this:
- ``form.custom.label[fieldname]`` contains the label for the field.
- ``form.custom.comment[fieldname]`` contains the comment for the field.
- ``form.custom.dspval[fieldname]`` form-type and field-type dependent display representation of the field.
- ``form.custom.inpval[fieldname]`` form-type and field-type dependent values to be used in field code.

If you form has ``deletable=True`` you should also insert

``
{{=form.custom.delete}}
``:code

to display the delete checkbox.

It is important to follow the conventions described below.

#### CSS conventions

Tags in forms generated by SQLFORM, SQLFORM.factory and CRUD follow a strict CSS naming convention that can be used to further customize the forms.

Given a table "mytable", and a field "myfield" of type "string", it is rendered by default by a
``
SQLFORM.widgets.string.widget
``:code

that looks like this:
``
<input type="text" name="myfield" id="mytable_myfield"
       class="string" />
``:code

Notice that:
- the class of the INPUT tag is the same as the type of the field. This is very important for the jQuery code in "web2py_ajax.html" to work. It makes sure that you can only have numbers in "integer" and "double" fields, and that "time", "date" and "datetime" fields display the popup calendar/datepicker.
- the id is the name of the class plus the name of the field, joined by one underscore. This allows you to uniquely refer to the field via, for example, ``jQuery('#mytable_myfield')`` and manipulate the stylesheet of the field or bind actions associated to the field events (focus, blur, keyup, etc.).
- the name is, as you would expect, the field name.

#### Hide errors
``hideerror``:inxx

Occasionally, you may want to disable the automatic error placement and display form error messages in some place other than the default. That can be done easily.

- In the case of FORM or SQLFORM, pass ``hideerror=True`` to the ``accepts`` method.
- In the case of CRUD, set ``crud.settings.hideerror=True``

You may also want to modify the views to display the error (since they are no longer displayed automatically).

Here is an example where the errors are displayed above the form and not in the form.
``
{{if form.errors:}}
  Your submitted form contains the following errors:
  <ul>
  {{for fieldname in form.errors:}}
    <li>{{=fieldname}} error: {{=form.errors[fieldname]}}</li>
  {{pass}}
  </ul>
  {{form.errors.clear()}}
{{pass}}
{{=form}}
``:code

The errors will displayed as in the image shown below.

[[image @///image/en6600.png center 300px]]

This mechanism also works for custom forms.


### Validators
``validators``:inxx

Validators are classes used to validate input fields (including forms generated from database tables).

Here is an example of using a validator with a ``FORM``:
``
INPUT(_name='a', requires=IS_INT_IN_RANGE(0, 10))
``:code

Here is an example of how to require a validator for a table field:
``
db.define_table('person', Field('name'))
db.person.name.requires = IS_NOT_EMPTY()
``:code

Validators are always assigned using the ``requires`` attribute of a field. A field can have a single validator or multiple validators. Multiple validators are made part of a list:
``
db.person.name.requires = [IS_NOT_EMPTY(),
                           IS_NOT_IN_DB(db, 'person.name')]
``:code

Normally validators are called automatically by the function ``accepts`` and ``process`` of a ``FORM`` or other HTML helper object that contains a form. They are called in the order in which they are listed.

One can also call validators explicitly for a field:

``
db.person.name.validate(value)
``

which returns a tuple ``(value,error)`` and ``error`` is ``None`` if no the value validates.

Built-in validators have constructors that take an optional argument:

``
IS_NOT_EMPTY(error_message='cannot be empty')
``:code

``error_message`` allows you to override the default error message for any validator.

Here is an example of a validator on a database table:
``
db.person.name.requires = IS_NOT_EMPTY(error_message='fill this!')
``:code

where we have used the translation operator ``T`` to allow for internationalization. Notice that default error messages are not translated.

Mind that the only validators that can be used with ``list:`` type fields are:

- ``IS_IN_DB(...,multiple=True)``
- ``IS_IN_SET(...,multiple=True)``
- ``IS_NOT_EMPTY()``
- ``IS_LIST_OF(...)``

The latter can be used to apply any validator to the individual items in the list.

#### Validators

##### ``IS_ALPHANUMERIC``
``IS_ALPHANUMERIC``:inxx

This validator checks that a field value contains only characters in the ranges a-z, A-Z, or 0-9.
``
requires = IS_ALPHANUMERIC(error_message='must be alphanumeric!')
``:code

##### ``IS_DATE``
``IS_DATE``:inxx

This validator checks that a field value contains a valid date in the specified format. It is good practice to specify the format using the translation operator, in order to support different formats in different locales.
``
requires = IS_DATE(format=T('%Y-%m-%d'),
                   error_message='must be YYYY-MM-DD!')
``:code

For the full description on % directives look under the IS_DATETIME validator.

##### ``IS_DATE_IN_RANGE``
``IS_DATE_IN_RANGE``:inxx

Works very much like the previous validator but allows to specify a range:
``
requires = IS_DATE_IN_RANGE(format=T('%Y-%m-%d'),
                   minimum=datetime.date(2008,1,1),
                   maximum=datetime.date(2009,12,31),
                   error_message='must be YYYY-MM-DD!')
``:code

For the full description on % directives look under the IS_DATETIME validator.

##### ``IS_DATETIME``
``IS_DATETIME``:inxx

This validator checks that a field value contains a valid datetime in the specified format. It is good practice to specify the format using the translation operator, in order to support different formats in different locales.
``
requires = IS_DATETIME(format=T('%Y-%m-%d %H:%M:%S'),
                       error_message='must be YYYY-MM-DD HH:MM:SS!')
``:code

The following symbols can be used for the format string (this shows the symbol and an example string):
``
%Y  '1963'
%y  '63'
%d  '28'
%m  '08'
%b  'Aug'
%b  'August'
%H  '14'
%I  '02'
%p  'PM'
%M  '30'
%S  '59'
``:code

##### ``IS_DATETIME_IN_RANGE``
``IS_DATETIME_IN_RANGE``:inxx

Works very much like the previous validator but allows to specify a range:
``
requires = IS_DATETIME_IN_RANGE(format=T('%Y-%m-%d %H:%M:%S'),
                       minimum=datetime.datetime(2008,1,1,10,30),
                       maximum=datetime.datetime(2009,12,31,11,45),
                       error_message='must be YYYY-MM-DD HH:MM::SS!')
``:code

For the full description on % directives look under the IS_DATETIME validator.

##### ``IS_DECIMAL_IN_RANGE``
``IS_DECIMAL_IN_RANGE``:inxx

``
INPUT(_type='text', _name='name', requires=IS_DECIMAL_IN_RANGE(0, 10, dot="."))
``:code

It converts the input into a Python Decimal or generates an error if
the decimal does not fall within the specified inclusive range.
The comparison is made with Python Decimal arithmetic.

The minimum and maximum limits can be None, meaning no lower or upper limit,
respectively.

The ``dot`` argument is optional and allows you to internationalize the symbol used to separate the decimals.


##### ``IS_EMAIL``
``IS_EMAIL``:inxx

It checks that the field value looks like an email address. It does not try to send email to confirm.
``
requires = IS_EMAIL(error_message='invalid email!')
``:code

##### ``IS_EQUAL_TO``
``IS_EQUEL_TO``:inxx

Checks whether the validated value is equal to a given value (which can be a variable):
``
requires = IS_EQUAL_TO(request.vars.password,
                       error_message='passwords do not match')
``:code

##### ``IS_EXPR``
``IS_EXPR``:inxx

Its first argument is a string containing a logical expression in terms of a variable value. It validates a field value if the expression evaluates to ``True``. For example:
``
requires = IS_EXPR('int(value)%3==0',
                   error_message='not divisible by 3')
``:code

One should first check that the value is an integer so that an exception will not occur.
``
requires = [IS_INT_IN_RANGE(0, 100), IS_EXPR('value%3==0')]
``:code

##### ``IS_FLOAT_IN_RANGE``
``IS_FLOAT_IN_RANGE``:inxx

Checks that the field value is a floating point number within a definite range, ``0 <= value <= 100`` in the following example:
``
requires = IS_FLOAT_IN_RANGE(0, 100, dot=".",
         error_message='too small or too large!')
``:code

The ``dot`` argument is optional and allows you to internationalize the symbol used to separate the decimals.

##### ``IS_INT_IN_RANGE``
``IS_INT_IN_RANGE``:inxx

Checks that the field value is an integer number within a definite range,
 ``0 <= value < 100`` in the following example:

``
requires = IS_INT_IN_RANGE(0, 100,
         error_message='too small or too large!')
``:code

##### ``IS_IN_SET``
``IS_IN_SET``:inxx
``multiple``:inxx

Checks that the field values are in a set:
``
requires = IS_IN_SET(['a', 'b', 'c'],zero=T('choose one'),
         error_message='must be a or b or c')
``:code

The zero argument is optional and it determines the text of the option selected by default, an option which is not accepted by the ``IS_IN_SET`` validator itself. If you do not want a "choose one" option, set ``zero=None``.

The ``zero`` option was introduced in revision (1.67.1). It did not break backward compatibility in the sense that it did not break applications but it did change their behavior since, before, there was no ``zero`` option.

The elements of the set must always be strings unless this validator is preceded by ``IS_INT_IN_RANGE`` (which converts the value to int) or  ``IS_FLOAT_IN_RANGE`` (which converts the value to float). For example:
``
requires = [IS_INT_IN_RANGE(0, 8), IS_IN_SET([2, 3, 5, 7],
          error_message='must be prime and less than 10')]
``:code

For a form checkbox, use this:
``
requires=IS_IN_SET(['on'])
``:code

You may also use a dictionary or a list of tuples to make the drop down list more descriptive:
``
#### Dictionary example:
requires = IS_IN_SET({'A':'Apple','B':'Banana','C':'Cherry'},zero=None)
#### List of tuples example:
requires = IS_IN_SET([('A','Apple'),('B','Banana'),('C','Cherry')])
``:code


##### ``IS_IN_SET`` and Tagging

The ``IS_IN_SET`` validator has an optional attribute ``multiple=False``. If set to True, multiple values can be stored in one field. The field should be of type ``list:integer`` or ``list:string``. ``multiple`` references are handled automatically in create and update forms, but they are transparent to the DAL. We strongly suggest using the jQuery multiselect plugin to render multiple fields.

------
Note that when ``multiple=True``, ``IS_IN_SET`` will accept ``zero`` or more values, i.e. it will accept the field when nothing has been selected. ``multiple`` can also be a tuple of the form ``(a,b)`` where ``a`` and ``b`` are the minimum and (exclusive) maximum number of items that can be selected respectively.
------

##### ``IS_LENGTH``
``IS_LENGTH``:inxx

Checks if length of field's value fits between given boundaries. Works
for both text and file inputs.

Its arguments are:
- maxsize: the maximum allowed length / size (has default = 255)
- minsize: the minimum allowed length / size

Examples:
Check if text string is shorter than 33 characters:
``
INPUT(_type='text', _name='name', requires=IS_LENGTH(32))
``:code

Check if password string is longer than 5 characters:
``
INPUT(_type='password', _name='name', requires=IS_LENGTH(minsize=6))
``:code

Check if uploaded file has size between 1KB and 1MB:
``
INPUT(_type='file', _name='name', requires=IS_LENGTH(1048576, 1024))
``:code

For all field types except for files, it checks the length of the value. In the case of files, the value is a ``cookie.FieldStorage``, so it validates the length of the data in the file, which is the behavior one might intuitively expect.

##### ``IS_LIST_OF``
``IS_LIST_OF``:inxx

This is not properly a validator. Its intended use is to allow validations of fields that return multiple values. It is used in those rare cases when a form contains multiple fields with the same name or a multiple selection box. Its only argument is another validator, and all it does is to apply the other validator to each element of the list. For example, the following expression checks that every item in a list is an integer in the range 0-10:
``
requires = IS_LIST_OF(IS_INT_IN_RANGE(0, 10))
``:code

It never returns an error and does not contain an error message. The inner validator controls the error generation.

##### ``IS_LOWER``
``IS_LOWER``:inxx

This validator never returns an error. It just converts the value to lower case.
``
requires = IS_LOWER()
``:code

##### ``IS_MATCH``
``IS_MATCH``:inxx

This validator matches the value against a regular expression and returns an error if it does not match.
Here is an example of usage to validate a US zip code:
``
requires = IS_MATCH('^\d{5}(-\d{4})?$',
         error_message='not a zip code')
``:code

Here is an example of usage to validate an IPv4 address (note: the IS_IPV4 validator is more appropriate for this purpose):
``
requires = IS_MATCH('^\d{1,3}(\.\d{1,3}){3}$',
         error_message='not an IP address')
``:code

Here is an example of usage to validate a US phone number:
``
requires = IS_MATCH('^1?((-)\d{3}-?|\(\d{3}\))\d{3}-?\d{4}$',
         error_message='not a phone number')
``:code

For more information on Python regular expressions, refer to the official Python documentation.

``IS_MATCH`` takes an optional argument ``strict`` which defaults to ``False``. When set to ``True`` it only matches the beginning of the string:

``
>>> IS_MATCH('a')('ba')
('ba', <lazyT 'invalid expression'>) # no pass
>>> IS_MATCH('a',strict=False)('ab')
('a', None)                          # pass!
``

``IS_MATCH`` takes an other optional argument ``search`` which defaults to ``False``. When set to ``True``, it uses regex method ``search`` instead of method ``match`` to validate the string.

``IS_MATCH('...', extract=True)`` filters and extract only the first matching
substring rather than the original value.

##### ``IS_NOT_EMPTY``
``IS_NOT_EMPTY``:inxx

This validator checks that the content of the field value is not an empty string.
``
requires = IS_NOT_EMPTY(error_message='cannot be empty!')
``:code

##### ``IS_TIME``
``IS_TIME``:inxx

This validator checks that a field value contains a valid time in the specified format.
``
requires = IS_TIME(error_message='must be HH:MM:SS!')
``:code

##### ``IS_URL``
``IS_URL``:inxx

Rejects a URL string if any of the following is true:
- The string is empty or None
- The string uses characters that are not allowed in a URL
- The string breaks any of the HTTP syntactic rules
- The URL scheme specified (if one is specified) is not 'http' or 'https'
- The top-level domain (if a host name is specified) does not exist

(These rules are based on RFC 2616``RFC2616``:cite )

This function only checks the URL's syntax. It does not check that the URL points to a real document,
for example, or that it otherwise makes semantic sense. This function does automatically prepend
'http://' in front of a URL in the case of an abbreviated URL (e.g. 'google.ca').

If the parameter mode='generic' is used, then this function's behavior changes. It then rejects a URL string if any of the following is true:
- The string is empty or None
- The string uses characters that are not allowed in a URL
- The URL scheme specified (if one is specified) is not valid

(These rules are based on RFC 2396``RFC2396``:cite )

The list of allowed schemes is customizable with the allowed_schemes parameter. If you exclude None from
the list, then abbreviated URLs (lacking a scheme such as 'http') will be rejected.

The default prepended scheme is customizable with the prepend_scheme parameter. If you set prepend_scheme
to None, then prepending will be disabled. URLs that require prepending to parse will still be accepted,
but the return value will not be modified.

IS_URL is compatible with the Internationalized Domain Name (IDN) standard specified in RFC 3490``RFC3490``:cite ). As a result, URLs can be regular strings or unicode strings.
If the URL's domain component (e.g. google.ca) contains non-US-ASCII letters, then the domain will
be converted into Punycode (defined in RFC 3492``RFC3492``:cite ). IS_URL goes a
bit beyond the standards, and allows non-US-ASCII characters to be present in the path
and query components of the URL as well. These non-US-ASCII characters will be encoded.
For example, space will be encoded as'%20'. The unicode character with hex code 0x4e86
will become '%4e%86'.

Examples:
``
requires = IS_URL())
requires = IS_URL(mode='generic')
requires = IS_URL(allowed_schemes=['https'])
requires = IS_URL(prepend_scheme='https')
requires = IS_URL(mode='generic',
                  allowed_schemes=['ftps', 'https'],
                  prepend_scheme='https')
``:code

##### ``IS_SLUG``
``IS_SLUG``:inxx
``
requires = IS_SLUG(maxlen=80, check=False, error_message='must be slug')
``:code

If ``check`` is set to ``True`` it check whether the validated value is a slug (allowing only alphanumeric characters and non-repeated dashes).

If ``check`` is set to ``False`` (default) it converts the input value to a slug.

##### ``IS_STRONG``
``IS_STRONG``:inxx

Enforces complexity requirements on a field (usually a password field)

Example:
``
requires = IS_STRONG(min=10, special=2, upper=2)
``:code

where
- min is minimum length of the value
- special is the minimum number of required special characters special characters are any of the following ``!@#$%^&*(){}[]-+``
- upper is the minimum number of upper case characters

##### ``IS_IMAGE``
``IS_IMAGE``:inxx

This validator checks if a file uploaded through the file input was saved in one of the selected image formats and has dimensions (width and height) within given limits.

It does not check for maximum file size (use IS_LENGTH for that). It returns
a validation failure if no data was uploaded. It supports the file formats BMP, GIF, JPEG, PNG, and it does not require the Python Imaging Library.

Code parts taken from ref.``source1``:cite

It takes the following arguments:
- extensions: iterable containing allowed image file extensions in lowercase
- maxsize: iterable containing maximum width and height of the image
- minsize: iterable containing minimum width and height of the image

Use (-1, -1) as minsize to bypass the image-size check.

Here are some Examples:
- Check if uploaded file is in any of supported image formats:
``
requires = IS_IMAGE()
``:code
- Check if uploaded file is either JPEG or PNG:
``
requires = IS_IMAGE(extensions=('jpeg', 'png'))
``:code

- Check if uploaded file is PNG with maximum size of 200x200 pixels:
``
requires = IS_IMAGE(extensions=('png'), maxsize=(200, 200))
``:code

- Note: on displaying an edit form for a table including ``requires = IS_IMAGE()``, a ``delete`` checkbox will NOT appear because to delete the file would cause the validation to fail. To display the ``delete`` checkbox use this validation:
``
requires = IS_EMPTY_OR(IS_IMAGE())
``:code


##### ``IS_UPLOAD_FILENAME``
``IS_UPLOAD_FILENAME``:inxx

This validator checks if the name and extension of a file uploaded through the file input matches the given criteria.

It does not ensure the file type in any way. Returns validation failure
if no data was uploaded.

Its arguments are:
- filename: filename (before dot) regex.
- extension: extension (after dot) regex.
- lastdot: which dot should be used as a filename / extension separator: ``True`` indicates last dot (e.g., "file.tar.gz" will be broken in "file.tar" + "gz") while ``False`` means first dot (e.g., "file.tar.gz" will be broken into "file" + "tar.gz").
- case: 0 means keep the case; 1 means transform the string into lowercase (default); 2 means transform the string into uppercase.

If there is no dot present, extension checks will be done against an empty
string and filename checks will be done against the whole value.

Examples:

Check if file has a pdf extension (case insensitive):
``
requires = IS_UPLOAD_FILENAME(extension='pdf')
``:code

Check if file has a tar.gz extension and name starting with backup:
``
requires = IS_UPLOAD_FILENAME(filename='backup.*', extension='tar.gz', lastdot=False)
``:code

Check if file has no extension and name matching README (case sensitive):
``
requires = IS_UPLOAD_FILENAME(filename='^README$', extension='^$', case=0)
``:code

##### ``IS_IPV4``
``IS_IPV4``:inxx

This validator checks if a field's value is an IP version 4 address in decimal form. Can
be set to force addresses from a certain range.

IPv4 regex taken from ref.``regexlib``:cite
Its arguments are:
- ``minip`` lowest allowed address; accepts: **str**, e.g., 192.168.0.1; **iterable of numbers**, e.g., [192, 168, 0, 1]; **int**, e.g., 3232235521
- ``maxip`` highest allowed address; same as above

All three example values are equal, since addresses are converted to
integers for inclusion check with following function:
``
number = 16777216 * IP[0] + 65536 * IP[1] + 256 * IP[2] + IP[3]
``:code

Examples:

Check for valid IPv4 address:
``
requires = IS_IPV4()
``:code

Check for valid private network IPv4 address:
``
requires = IS_IPV4(minip='192.168.0.1', maxip='192.168.255.255')
``:code

##### ``IS_UPPER``
``IS_UPPER``:inxx

This validator never returns an error. It converts the value to upper case.
``
requires = IS_UPPER()
``:code

##### ``IS_NULL_OR``
``IS_NULL_OR``:inxx

Deprecated, an alias for ``IS_EMPTY_OR`` described below.

##### ``IS_EMPTY_OR``
``IS_EMPTY_OR``:inxx

Sometimes you need to allow empty values on a field along with other requirements. For example a field may be a date but it can also be empty.
The ``IS_EMPTY_OR`` validator allows this:
``
requires = IS_EMPTY_OR(IS_DATE())
``:code

##### ``CLEANUP``
``CLEANUP``:inxx

This is a filter. It never fails. It just removes all characters whose decimal ASCII codes are not in the list [10, 13, 32-127].
``
requires = CLEANUP()
``:code

##### ``CRYPT``
``CRYPT``:inxx

This is also a filter. It performs a secure hash on the input and it is used to prevent passwords from being passed in the clear to the database.
``
requires = CRYPT()
``:code

By default, CRYPT uses 1000 iterations of the pbkdf2 algorithm combined with SHA512 to produce a 20-byte-long hash. Older versions of web2py used "md5" or HMAC+SHA512 depending on whether a key was was specified or not.

If a key is specified, CRYPT uses the HMAC algorithm. The key may contain a prefix that determines the algorithm to use with HMAC, for example SHA512:

``
requires = CRYPT(key='sha512:thisisthekey')
``:code

This is the recommended syntax. The key must be a unique string associated with the database used. The key can never be changed. If you lose the key, the previously hashed values become useless.

By default, CRYPT uses random salt, such that each result is different. To use a constant salt value, specify its value:

``
requires = CRYPT(salt='mysaltvalue')
``:code

Or, to use no salt:

``
requires = CRYPT(salt=False)
``:code

The CRYPT validator hashes its input, and this makes it somewhat special. If you need to validate a password field before it is hashed, you can use CRYPT in a list of validators, but must make sure it is the last of the list, so that it is called last. For example:

``
requires = [IS_STRONG(),CRYPT(key='sha512:thisisthekey')]
``:code

``CRYPT`` also takes a ``min_length`` argument, which defaults to zero.

The resulting hash takes the form ``alg$salt$hash``, where ``alg`` is the hash algorithm used, ``salt`` is the salt string (which can be empty), and ``hash`` is the algorithm's output. Consequently, the hash is self-identifying, allowing, for example, the algorithm to be changed without invalidating previous hashes. The key, however, must remain the same.

#### Database validators

##### ``IS_NOT_IN_DB``
``IS_NOT_IN_DB``:inxx

Consider the following example:
``
db.define_table('person', Field('name'))
db.person.name.requires = IS_NOT_IN_DB(db, 'person.name')
``:code

It requires that when you insert a new person, his/her name is not already in the database, ``db``, in the field ``person.name``. As with all other validators this requirement is enforced at the form processing level, not at the database level. This means that there is a small probability that, if two visitors try to concurrently insert records with the same person.name, this results in a race condition and both records are accepted. It is therefore safer to also inform the database that this field should have a unique value:
``
db.define_table('person', Field('name', unique=True))
db.person.name.requires = IS_NOT_IN_DB(db, 'person.name')
``:code

Now if a race condition occurs, the database raises an OperationalError and one of the two inserts is rejected.

The first argument of ``IS_NOT_IN_DB`` can be a database connection or a Set. In the latter case, you would be checking only the set defined by the Set.

The following code, for example, does not allow registration of two persons with the same name within 10 days of each other:
``
import datetime
now = datetime.datetime.today()
db.define_table('person',
    Field('name'),
    Field('registration_stamp', 'datetime', default=now))
recent = db(db.person.registration_stamp>now-datetime.timedelta(10))
db.person.name.requires = IS_NOT_IN_DB(recent, 'person.name')
``:code

##### ``IS_IN_DB``
``IS_IN_DB``:inxx

Consider the following tables and requirement:

``
db.define_table('person', Field('name', unique=True))
db.define_table('dog', Field('name'), Field('owner', db.person)
db.dog.owner.requires = IS_IN_DB(db, 'person.id', '%(name)s',
                                 zero=T('choose one'))
``:code

It is enforced at the level of dog INSERT/UPDATE/DELETE forms. It requires that a ``dog.owner`` be a valid id in the field ``person.id`` in the database ``db``. Because of this validator, the ``dog.owner`` field is represented as a dropbox. The third argument of the validator is a string that describes the elements in the dropbox. In the example you want to see the person ``%(name)s`` instead of the person ``%(id)s``. ``%(...)s`` is replaced by the value of the field in brackets for each record.

The ``zero`` option works very much like for the ``IS_IN_SET`` validator.

The first argument of the validator can be a database connection or a DAL Set, as in ``IS_NOT_IN_DB``. This can be useful for example when wishing to limit the records in the drop-down box. In this example, we use ``IS_IN_DB`` in a controller to limit the records dynamically each time the controller is called:

``
def index():
    (...)
    query = (db.table.field == 'xyz') #in practice 'xyz' would be a variable
    db.table.field.requires=IS_IN_DB(db(query),....)
    form=SQLFORM(...)
    if form.process().accepted: ...
    (...)
``:code

If you want the field validated, but you do not want a dropbox, you must put the validator in a list.

``
db.dog.owner.requires = [IS_IN_DB(db, 'person.id', '%(name)s')]
``:code

``_and``:inxx
Occasionally you want the drop-box (so you do not want to use the list syntax above) yet you want to use additional validators. For this purpose the ``IS_IN_DB`` validator takes an extra argument ``_and`` that can point to a list of other validators applied if the validated value passes the ``IS_IN_DB`` validation. For example to validate all dog owners in db that are not in a subset:
``
subset=db(db.person.id>100)
db.dog.owner.requires = IS_IN_DB(db, 'person.id', '%(name)s',
                                 _and=IS_NOT_IN_DB(subset,'person.id'))
``:code

``IS_IN_DB`` has a boolean ``distinct`` argument which defaults to ``False``. When set to ``True`` it prevents repeated values in the dropdown.

``IS_IN_DB`` also takes a ``cache`` argument that works like the ``cache`` argument of select.


##### ``IS_IN_DB`` and Tagging
``tags``:inxx
``multiple``:inxx

The ``IS_IN_DB`` validator has an optional attribute ``multiple=False``. If set to ``True`` multiple values can be stored in one field. This field should be of type ``list:reference`` as discussed in Chapter 6. An explicit example of tagging is discussed there. ``multiple`` references are handled automatically in create and update forms, but they are transparent to the DAL. We strongly suggest using the jQuery multiselect plugin to render multiple fields.

#### Custom validators
``custom validator``:inxx

All validators follow the prototype below:
``
class sample_validator:
    def __init__(self, *a, error_message='error'):
        self.a = a
        self.e = error_message
    def __call__(self, value):
        if validate(value):
            return (parsed(value), None)
        return (value, self.e)
    def formatter(self, value):
        return format(value)
``:code

i.e., when called to validate a value, a validator returns a tuple ``(x, y)``. If ``y`` is ``None``, then the value passed validation and ``x`` contains a parsed value. For example, if the validator requires the value to be an integer, ``x`` is converted to ``int(value)``. If the value did not pass validation, then ``x`` contains the input value and ``y`` contains an error message that explains the failed validation. This error message is used to report the error in forms that do not validate.

The validator may also contain a ``formatter`` method. It must perform the opposite conversion to the one the ``__call__`` does. For example, consider the source code for ``IS_DATE``:
``
class IS_DATE(object):
    def __init__(self, format='%Y-%m-%d', error_message='must be YYYY-MM-DD!'):
        self.format = format
        self.error_message = error_message
    def __call__(self, value):
        try:
            y, m, d, hh, mm, ss, t0, t1, t2 = time.strptime(value, str(self.format))
            value = datetime.date(y, m, d)
            return (value, None)
        except:
            return (value, self.error_message)
    def formatter(self, value):
        return value.strftime(str(self.format))
``:code

On success, the ``__call__`` method reads a date string from the form and converts it into a datetime.date object using the format string specified in the constructor. The ``formatter`` object takes a datetime.date object and converts it to a string representation using the same format. The ``formatter`` is called automatically in forms, but you can also call it explicitly to convert objects into their proper representation. For example:
``
>>> db = DAL()
>>> db.define_table('atable',
       Field('birth', 'date', requires=IS_DATE('%m/%d/%Y')))
>>> id = db.atable.insert(birth=datetime.date(2008, 1, 1))
>>> row = db.atable[id]
>>> print db.atable.formatter(row.birth)
01/01/2008
``:code

When multiple validators are required (and stored in a list), they are executed in order and the output of one is passed as input to the next. The chain breaks when one of the validators fails.

Conversely, when we call the ``formatter`` method of a field, the formatters of the associated validators are also chained, but in reverse order.

------
Notice that as alternative to custom validators, you can also use the ``onvalidate`` argument of ``form.accepts(...)``, ``form.process(...)`` and ``form.validate(...)``.
------


#### Validators with dependencies

Usually validators are set once for all in models.

Occasionally, you need to validate a field and the validator depends on the value of another field. This can be done in various ways. It can be done in the model or in the controller.

For example, here is a page that generates a registration form that asks for username and password twice. None of the fields can be empty, and both passwords must match:
``
def index():
    form = SQLFORM.factory(
        Field('username', requires=IS_NOT_EMPTY()),
        Field('password', requires=IS_NOT_EMPTY()),
        Field('password_again',
              requires=IS_EQUAL_TO(request.vars.password)))
    if form.process().accepted:
        pass # or take some action
    return dict(form=form)
``:code

The same mechanism can be applied to FORM and SQLFORM objects.

### Widgets

Here is a list of available web2py widgets:
``
SQLFORM.widgets.string.widget
SQLFORM.widgets.text.widget
SQLFORM.widgets.password.widget
SQLFORM.widgets.integer.widget
SQLFORM.widgets.double.widget
SQLFORM.widgets.time.widget
SQLFORM.widgets.date.widget
SQLFORM.widgets.datetime.widget
SQLFORM.widgets.upload.widget
SQLFORM.widgets.boolean.widget
SQLFORM.widgets.options.widget
SQLFORM.widgets.multiple.widget
SQLFORM.widgets.radio.widget
SQLFORM.widgets.checkboxes.widget
SQLFORM.widgets.autocomplete
``:code

The first ten of them are the defaults for the corresponding field types. The "options" widget is used when a field's requires is ``IS_IN_SET`` or ``IS_IN_DB`` with ``multiple=False`` (default behavior). The "multiple" widget is used when a field's requires is ``IS_IN_SET`` or ``IS_IN_DB`` with ``multiple=True``. The "radio" and "checkboxes" widgets are never used by default, but can be set manually. The autocomplete widget is special and discussed in its own section.

For example, to have a "string" field represented by a textarea:
``
Field('comment', 'string', widget=SQLFORM.widgets.text.widget)
``:code

Widgets can also be assigned to fields ''a posteriori'':

``
db.mytable.myfield.widget = SQLFORM.widgets.string.widget
``

Sometimes widgets take additional arguments and one needs to specify their values. In this case one can use ``lambda``

``
db.mytable.myfield.widget = lambda field,value: \
    SQLFORM.widgets.string.widget(field,value,_style='color:blue')
``

Widgets are helper factories and their first two arguments are always ``field`` and ``value``. The other arguments can include normal helper attributes such as ``_style``, ``_class``, etc. Some widgets also take special arguments. In particular ``SQLFORM.widgets.radio`` and ``SQLFORM.widgets.checkboxes`` take a ``style`` argument (not to be confused with ``_style``) which can be set to "table", "ul", or "divs" in order to match the ``formstyle`` of the containing form.

You can create new widgets or extend existing widgets.

``SQLFORM.widgets[type]`` is a class and ``SQLFORM.widgets[type].widget`` is a static member function of the corresponding class. Each widget function takes two arguments: the field object, and the current value of that field. It returns a representation of the widget. As an example, the string widget could be re-coded as follows:
``
def my_string_widget(field, value):
    return INPUT(_name=field.name,
                 _id="%s_%s" % (field._tablename, field.name),
                 _class=field.type,
                 _value=value,
                 requires=field.requires)

Field('comment', 'string', widget=my_string_widget)
``:code

The id and class values must follow the convention described later in this chapter. A widget may contain its own validators, but it is good practice to associate the validators to the "requires" attribute of the field and have the widget get them from there.

#### Autocomplete widget
``autocomplete``:inxx

There are two possible uses for the autocomplete widget: to autocomplete a field that takes a value from a list or to autocomplete a reference field (where the string to be autocompleted is a representation of the reference which is implemented as an id).

The first case is easy:
``
db.define_table('category',Field('name'))
db.define_table('product',Field('name'),Field('category'))
db.product.category.widget = SQLFORM.widgets.autocomplete(
     request, db.category.name, limitby=(0,10), min_length=2)
``:code

Where ``limitby`` instructs the widget to display no more than 10 suggestions at the time, and ``min_length`` instructs the widget to perform an Ajax callback to fetch suggestions only after the user has typed at least 2 characters in the search box.

The second case is more complex:
``
db.define_table('category',Field('name'))
db.define_table('product',Field('name'),Field('category'))
db.product.category.widget = SQLFORM.widgets.autocomplete(
     request, db.category.name, id_field=db.category.id)
``:code

In this case the value of ``id_field`` tells the widget that even if the value to be autocompleted is a ``db.category.name``, the value to be stored is the corresponding ``db.category.id``. An optional parameter is ``orderby`` that instructs the widget on how to sort the suggestions (alphabetical by default).

This widget works via Ajax. Where is the Ajax callback? Some magic is going on in this widget. The callback is a method of the widget object itself. How is it exposed? In web2py any piece of code can generate a response by raising an HTTP exception. This widget exploits this possibility in the following way: the widget sends the Ajax call to the same URL that generated the widget in the first place and puts a special token in the request.vars. Should the widget get instantiated again, it finds the token and raises an HTTP exception that responds to the request. All of this is done under the hood and hidden to the developer.

### ``SQLFORM.grid`` and ``SQLFORM.smartgrid``

-------
Attention: grid and smartgrid were experimental prior web2py version 2.0 and were vulnerable to information leakage. The grid and smartgrid are no longer experimental, but we are still not promising backward compatibility of the presentation layer of the grid, only of its APIs.
-------

These are two high level gadgets that create complex CRUD controls. They provide pagination, the ability to browser, search, sort, create, update and delete records from a single gadgets.

#### ``SQLFORM.grid`` 
The simplest of the two is ``SQLFORM.grid``. Here is an example of usage:

``
@auth.requires_login()
def manage_users():
    grid = SQLFORM.grid(db.auth_user)
    return locals()
``:code

which produces the following page:

[[image @///image/en6700.png center 480px]]

The first argument of ``SQLFORM.grid`` can be a table or a query. The grid gadget will provide access to records matching the query.

Before we dive into the long list of arguments of the grid gadget we need to understand how it works. The gadget looks at ``request.args`` in order to decide what to do (browse, search, create, update, delete, etc.). Each button created by the gadget links the same function (``manage_users`` in the above case) but passes different ``request.args``. By default all the URL generated by the grid are digitally signed and verified. This means one cannot perform certain actions (create, update, delete) without being logged-in. These restrictions can be relaxed:

``
def manage_users():
    grid = SQLFORM.grid(db.auth_user,user_signature=False)
    return locals()
``:code

but we do not recommend it.

-----
Because of the way grid works one can only have one grid per controller function, unless they are embedded as components via ``LOAD``.
To make the default search grid work in more than one LOADed grid, please use a different ``formname`` for each one.
-----

Because the function that contains the grid may itself manipulate the command line arguments, the grid needs to know which args should be handled by the grid and which not. Here is an example of code that allows one to manage any table:

``
@auth.requires_login()
def manage():
    table = request.args(0)
    if not table in db.tables(): redirect(URL('error'))
    grid = SQLFORM.grid(db[table],args=request.args[:1])
    return locals()
``:code

the ``args`` argument of the ``grid`` specifies which ``request.args`` should be passed along and ignored by the gadget. In our case ``request.args[:1]`` is the name of the table we want to manage and it is handled by the ``manage`` function itself, not by the gadget.

The complete signature for the grid is the following:

``
SQLFORM.grid(
    query,
    fields=None,
    field_id=None,
    left=None,
    headers={},
    orderby=None,
    groupby=None,
    searchable=True,
    sortable=True,
    paginate=20,
    deletable=True,
    editable=True,
    details=True,
    selectable=None,
    create=True,
    csv=True,
    links=None,
    links_in_grid=True,
    upload='<default>',
    args=[],
    user_signature=True,
    maxtextlengths={},
    maxtextlength=20,
    onvalidation=None,
    oncreate=None,
    onupdate=None,
    ondelete=None,
    sorter_icons=(XML('&#x2191;'), XML('&#x2193;')),
    ui = 'web2py',
    showbuttontext=True,
    _class="web2py_grid",
    formname='web2py_grid',
    search_widget='default',
    ignore_rw = False,
    formstyle = 'table3cols',
    exportclasses = None,
    formargs={},
    createargs={},
    editargs={},
    viewargs={},
    buttons_placement = 'right',
    links_placement = 'right'
    )
``:code

- ``fields`` is a list of fields to be fetched from the database. It is also used to determine which fields to be shown in the grid view.
- ``field_id`` must be the field of the table to be used as ID, for example ``db.mytable.id``.
- ``left`` is an optional left join expressions used to build ``...select(left=...)``.
- ``headers`` is a dictionary that maps 'tablename.fieldname' into the corresponding header label, e.g. ``{'auth_user.email' : 'Email Address'}``
- ``orderby`` is used as default ordering for the rows.
- ``groupby`` is used to group the set. Use the same syntax as you were passing in a simple ``select(groupby=...)``.
- ``searchable``, ``sortable``, ``deletable``, ``editable``, ``details``, ``create`` determine whether one can search, sort, delete, edit, view details, and create new records respectively.
- ``selectable`` can be used to call a custom function on multiple records (a checkbox will be inserted for every row) e.g.
  ``
   selectable = lambda ids : redirect(URL('default', 'mapping_multiple', vars=dict(id=ids)))
``:code
- ``paginate`` sets the max number of rows per page.
- ``csv`` if set to true allows to download the grid in various format (more on that later).
- ``links`` is used to display new columns which can be links to other pages. The ``links`` argument must be a list of  ``dict(header='name',body=lambda row: A(...))`` where ``header`` is the header of the new column and ``body`` is a function that takes a row and returns a value. In the example, the value is a ``A(...)`` helper.
- ``links_in_grid`` if set to False, links will only be displayed in the "details" and "edit" page (so, not on the main grid)
- ``upload`` same as SQLFORM's one. web2py uses the action at that URL to download the file
- ``maxtextlength`` sets the maximum length of text to be displayed for each field value, in the grid view. This value can be overwritten for each field using ``maxtextlengths``, a dictionary of 'tablename.fieldname':length e.g. ``{'auth_user.email' : 50}``
- ``onvalidation``, ``oncreate``, ``onupdate`` and ``ondelete`` are callback functions. All but ``ondelete`` take a form object as input.
- ``sorter_icons`` is a list of two strings (or helpers) that will be used to represent the up and down sorting options for each field.
- ``ui`` can be set equal to 'web2py' and will generate web2py friendly class names, can be set equal to ``jquery-ui`` and will generate jquery UI friendly class names, but it can also be its own set of class names for the various grid components:
  ``
ui = dict(
    widget='',
    header='',
    content='',
    default='',
    cornerall='',
    cornertop='',
    cornerbottom='',
    button='button',
    buttontext='buttontext button',
    buttonadd='icon plus',
    buttonback='icon leftarrow',
    buttonexport='icon downarrow',
    buttondelete='icon trash',
    buttonedit='icon pen',
    buttontable='icon rightarrow',
    buttonview='icon magnifier')
``:code

- ``search_widget`` allows to override the default search widget and we refer the reader the source code in "gluon/sqlhtml.py" for details.
- ``showbuttontext`` allows to have buttons without text (there will effectively be only icons)
- ``_class`` is the class for the grid container.
- ``showbutton`` allows to turn off all buttons.
- ``exportclasses`` takes a dictionary of tuples: by default it's defined as

``
csv_with_hidden_cols=(ExporterCSV, 'CSV (hidden cols)'),
csv=(ExporterCSV, 'CSV'),
xml=(ExporterXML, 'XML'),
html=(ExporterHTML, 'HTML'),
tsv_with_hidden_cols=(ExporterTSV, 'TSV (Excel compatible, hidden cols)'),
tsv=(ExporterTSV, 'TSV (Excel compatible)'))
``:code

ExporterCSV, ExporterXML, ExporterHTML and ExporterTSV are all defined in gluon/sqlhtml.py. Take a look at those for creating your own exporter. If you pass a dict like ``dict(xml=False, html=False)`` you will disable the xml and html export formats.

- ``formargs`` is passed to all SQLFORM objects used by the grid, while ``createargs``,``editargs`` and ``viewargs`` are passed only to the specific create, edit and details SQLFORMs
- ``formname``, ``ignore_rw`` and ``formstyle`` are passed to the SQLFORM objects used by the grid for create/update forms.
- ``buttons_placement`` and ``links_placement`` both take a parameter ('right', 'left', 'both') that will affect where on the row the buttons (or the links) will be placed
------
``deletable``, ``editable`` and ``details`` are usually boolean values but they can be functions which take the row object and decide whether to display the corresponding button or not.
-----

##### ``Showing virtual fields in SQLFORM.grid and smartgrid``
In recent versions of web2py, virtual fields are shown in grids like normal fields: either shown alongside all other fields by default, or by including them in the ``fields`` argument. However, virtual fields are not sortable. 

In older web2py versions (up to 2.4.7), showing virtual fields in a grid requires use of the ``links`` argument. If table db.t1 has a field called t1.vfield which is based on the values of t1.field1 and t1.field2, do this:

``grid = SQLFORM.grid(db.t1, ..., fields = [t1.field1, t1.field2,...], 
   links = [dict(header='Virtual Field',body=lamba row:row.vfield),...] )
``:code

In all cases, because t1.vfield depends on t1.field1 and t1.field2, these fields must be present in the row. In the example above, this is guaranteed by including t1.field1 and t1.field2 in the fields argument. Alternatively, showing all fields will also work. You can suppress a field from displaying by setting the readable attibute to False. 

Note that when defining the virtual field, the lambda function must qualify fields with the database name, but in the links argument, this is not necessary.
So for the example above, the virtual field may be defined like:
``
db.define_table('t1',Field('field1','string'),
   Field('field2','string'),
  Field.Virtual('virtual1', lambda row: row.t1.field1 + row.t1.field2),
  ...)
``:code

#### ``SQLFORM.smartgrid``
A ``SQLFORM.smartgrid`` looks a lot like a ``grid``, in fact it contains a grid but it is designed to take as input not a query but only one table and to browse said table and selected referencing tables.

For example consider the following table structure:

``
db.define_table('parent',Field('name'))
db.define_table('child',Field('name'),Field('parent','reference parent'))
``:code

With SQLFORM.grid you can list all parents:

``
SQLFORM.grid(db.parent)
``:code
all children:
``
SQLFORM.grid(db.child)
``:code
and all parents and children in one table:
``
SQLFORM.grid(db.parent,left=db.child.on(db.child.parent==db.parent.id))
``:code

With SQLFORM.smartgrid you can put all the data in one gadget that spawns both tables:

``
@auth.requires_login()
def manage():
    grid = SQLFORM.smartgrid(db.parent,linked_tables=['child'])
    return locals()
``:code

which looks like this:

[[image @///image/en6800.png center 480px]]

Notice the extra "children" links. One could create the extra ``links`` using a regular ``grid`` but they would point to a different action. With a ``smartgrid`` they are created automatically and handled by the same gadget.

Also notice that when clicking on the "children" link for a given parent one only gets the list of children for that parent (and that is obvious) but also notice that if one now tried to add a new child, the parent value for the new child is automatically set to the selected parent (displayed in the breadcrumbs associated to the gadget). The value of this field can be overwritten. We can prevent this by making it readonly:

``
@auth.requires_login():
def manage():
    db.child.parent.writable = False
    grid = SQLFORM.smartgrid(db.parent,linked_tables=['child'])
    return locals()
``:code

If the ``linked_tables`` argument is not specified all referencing tables are automatically linked. Anyway, to avoid accidentally exposing data we recommend explicitly listing tables that should be linked.

The following code creates a very powerful management interface for all tables in the system:

``
@auth.requires_membership('managers'):
def manage():
    table = request.args(0) or 'auth_user'
    if not table in db.tables(): redirect(URL('error'))
    grid = SQLFORM.smartgrid(db[table],args=request.args[:1])
    return locals()
``:code

The ``smartgrid`` takes the same arguments as a ``grid`` and some more with some caveats:

- The first argument is a table, not a query
- There is a extra argument ``constraints`` which is a dictionary of 'tablename':query which can be used to further restrict access to the records displayed in the 'tablename' grid.
- There is a extra argument ``linked_tables`` which is a list of tablenames of tables that should be accessible via the smartgrid.
- ``divider`` allows to specify a character to use in the breadcrumb navigator, ``breadcrumbs_class`` will apply the class to the breadcrumb element
- All the arguments but the table, ``args``, ``linked_tables`` and ``user_signatures`` can be dictionaries as explained below.

Consider the previous grid:
``
grid = SQLFORM.smartgrid(db.parent,linked_tables=['child'])
``:code
It allows one to access both a ``db.parent`` and a ``db.child``. Apart for navigation controls, for each one table, a smarttable is nothing but a grid. This means that, in this case, one smartgrid can create a grid for parent and one grid for child. We may want to pass different sets of parameters to these grids. For example different sets of ``searchable`` parameters.

While for a grid we would pass a boolean:
``
grid = SQLFORM.grid(db.parent,searchable=True)
``:code

for a smartgrid we would pass a dictionary of booleans:
``
grid = SQLFORM.smartgrid(db.parent,linked_tables=['child'],
     searchable= dict(parent=True, child=False))
``:code

In this way we made parents searchable but children for each parent not searchable (there should not be that many to need the search widget).

-------
The grid and smartgrid gadgets are here to stay but they are marked experimental because the actual html layout of what they return and the exact set of parameters one can pass to them  may be subject to change as new functionalities are added.
-------


``grid`` and ``smartgrid`` do not automatically enforce access control like crud does but you can integrate it with ``auth`` using explicit permission checking:

``
grid = SQLFORM.grid(db.auth_user,
     editable = auth.has_membership('managers'),
     deletable = auth.has_membership('managers'))
``:code

or

``
grid = SQLFORM.grid(db.auth_user,
     editable = auth.has_permission('edit','auth_user'),
     deletable = auth.has_permission('delete','auth_user'))
``:code

The ``smartgrid`` is the only gadget in web2py that displays the table name and it need both the singular and the plural. For example one parent can have one "Child" or many "Children". Therefore a table object needs to know its own singular and plural names. web2py normally guesses them but you can set the explicitly:

``
db.define_table('child', ..., singular="Child", plural="Children")
``:code

or with: ``singular``:inxx ``plural``:inxx

``
db.define_table('child', ...)
db.child._singular = "Child"
db.child._plural = "Children"
``:code

They should also be internationalized using the ``T`` operator.

The plural and singular values are then used by ``smartgrid``
to provide correct names for headers and links.
